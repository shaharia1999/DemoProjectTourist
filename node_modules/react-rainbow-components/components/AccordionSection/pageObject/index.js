"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

/**
 * AccordoinSection page object class.
 * @class
 */
var PageAccordionSection = /*#__PURE__*/function () {
  /**
   * Create a new AccordionSection page object.
   * @constructor
   * @param {string} rootElement - The selector of the AccordoinSection root element.
   */
  function PageAccordionSection(rootElement) {
    (0, _classCallCheck2["default"])(this, PageAccordionSection);
    this.rootElement = rootElement;
  }
  /**
   * Clicks the button icon element.
   * @method
   */


  (0, _createClass2["default"])(PageAccordionSection, [{
    key: "clickButton",
    value: function clickButton() {
      $(this.rootElement).$('[data-id="accordion-section-summary"]').click();
    }
    /**
     * Returns true when the button icon has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocusButton",
    value: function hasFocusButton() {
      return $(this.rootElement).$('[data-id="accordion-section-summary"]').isFocused();
    }
    /**
     * Returns true when the accordion section is expanded, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isExpanded",
    value: function isExpanded() {
      return $(this.rootElement).$('[data-id="accordion-section-content"]').isDisplayed();
    }
    /**
     * Returns the label of the accordion section.
     * @method
     * @returns {string}
     */

  }, {
    key: "getLabel",
    value: function getLabel() {
      return $(this.rootElement).$('[data-id="accordion-section-label"]').getText();
    }
  }]);
  return PageAccordionSection;
}();

module.exports = PageAccordionSection;