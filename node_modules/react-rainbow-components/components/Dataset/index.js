"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Dataset;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _context = _interopRequireDefault(require("../Chart/context"));

var _hooks = require("../../libs/hooks");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** @category DataView */
function Dataset(props) {
  var datasetId = (0, _hooks.useUniqueIdentifier)('dataset');
  var label = props.title,
      data = props.values,
      rest = (0, _objectWithoutProperties2["default"])(props, ["title", "values"]);

  var _React$useContext = _react["default"].useContext(_context["default"]),
      registerDataset = _React$useContext.registerDataset,
      unregisterDataset = _React$useContext.unregisterDataset,
      updateDataset = _React$useContext.updateDataset;

  var isRegistered = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    if (isRegistered.current) {
      updateDataset(datasetId, _objectSpread({
        label: label,
        data: data
      }, rest));
    }
  });
  (0, _react.useEffect)(function () {
    registerDataset(datasetId, _objectSpread({
      label: label,
      data: data
    }, rest));
    isRegistered.current = true;
    return function () {
      if (isRegistered.current) {
        unregisterDataset(datasetId);
        isRegistered.current = false;
      }
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null);
}

Dataset.propTypes = {
  /** The type of chart for the specific dataset, it can be different than the chart type */
  type: _propTypes["default"].oneOf(['line']),

  /** The values to represent in the chart */
  values: _propTypes["default"].arrayOf(_propTypes["default"].number),

  /** The title for the dataset which appears in the legend and tooltips. */
  title: _propTypes["default"].string,

  /** The fill color under the line. */
  backgroundColor: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]),

  /** The color of the line, if left undefined, the backgroundColor is used */
  borderColor: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]),

  /** The ID of the group to which this dataset belongs to
   * (when stacked, each group will be a separate stack) */
  stack: _propTypes["default"].string,

  /** Whether to fill the area under the line */
  fill: _propTypes["default"].bool
};
Dataset.defaultProps = {
  type: undefined,
  values: [],
  title: 'Dataset',
  backgroundColor: undefined,
  borderColor: undefined,
  stack: undefined,
  fill: false
};