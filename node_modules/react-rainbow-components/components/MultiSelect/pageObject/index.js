"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var PageInternalDropdown = require('../../InternalDropdown/pageObject');

var privateGetMenu = Symbol('privateGetMenu');
/**
 * MultiSelect page object class.
 * @class
 */

var PageMultiSelect = /*#__PURE__*/function () {
  /**
   * Create a new MultiSelect page object.
   * @constructor
   * @param {string} rootElement - The selector of the MultiSelect root element.
   */
  function PageMultiSelect(rootElement) {
    (0, _classCallCheck2["default"])(this, PageMultiSelect);
    this.rootElement = rootElement;
  }
  /**
   * Clicks the component
   * @method
   */


  (0, _createClass2["default"])(PageMultiSelect, [{
    key: "click",
    value: function click() {
      $(this.rootElement).$('[role="combobox"]').click();
    }
    /**
     * Clicks the label element
     * @method
     */

  }, {
    key: "clickLabel",
    value: function clickLabel() {
      $(this.rootElement).$('label').click();
    }
    /**
     * Clicks the trigger button
     * @method
     */

  }, {
    key: "clickTrigger",
    value: function clickTrigger() {
      $(this.rootElement).$('[data-id="button-icon-element"]').click();
    }
    /**
     * Returns true when the options menu is open, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isMenuOpen",
    value: function isMenuOpen() {
      return $(this.rootElement).$('div[role="combobox"]').getAttribute('aria-expanded') === 'true';
    }
    /**
     * Returns true when the Add button has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasTriggerFocus",
    value: function hasTriggerFocus() {
      return $(this.rootElement).$('[role="combobox"] > button').isFocused();
    }
    /**
     * Returns true when the textbox input element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasInputFocus",
    value: function hasInputFocus() {
      return $(this.rootElement).$('[role="textbox"]').isFocused();
    }
    /**
     * Returns a new InternalDropdown page object for the element with the supplied id.
     * @method
     */

  }, {
    key: privateGetMenu,
    value: function value() {
      var menuId = "#".concat($(this.rootElement).$('[role="combobox"]').getAttribute('aria-controls'));

      if (this.isMenuOpen()) {
        return new PageInternalDropdown(menuId);
      }

      return null;
    }
    /**
     * Returns a new Option page object of the element in item position.
     * @method
     * @param {number} optionIndex - The base 0 index of the Option.
     */

  }, {
    key: "getOption",
    value: function getOption(optionIndex) {
      return this[privateGetMenu]().getOption(optionIndex);
    }
    /**
     * Wait until the dropdown is open.
     * @method
     */

  }, {
    key: "waitUntilOpen",
    value: function waitUntilOpen() {
      var _this = this;

      browser.waitUntil(function () {
        return _this.isMenuOpen();
      });
    }
  }]);
  return PageMultiSelect;
}();

module.exports = PageMultiSelect;