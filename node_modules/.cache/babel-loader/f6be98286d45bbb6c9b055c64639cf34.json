{"ast":null,"code":"module.exports = clipboardCopy;\n\nfunction clipboardCopy(text) {\n  // Use the Async Clipboard API when available\n  if (navigator.clipboard) {\n    return navigator.clipboard.writeText(text);\n  } // ...Otherwise, use document.execCommand() fallback\n  // Put the text to copy into a <span>\n\n\n  var span = document.createElement('span');\n  span.textContent = text; // Preserve consecutive spaces and newlines\n\n  span.style.whiteSpace = 'pre'; // An <iframe> isolates the <span> from the page's styles\n\n  var iframe = document.createElement('iframe');\n  iframe.sandbox = 'allow-same-origin'; // Add the <iframe> to the page\n\n  document.body.appendChild(iframe);\n  var win = iframe.contentWindow; // Add the <span> to the <iframe>\n\n  win.document.body.appendChild(span); // Get a Selection object representing the range of text selected by the user\n\n  var selection = win.getSelection(); // Fallback for Firefox which fails to get a selection from an <iframe>\n\n  if (!selection) {\n    win = window;\n    selection = win.getSelection();\n    document.body.appendChild(span);\n  }\n\n  var range = win.document.createRange();\n  selection.removeAllRanges();\n  range.selectNode(span);\n  selection.addRange(range);\n  var success = false;\n\n  try {\n    success = win.document.execCommand('copy');\n  } catch (err) {}\n\n  selection.removeAllRanges();\n  win.document.body.removeChild(span);\n  document.body.removeChild(iframe); // The Async Clipboard API returns a promise that may reject with `undefined` so we\n  // match that here for consistency.\n\n  return success ? Promise.resolve() : Promise.reject(); // eslint-disable-line prefer-promise-reject-errors\n}","map":{"version":3,"sources":["D:/PorzotokFrontend/node_modules/clipboard-copy/index.js"],"names":["module","exports","clipboardCopy","text","navigator","clipboard","writeText","span","document","createElement","textContent","style","whiteSpace","iframe","sandbox","body","appendChild","win","contentWindow","selection","getSelection","window","range","createRange","removeAllRanges","selectNode","addRange","success","execCommand","err","removeChild","Promise","resolve","reject"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,aAAjB;;AAEA,SAASA,aAAT,CAAwBC,IAAxB,EAA8B;AAC5B;AACA,MAAIC,SAAS,CAACC,SAAd,EAAyB;AACvB,WAAOD,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BH,IAA9B,CAAP;AACD,GAJ2B,CAM5B;AAEA;;;AACA,MAAII,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAX;AACAF,EAAAA,IAAI,CAACG,WAAL,GAAmBP,IAAnB,CAV4B,CAY5B;;AACAI,EAAAA,IAAI,CAACI,KAAL,CAAWC,UAAX,GAAwB,KAAxB,CAb4B,CAe5B;;AACA,MAAIC,MAAM,GAAGL,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACAI,EAAAA,MAAM,CAACC,OAAP,GAAiB,mBAAjB,CAjB4B,CAmB5B;;AACAN,EAAAA,QAAQ,CAACO,IAAT,CAAcC,WAAd,CAA0BH,MAA1B;AACA,MAAII,GAAG,GAAGJ,MAAM,CAACK,aAAjB,CArB4B,CAuB5B;;AACAD,EAAAA,GAAG,CAACT,QAAJ,CAAaO,IAAb,CAAkBC,WAAlB,CAA8BT,IAA9B,EAxB4B,CA0B5B;;AACA,MAAIY,SAAS,GAAGF,GAAG,CAACG,YAAJ,EAAhB,CA3B4B,CA6B5B;;AACA,MAAI,CAACD,SAAL,EAAgB;AACdF,IAAAA,GAAG,GAAGI,MAAN;AACAF,IAAAA,SAAS,GAAGF,GAAG,CAACG,YAAJ,EAAZ;AACAZ,IAAAA,QAAQ,CAACO,IAAT,CAAcC,WAAd,CAA0BT,IAA1B;AACD;;AAED,MAAIe,KAAK,GAAGL,GAAG,CAACT,QAAJ,CAAae,WAAb,EAAZ;AACAJ,EAAAA,SAAS,CAACK,eAAV;AACAF,EAAAA,KAAK,CAACG,UAAN,CAAiBlB,IAAjB;AACAY,EAAAA,SAAS,CAACO,QAAV,CAAmBJ,KAAnB;AAEA,MAAIK,OAAO,GAAG,KAAd;;AACA,MAAI;AACFA,IAAAA,OAAO,GAAGV,GAAG,CAACT,QAAJ,CAAaoB,WAAb,CAAyB,MAAzB,CAAV;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY,CAAE;;AAEhBV,EAAAA,SAAS,CAACK,eAAV;AACAP,EAAAA,GAAG,CAACT,QAAJ,CAAaO,IAAb,CAAkBe,WAAlB,CAA8BvB,IAA9B;AACAC,EAAAA,QAAQ,CAACO,IAAT,CAAce,WAAd,CAA0BjB,MAA1B,EAhD4B,CAkD5B;AACA;;AACA,SAAOc,OAAO,GACVI,OAAO,CAACC,OAAR,EADU,GAEVD,OAAO,CAACE,MAAR,EAFJ,CApD4B,CAsDP;AACtB","sourcesContent":["module.exports = clipboardCopy\n\nfunction clipboardCopy (text) {\n  // Use the Async Clipboard API when available\n  if (navigator.clipboard) {\n    return navigator.clipboard.writeText(text)\n  }\n\n  // ...Otherwise, use document.execCommand() fallback\n\n  // Put the text to copy into a <span>\n  var span = document.createElement('span')\n  span.textContent = text\n\n  // Preserve consecutive spaces and newlines\n  span.style.whiteSpace = 'pre'\n\n  // An <iframe> isolates the <span> from the page's styles\n  var iframe = document.createElement('iframe')\n  iframe.sandbox = 'allow-same-origin'\n\n  // Add the <iframe> to the page\n  document.body.appendChild(iframe)\n  var win = iframe.contentWindow\n\n  // Add the <span> to the <iframe>\n  win.document.body.appendChild(span)\n\n  // Get a Selection object representing the range of text selected by the user\n  var selection = win.getSelection()\n\n  // Fallback for Firefox which fails to get a selection from an <iframe>\n  if (!selection) {\n    win = window\n    selection = win.getSelection()\n    document.body.appendChild(span)\n  }\n\n  var range = win.document.createRange()\n  selection.removeAllRanges()\n  range.selectNode(span)\n  selection.addRange(range)\n\n  var success = false\n  try {\n    success = win.document.execCommand('copy')\n  } catch (err) {}\n\n  selection.removeAllRanges()\n  win.document.body.removeChild(span)\n  document.body.removeChild(iframe)\n\n  // The Async Clipboard API returns a promise that may reject with `undefined` so we\n  // match that here for consistency.\n  return success\n    ? Promise.resolve()\n    : Promise.reject() // eslint-disable-line prefer-promise-reject-errors\n}\n"]},"metadata":{},"sourceType":"script"}