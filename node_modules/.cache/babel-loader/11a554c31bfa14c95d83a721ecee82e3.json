{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\n\nvar entities = require('parse-entities');\n\nmodule.exports = factory; // Factory to create an entity decoder.\n\nfunction factory(ctx) {\n  decoder.raw = decodeRaw;\n  return decoder; // Normalize `position` to add an `indent`.\n\n  function normalize(position) {\n    var offsets = ctx.offset;\n    var line = position.line;\n    var result = [];\n\n    while (++line) {\n      if (!(line in offsets)) {\n        break;\n      }\n\n      result.push((offsets[line] || 0) + 1);\n    }\n\n    return {\n      start: position,\n      indent: result\n    };\n  } // Decode `value` (at `position`) into text-nodes.\n\n\n  function decoder(value, position, handler) {\n    entities(value, {\n      position: normalize(position),\n      warning: handleWarning,\n      text: handler,\n      reference: handler,\n      textContext: ctx,\n      referenceContext: ctx\n    });\n  } // Decode `value` (at `position`) into a string.\n\n\n  function decodeRaw(value, position, options) {\n    return entities(value, xtend(options, {\n      position: normalize(position),\n      warning: handleWarning\n    }));\n  } // Handle a warning.\n  // See <https://github.com/wooorm/parse-entities> for the warnings.\n\n\n  function handleWarning(reason, position, code) {\n    if (code !== 3) {\n      ctx.file.message(reason, position);\n    }\n  }\n}","map":{"version":3,"sources":["D:/PorzotokFrontend/node_modules/remark-parse/lib/decode.js"],"names":["xtend","require","entities","module","exports","factory","ctx","decoder","raw","decodeRaw","normalize","position","offsets","offset","line","result","push","start","indent","value","handler","warning","handleWarning","text","reference","textContext","referenceContext","options","reason","code","file","message"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,gBAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,OAAjB,C,CAEA;;AACA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AACpBC,EAAAA,OAAO,CAACC,GAAR,GAAcC,SAAd;AAEA,SAAOF,OAAP,CAHoB,CAKpB;;AACA,WAASG,SAAT,CAAmBC,QAAnB,EAA6B;AAC3B,QAAIC,OAAO,GAAGN,GAAG,CAACO,MAAlB;AACA,QAAIC,IAAI,GAAGH,QAAQ,CAACG,IAApB;AACA,QAAIC,MAAM,GAAG,EAAb;;AAEA,WAAO,EAAED,IAAT,EAAe;AACb,UAAI,EAAEA,IAAI,IAAIF,OAAV,CAAJ,EAAwB;AACtB;AACD;;AAEDG,MAAAA,MAAM,CAACC,IAAP,CAAY,CAACJ,OAAO,CAACE,IAAD,CAAP,IAAiB,CAAlB,IAAuB,CAAnC;AACD;;AAED,WAAO;AAACG,MAAAA,KAAK,EAAEN,QAAR;AAAkBO,MAAAA,MAAM,EAAEH;AAA1B,KAAP;AACD,GApBmB,CAsBpB;;;AACA,WAASR,OAAT,CAAiBY,KAAjB,EAAwBR,QAAxB,EAAkCS,OAAlC,EAA2C;AACzClB,IAAAA,QAAQ,CAACiB,KAAD,EAAQ;AACdR,MAAAA,QAAQ,EAAED,SAAS,CAACC,QAAD,CADL;AAEdU,MAAAA,OAAO,EAAEC,aAFK;AAGdC,MAAAA,IAAI,EAAEH,OAHQ;AAIdI,MAAAA,SAAS,EAAEJ,OAJG;AAKdK,MAAAA,WAAW,EAAEnB,GALC;AAMdoB,MAAAA,gBAAgB,EAAEpB;AANJ,KAAR,CAAR;AAQD,GAhCmB,CAkCpB;;;AACA,WAASG,SAAT,CAAmBU,KAAnB,EAA0BR,QAA1B,EAAoCgB,OAApC,EAA6C;AAC3C,WAAOzB,QAAQ,CACbiB,KADa,EAEbnB,KAAK,CAAC2B,OAAD,EAAU;AAAChB,MAAAA,QAAQ,EAAED,SAAS,CAACC,QAAD,CAApB;AAAgCU,MAAAA,OAAO,EAAEC;AAAzC,KAAV,CAFQ,CAAf;AAID,GAxCmB,CA0CpB;AACA;;;AACA,WAASA,aAAT,CAAuBM,MAAvB,EAA+BjB,QAA/B,EAAyCkB,IAAzC,EAA+C;AAC7C,QAAIA,IAAI,KAAK,CAAb,EAAgB;AACdvB,MAAAA,GAAG,CAACwB,IAAJ,CAASC,OAAT,CAAiBH,MAAjB,EAAyBjB,QAAzB;AACD;AACF;AACF","sourcesContent":["'use strict'\n\nvar xtend = require('xtend')\nvar entities = require('parse-entities')\n\nmodule.exports = factory\n\n// Factory to create an entity decoder.\nfunction factory(ctx) {\n  decoder.raw = decodeRaw\n\n  return decoder\n\n  // Normalize `position` to add an `indent`.\n  function normalize(position) {\n    var offsets = ctx.offset\n    var line = position.line\n    var result = []\n\n    while (++line) {\n      if (!(line in offsets)) {\n        break\n      }\n\n      result.push((offsets[line] || 0) + 1)\n    }\n\n    return {start: position, indent: result}\n  }\n\n  // Decode `value` (at `position`) into text-nodes.\n  function decoder(value, position, handler) {\n    entities(value, {\n      position: normalize(position),\n      warning: handleWarning,\n      text: handler,\n      reference: handler,\n      textContext: ctx,\n      referenceContext: ctx\n    })\n  }\n\n  // Decode `value` (at `position`) into a string.\n  function decodeRaw(value, position, options) {\n    return entities(\n      value,\n      xtend(options, {position: normalize(position), warning: handleWarning})\n    )\n  }\n\n  // Handle a warning.\n  // See <https://github.com/wooorm/parse-entities> for the warnings.\n  function handleWarning(reason, position, code) {\n    if (code !== 3) {\n      ctx.file.message(reason, position)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}