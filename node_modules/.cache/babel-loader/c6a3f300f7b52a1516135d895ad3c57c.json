{"ast":null,"code":"/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\n\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\n\n\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/*\r\nLanguage: Markdown\r\nRequires: xml.js\r\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\r\nWebsite: https://daringfireball.net/projects/markdown/\r\nCategory: common, markup\r\n*/\n\n\nfunction markdown(hljs) {\n  const INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [// TODO: fix to allow these to work with sublanguage also\n    {\n      begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*'\n    }, {\n      begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*'\n    }, // needed to allow markdown as a sublanguage to work\n    {\n      begin: '```',\n      end: '```+[ ]*$'\n    }, {\n      begin: '~~~',\n      end: '~~~+[ ]*$'\n    }, {\n      begin: '`.+?`'\n    }, {\n      begin: '(?=^( {4}|\\\\t))',\n      // use contains to gobble up multiple lines to allow the block to be whatever size\n      // but only have a single open/close tag vs one per line\n      contains: [{\n        begin: '^( {4}|\\\\t)',\n        end: '(\\\\n)$'\n      }],\n      relevance: 0\n    }]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [{\n      className: 'symbol',\n      begin: /\\[/,\n      end: /\\]/,\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'link',\n      begin: /:\\s*/,\n      end: /$/,\n      excludeBegin: true\n    }]\n  };\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  const LINK = {\n    variants: [// too much like nested array access in so many languages\n    // to have any real relevance\n    {\n      begin: /\\[.+?\\]\\[.*?\\]/,\n      relevance: 0\n    }, // popular internet URLs\n    {\n      begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n      relevance: 2\n    }, {\n      begin: concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n      relevance: 2\n    }, // relative urls\n    {\n      begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n      relevance: 1\n    }, // whatever else, lower relevance (might not be a link at all)\n    {\n      begin: /\\[.+?\\]\\(.*?\\)/,\n      relevance: 0\n    }],\n    returnBegin: true,\n    contains: [{\n      className: 'string',\n      relevance: 0,\n      begin: '\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      returnEnd: true\n    }, {\n      className: 'link',\n      relevance: 0,\n      begin: '\\\\]\\\\(',\n      end: '\\\\)',\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'symbol',\n      relevance: 0,\n      begin: '\\\\]\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      excludeEnd: true\n    }]\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /_{2}/,\n      end: /_{2}/\n    }, {\n      begin: /\\*{2}/,\n      end: /\\*{2}/\n    }]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /\\*(?!\\*)/,\n      end: /\\*/\n    }, {\n      begin: /_(?!_)/,\n      end: /_/,\n      relevance: 0\n    }]\n  };\n  BOLD.contains.push(ITALIC);\n  ITALIC.contains.push(BOLD);\n  let CONTAINABLE = [INLINE_HTML, LINK];\n  BOLD.contains = BOLD.contains.concat(CONTAINABLE);\n  ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n  const HEADER = {\n    className: 'section',\n    variants: [{\n      begin: '^#{1,6}',\n      end: '$',\n      contains: CONTAINABLE\n    }, {\n      begin: '(?=^.+?\\\\n[=-]{2,}$)',\n      contains: [{\n        begin: '^[=-]*$'\n      }, {\n        begin: '^',\n        end: \"\\\\n\",\n        contains: CONTAINABLE\n      }]\n    }]\n  };\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n  return {\n    name: 'Markdown',\n    aliases: ['md', 'mkdown', 'mkd'],\n    contains: [HEADER, INLINE_HTML, LIST, BOLD, ITALIC, BLOCKQUOTE, CODE, HORIZONTAL_RULE, LINK, LINK_REFERENCE]\n  };\n}\n\nmodule.exports = markdown;","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/highlight.js/lib/languages/markdown.js"],"names":["source","re","concat","args","joined","map","x","join","markdown","hljs","INLINE_HTML","begin","end","subLanguage","relevance","HORIZONTAL_RULE","CODE","className","variants","contains","LIST","excludeEnd","LINK_REFERENCE","returnBegin","excludeBegin","URL_SCHEME","LINK","returnEnd","BOLD","ITALIC","push","CONTAINABLE","HEADER","BLOCKQUOTE","name","aliases","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/*\r\nLanguage: Markdown\r\nRequires: xml.js\r\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\r\nWebsite: https://daringfireball.net/projects/markdown/\r\nCategory: common, markup\r\n*/\r\n\r\nfunction markdown(hljs) {\r\n  const INLINE_HTML = {\r\n    begin: /<\\/?[A-Za-z_]/,\r\n    end: '>',\r\n    subLanguage: 'xml',\r\n    relevance: 0\r\n  };\r\n  const HORIZONTAL_RULE = {\r\n    begin: '^[-\\\\*]{3,}',\r\n    end: '$'\r\n  };\r\n  const CODE = {\r\n    className: 'code',\r\n    variants: [\r\n      // TODO: fix to allow these to work with sublanguage also\r\n      {\r\n        begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*'\r\n      },\r\n      {\r\n        begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*'\r\n      },\r\n      // needed to allow markdown as a sublanguage to work\r\n      {\r\n        begin: '```',\r\n        end: '```+[ ]*$'\r\n      },\r\n      {\r\n        begin: '~~~',\r\n        end: '~~~+[ ]*$'\r\n      },\r\n      {\r\n        begin: '`.+?`'\r\n      },\r\n      {\r\n        begin: '(?=^( {4}|\\\\t))',\r\n        // use contains to gobble up multiple lines to allow the block to be whatever size\r\n        // but only have a single open/close tag vs one per line\r\n        contains: [\r\n          {\r\n            begin: '^( {4}|\\\\t)',\r\n            end: '(\\\\n)$'\r\n          }\r\n        ],\r\n        relevance: 0\r\n      }\r\n    ]\r\n  };\r\n  const LIST = {\r\n    className: 'bullet',\r\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\r\n    end: '\\\\s+',\r\n    excludeEnd: true\r\n  };\r\n  const LINK_REFERENCE = {\r\n    begin: /^\\[[^\\n]+\\]:/,\r\n    returnBegin: true,\r\n    contains: [\r\n      {\r\n        className: 'symbol',\r\n        begin: /\\[/,\r\n        end: /\\]/,\r\n        excludeBegin: true,\r\n        excludeEnd: true\r\n      },\r\n      {\r\n        className: 'link',\r\n        begin: /:\\s*/,\r\n        end: /$/,\r\n        excludeBegin: true\r\n      }\r\n    ]\r\n  };\r\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\r\n  const LINK = {\r\n    variants: [\r\n      // too much like nested array access in so many languages\r\n      // to have any real relevance\r\n      {\r\n        begin: /\\[.+?\\]\\[.*?\\]/,\r\n        relevance: 0\r\n      },\r\n      // popular internet URLs\r\n      {\r\n        begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\r\n        relevance: 2\r\n      },\r\n      {\r\n        begin: concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\r\n        relevance: 2\r\n      },\r\n      // relative urls\r\n      {\r\n        begin: /\\[.+?\\]\\([./?&#].*?\\)/,\r\n        relevance: 1\r\n      },\r\n      // whatever else, lower relevance (might not be a link at all)\r\n      {\r\n        begin: /\\[.+?\\]\\(.*?\\)/,\r\n        relevance: 0\r\n      }\r\n    ],\r\n    returnBegin: true,\r\n    contains: [\r\n      {\r\n        className: 'string',\r\n        relevance: 0,\r\n        begin: '\\\\[',\r\n        end: '\\\\]',\r\n        excludeBegin: true,\r\n        returnEnd: true\r\n      },\r\n      {\r\n        className: 'link',\r\n        relevance: 0,\r\n        begin: '\\\\]\\\\(',\r\n        end: '\\\\)',\r\n        excludeBegin: true,\r\n        excludeEnd: true\r\n      },\r\n      {\r\n        className: 'symbol',\r\n        relevance: 0,\r\n        begin: '\\\\]\\\\[',\r\n        end: '\\\\]',\r\n        excludeBegin: true,\r\n        excludeEnd: true\r\n      }\r\n    ]\r\n  };\r\n  const BOLD = {\r\n    className: 'strong',\r\n    contains: [], // defined later\r\n    variants: [\r\n      {\r\n        begin: /_{2}/,\r\n        end: /_{2}/\r\n      },\r\n      {\r\n        begin: /\\*{2}/,\r\n        end: /\\*{2}/\r\n      }\r\n    ]\r\n  };\r\n  const ITALIC = {\r\n    className: 'emphasis',\r\n    contains: [], // defined later\r\n    variants: [\r\n      {\r\n        begin: /\\*(?!\\*)/,\r\n        end: /\\*/\r\n      },\r\n      {\r\n        begin: /_(?!_)/,\r\n        end: /_/,\r\n        relevance: 0\r\n      }\r\n    ]\r\n  };\r\n  BOLD.contains.push(ITALIC);\r\n  ITALIC.contains.push(BOLD);\r\n\r\n  let CONTAINABLE = [\r\n    INLINE_HTML,\r\n    LINK\r\n  ];\r\n\r\n  BOLD.contains = BOLD.contains.concat(CONTAINABLE);\r\n  ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);\r\n\r\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\r\n\r\n  const HEADER = {\r\n    className: 'section',\r\n    variants: [\r\n      {\r\n        begin: '^#{1,6}',\r\n        end: '$',\r\n        contains: CONTAINABLE\r\n      },\r\n      {\r\n        begin: '(?=^.+?\\\\n[=-]{2,}$)',\r\n        contains: [\r\n          {\r\n            begin: '^[=-]*$'\r\n          },\r\n          {\r\n            begin: '^',\r\n            end: \"\\\\n\",\r\n            contains: CONTAINABLE\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const BLOCKQUOTE = {\r\n    className: 'quote',\r\n    begin: '^>\\\\s+',\r\n    contains: CONTAINABLE,\r\n    end: '$'\r\n  };\r\n\r\n  return {\r\n    name: 'Markdown',\r\n    aliases: [\r\n      'md',\r\n      'mkdown',\r\n      'mkd'\r\n    ],\r\n    contains: [\r\n      HEADER,\r\n      INLINE_HTML,\r\n      LIST,\r\n      BOLD,\r\n      ITALIC,\r\n      BLOCKQUOTE,\r\n      CODE,\r\n      HORIZONTAL_RULE,\r\n      LINK,\r\n      LINK_REFERENCE\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = markdown;\r\n"]},"metadata":{},"sourceType":"script"}