{"ast":null,"code":"'use strict';\n\nvar mdast2hast = require('mdast-util-to-hast');\n\nmodule.exports = remark2rehype; // Attacher.\n// If a destination is given, runs the destination with the new hast tree\n// (bridge mode).\n// Without destination, returns the tree: further plugins run on that tree\n// (mutate mode).\n\nfunction remark2rehype(destination, options) {\n  if (destination && !destination.process) {\n    options = destination;\n    destination = null;\n  }\n\n  return destination ? bridge(destination, options) : mutate(options);\n} // Bridge mode.\n// Runs the destination with the new hast tree.\n\n\nfunction bridge(destination, options) {\n  return transformer;\n\n  function transformer(node, file, next) {\n    destination.run(mdast2hast(node, options), file, done);\n\n    function done(err) {\n      next(err);\n    }\n  }\n} // Mutate-mode.\n// Further transformers run on the hast tree.\n\n\nfunction mutate(options) {\n  return transformer;\n\n  function transformer(node) {\n    return mdast2hast(node, options);\n  }\n}","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/remark-rehype/index.js"],"names":["mdast2hast","require","module","exports","remark2rehype","destination","options","process","bridge","mutate","transformer","node","file","next","run","done","err"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,oBAAD,CAAxB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,aAAjB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,aAAT,CAAuBC,WAAvB,EAAoCC,OAApC,EAA6C;AAC3C,MAAID,WAAW,IAAI,CAACA,WAAW,CAACE,OAAhC,EAAyC;AACvCD,IAAAA,OAAO,GAAGD,WAAV;AACAA,IAAAA,WAAW,GAAG,IAAd;AACD;;AAED,SAAOA,WAAW,GAAGG,MAAM,CAACH,WAAD,EAAcC,OAAd,CAAT,GAAkCG,MAAM,CAACH,OAAD,CAA1D;AACD,C,CAED;AACA;;;AACA,SAASE,MAAT,CAAgBH,WAAhB,EAA6BC,OAA7B,EAAsC;AACpC,SAAOI,WAAP;;AAEA,WAASA,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,IAAjC,EAAuC;AACrCR,IAAAA,WAAW,CAACS,GAAZ,CAAgBd,UAAU,CAACW,IAAD,EAAOL,OAAP,CAA1B,EAA2CM,IAA3C,EAAiDG,IAAjD;;AAEA,aAASA,IAAT,CAAcC,GAAd,EAAmB;AACjBH,MAAAA,IAAI,CAACG,GAAD,CAAJ;AACD;AACF;AACF,C,CAED;AACA;;;AACA,SAASP,MAAT,CAAgBH,OAAhB,EAAyB;AACvB,SAAOI,WAAP;;AAEA,WAASA,WAAT,CAAqBC,IAArB,EAA2B;AACzB,WAAOX,UAAU,CAACW,IAAD,EAAOL,OAAP,CAAjB;AACD;AACF","sourcesContent":["'use strict'\r\n\r\nvar mdast2hast = require('mdast-util-to-hast')\r\n\r\nmodule.exports = remark2rehype\r\n\r\n// Attacher.\r\n// If a destination is given, runs the destination with the new hast tree\r\n// (bridge mode).\r\n// Without destination, returns the tree: further plugins run on that tree\r\n// (mutate mode).\r\nfunction remark2rehype(destination, options) {\r\n  if (destination && !destination.process) {\r\n    options = destination\r\n    destination = null\r\n  }\r\n\r\n  return destination ? bridge(destination, options) : mutate(options)\r\n}\r\n\r\n// Bridge mode.\r\n// Runs the destination with the new hast tree.\r\nfunction bridge(destination, options) {\r\n  return transformer\r\n\r\n  function transformer(node, file, next) {\r\n    destination.run(mdast2hast(node, options), file, done)\r\n\r\n    function done(err) {\r\n      next(err)\r\n    }\r\n  }\r\n}\r\n\r\n// Mutate-mode.\r\n// Further transformers run on the hast tree.\r\nfunction mutate(options) {\r\n  return transformer\r\n\r\n  function transformer(node) {\r\n    return mdast2hast(node, options)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}