{"ast":null,"code":"'use strict';\n\nvar whitespace = require('is-whitespace-character');\n\nvar locate = require('../locate/link');\n\nmodule.exports = link;\nlink.locator = locate;\nvar lineFeed = '\\n';\nvar exclamationMark = '!';\nvar quotationMark = '\"';\nvar apostrophe = \"'\";\nvar leftParenthesis = '(';\nvar rightParenthesis = ')';\nvar lessThan = '<';\nvar greaterThan = '>';\nvar leftSquareBracket = '[';\nvar backslash = '\\\\';\nvar rightSquareBracket = ']';\nvar graveAccent = '`';\n\nfunction link(eat, value, silent) {\n  var self = this;\n  var subvalue = '';\n  var index = 0;\n  var character = value.charAt(0);\n  var pedantic = self.options.pedantic;\n  var commonmark = self.options.commonmark;\n  var gfm = self.options.gfm;\n  var closed;\n  var count;\n  var opening;\n  var beforeURL;\n  var beforeTitle;\n  var subqueue;\n  var hasMarker;\n  var isImage;\n  var content;\n  var marker;\n  var length;\n  var title;\n  var depth;\n  var queue;\n  var url;\n  var now;\n  var exit;\n  var node; // Detect whether this is an image.\n\n  if (character === exclamationMark) {\n    isImage = true;\n    subvalue = character;\n    character = value.charAt(++index);\n  } // Eat the opening.\n\n\n  if (character !== leftSquareBracket) {\n    return;\n  } // Exit when this is a link and we’re already inside a link.\n\n\n  if (!isImage && self.inLink) {\n    return;\n  }\n\n  subvalue += character;\n  queue = '';\n  index++; // Eat the content.\n\n  length = value.length;\n  now = eat.now();\n  depth = 0;\n  now.column += index;\n  now.offset += index;\n\n  while (index < length) {\n    character = value.charAt(index);\n    subqueue = character;\n\n    if (character === graveAccent) {\n      // Inline-code in link content.\n      count = 1;\n\n      while (value.charAt(index + 1) === graveAccent) {\n        subqueue += character;\n        index++;\n        count++;\n      }\n\n      if (!opening) {\n        opening = count;\n      } else if (count >= opening) {\n        opening = 0;\n      }\n    } else if (character === backslash) {\n      // Allow brackets to be escaped.\n      index++;\n      subqueue += value.charAt(index);\n    } else if ((!opening || gfm) && character === leftSquareBracket) {\n      // In GFM mode, brackets in code still count.  In all other modes,\n      // they don’t.\n      depth++;\n    } else if ((!opening || gfm) && character === rightSquareBracket) {\n      if (depth) {\n        depth--;\n      } else {\n        if (value.charAt(index + 1) !== leftParenthesis) {\n          return;\n        }\n\n        subqueue += leftParenthesis;\n        closed = true;\n        index++;\n        break;\n      }\n    }\n\n    queue += subqueue;\n    subqueue = '';\n    index++;\n  } // Eat the content closing.\n\n\n  if (!closed) {\n    return;\n  }\n\n  content = queue;\n  subvalue += queue + subqueue;\n  index++; // Eat white-space.\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (!whitespace(character)) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  } // Eat the URL.\n\n\n  character = value.charAt(index);\n  queue = '';\n  beforeURL = subvalue;\n\n  if (character === lessThan) {\n    index++;\n    beforeURL += lessThan;\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (character === greaterThan) {\n        break;\n      }\n\n      if (commonmark && character === lineFeed) {\n        return;\n      }\n\n      queue += character;\n      index++;\n    }\n\n    if (value.charAt(index) !== greaterThan) {\n      return;\n    }\n\n    subvalue += lessThan + queue + greaterThan;\n    url = queue;\n    index++;\n  } else {\n    character = null;\n    subqueue = '';\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (subqueue && (character === quotationMark || character === apostrophe || commonmark && character === leftParenthesis)) {\n        break;\n      }\n\n      if (whitespace(character)) {\n        if (!pedantic) {\n          break;\n        }\n\n        subqueue += character;\n      } else {\n        if (character === leftParenthesis) {\n          depth++;\n        } else if (character === rightParenthesis) {\n          if (depth === 0) {\n            break;\n          }\n\n          depth--;\n        }\n\n        queue += subqueue;\n        subqueue = '';\n\n        if (character === backslash) {\n          queue += backslash;\n          character = value.charAt(++index);\n        }\n\n        queue += character;\n      }\n\n      index++;\n    }\n\n    subvalue += queue;\n    url = queue;\n    index = subvalue.length;\n  } // Eat white-space.\n\n\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (!whitespace(character)) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n  subvalue += queue; // Eat the title.\n\n  if (queue && (character === quotationMark || character === apostrophe || commonmark && character === leftParenthesis)) {\n    index++;\n    subvalue += character;\n    queue = '';\n    marker = character === leftParenthesis ? rightParenthesis : character;\n    beforeTitle = subvalue; // In commonmark-mode, things are pretty easy: the marker cannot occur\n    // inside the title.  Non-commonmark does, however, support nested\n    // delimiters.\n\n    if (commonmark) {\n      while (index < length) {\n        character = value.charAt(index);\n\n        if (character === marker) {\n          break;\n        }\n\n        if (character === backslash) {\n          queue += backslash;\n          character = value.charAt(++index);\n        }\n\n        index++;\n        queue += character;\n      }\n\n      character = value.charAt(index);\n\n      if (character !== marker) {\n        return;\n      }\n\n      title = queue;\n      subvalue += queue + character;\n      index++;\n\n      while (index < length) {\n        character = value.charAt(index);\n\n        if (!whitespace(character)) {\n          break;\n        }\n\n        subvalue += character;\n        index++;\n      }\n    } else {\n      subqueue = '';\n\n      while (index < length) {\n        character = value.charAt(index);\n\n        if (character === marker) {\n          if (hasMarker) {\n            queue += marker + subqueue;\n            subqueue = '';\n          }\n\n          hasMarker = true;\n        } else if (!hasMarker) {\n          queue += character;\n        } else if (character === rightParenthesis) {\n          subvalue += queue + marker + subqueue;\n          title = queue;\n          break;\n        } else if (whitespace(character)) {\n          subqueue += character;\n        } else {\n          queue += marker + subqueue + character;\n          subqueue = '';\n          hasMarker = false;\n        }\n\n        index++;\n      }\n    }\n  }\n\n  if (value.charAt(index) !== rightParenthesis) {\n    return;\n  }\n  /* istanbul ignore if - never used (yet) */\n\n\n  if (silent) {\n    return true;\n  }\n\n  subvalue += rightParenthesis;\n  url = self.decode.raw(self.unescape(url), eat(beforeURL).test().end, {\n    nonTerminated: false\n  });\n\n  if (title) {\n    beforeTitle = eat(beforeTitle).test().end;\n    title = self.decode.raw(self.unescape(title), beforeTitle);\n  }\n\n  node = {\n    type: isImage ? 'image' : 'link',\n    title: title || null,\n    url: url\n  };\n\n  if (isImage) {\n    node.alt = self.decode.raw(self.unescape(content), now) || null;\n  } else {\n    exit = self.enterLink();\n    node.children = self.tokenizeInline(content, now);\n    exit();\n  }\n\n  return eat(subvalue)(node);\n}","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/remark-parse/lib/tokenize/link.js"],"names":["whitespace","require","locate","module","exports","link","locator","lineFeed","exclamationMark","quotationMark","apostrophe","leftParenthesis","rightParenthesis","lessThan","greaterThan","leftSquareBracket","backslash","rightSquareBracket","graveAccent","eat","value","silent","self","subvalue","index","character","charAt","pedantic","options","commonmark","gfm","closed","count","opening","beforeURL","beforeTitle","subqueue","hasMarker","isImage","content","marker","length","title","depth","queue","url","now","exit","node","inLink","column","offset","decode","raw","unescape","test","end","nonTerminated","type","alt","enterLink","children","tokenizeInline"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nvar whitespace = require('is-whitespace-character')\r\nvar locate = require('../locate/link')\r\n\r\nmodule.exports = link\r\nlink.locator = locate\r\n\r\nvar lineFeed = '\\n'\r\nvar exclamationMark = '!'\r\nvar quotationMark = '\"'\r\nvar apostrophe = \"'\"\r\nvar leftParenthesis = '('\r\nvar rightParenthesis = ')'\r\nvar lessThan = '<'\r\nvar greaterThan = '>'\r\nvar leftSquareBracket = '['\r\nvar backslash = '\\\\'\r\nvar rightSquareBracket = ']'\r\nvar graveAccent = '`'\r\n\r\nfunction link(eat, value, silent) {\r\n  var self = this\r\n  var subvalue = ''\r\n  var index = 0\r\n  var character = value.charAt(0)\r\n  var pedantic = self.options.pedantic\r\n  var commonmark = self.options.commonmark\r\n  var gfm = self.options.gfm\r\n  var closed\r\n  var count\r\n  var opening\r\n  var beforeURL\r\n  var beforeTitle\r\n  var subqueue\r\n  var hasMarker\r\n  var isImage\r\n  var content\r\n  var marker\r\n  var length\r\n  var title\r\n  var depth\r\n  var queue\r\n  var url\r\n  var now\r\n  var exit\r\n  var node\r\n\r\n  // Detect whether this is an image.\r\n  if (character === exclamationMark) {\r\n    isImage = true\r\n    subvalue = character\r\n    character = value.charAt(++index)\r\n  }\r\n\r\n  // Eat the opening.\r\n  if (character !== leftSquareBracket) {\r\n    return\r\n  }\r\n\r\n  // Exit when this is a link and we’re already inside a link.\r\n  if (!isImage && self.inLink) {\r\n    return\r\n  }\r\n\r\n  subvalue += character\r\n  queue = ''\r\n  index++\r\n\r\n  // Eat the content.\r\n  length = value.length\r\n  now = eat.now()\r\n  depth = 0\r\n\r\n  now.column += index\r\n  now.offset += index\r\n\r\n  while (index < length) {\r\n    character = value.charAt(index)\r\n    subqueue = character\r\n\r\n    if (character === graveAccent) {\r\n      // Inline-code in link content.\r\n      count = 1\r\n\r\n      while (value.charAt(index + 1) === graveAccent) {\r\n        subqueue += character\r\n        index++\r\n        count++\r\n      }\r\n\r\n      if (!opening) {\r\n        opening = count\r\n      } else if (count >= opening) {\r\n        opening = 0\r\n      }\r\n    } else if (character === backslash) {\r\n      // Allow brackets to be escaped.\r\n      index++\r\n      subqueue += value.charAt(index)\r\n    } else if ((!opening || gfm) && character === leftSquareBracket) {\r\n      // In GFM mode, brackets in code still count.  In all other modes,\r\n      // they don’t.\r\n      depth++\r\n    } else if ((!opening || gfm) && character === rightSquareBracket) {\r\n      if (depth) {\r\n        depth--\r\n      } else {\r\n        if (value.charAt(index + 1) !== leftParenthesis) {\r\n          return\r\n        }\r\n\r\n        subqueue += leftParenthesis\r\n        closed = true\r\n        index++\r\n\r\n        break\r\n      }\r\n    }\r\n\r\n    queue += subqueue\r\n    subqueue = ''\r\n    index++\r\n  }\r\n\r\n  // Eat the content closing.\r\n  if (!closed) {\r\n    return\r\n  }\r\n\r\n  content = queue\r\n  subvalue += queue + subqueue\r\n  index++\r\n\r\n  // Eat white-space.\r\n  while (index < length) {\r\n    character = value.charAt(index)\r\n\r\n    if (!whitespace(character)) {\r\n      break\r\n    }\r\n\r\n    subvalue += character\r\n    index++\r\n  }\r\n\r\n  // Eat the URL.\r\n  character = value.charAt(index)\r\n  queue = ''\r\n  beforeURL = subvalue\r\n\r\n  if (character === lessThan) {\r\n    index++\r\n    beforeURL += lessThan\r\n\r\n    while (index < length) {\r\n      character = value.charAt(index)\r\n\r\n      if (character === greaterThan) {\r\n        break\r\n      }\r\n\r\n      if (commonmark && character === lineFeed) {\r\n        return\r\n      }\r\n\r\n      queue += character\r\n      index++\r\n    }\r\n\r\n    if (value.charAt(index) !== greaterThan) {\r\n      return\r\n    }\r\n\r\n    subvalue += lessThan + queue + greaterThan\r\n    url = queue\r\n    index++\r\n  } else {\r\n    character = null\r\n    subqueue = ''\r\n\r\n    while (index < length) {\r\n      character = value.charAt(index)\r\n\r\n      if (\r\n        subqueue &&\r\n        (character === quotationMark ||\r\n          character === apostrophe ||\r\n          (commonmark && character === leftParenthesis))\r\n      ) {\r\n        break\r\n      }\r\n\r\n      if (whitespace(character)) {\r\n        if (!pedantic) {\r\n          break\r\n        }\r\n\r\n        subqueue += character\r\n      } else {\r\n        if (character === leftParenthesis) {\r\n          depth++\r\n        } else if (character === rightParenthesis) {\r\n          if (depth === 0) {\r\n            break\r\n          }\r\n\r\n          depth--\r\n        }\r\n\r\n        queue += subqueue\r\n        subqueue = ''\r\n\r\n        if (character === backslash) {\r\n          queue += backslash\r\n          character = value.charAt(++index)\r\n        }\r\n\r\n        queue += character\r\n      }\r\n\r\n      index++\r\n    }\r\n\r\n    subvalue += queue\r\n    url = queue\r\n    index = subvalue.length\r\n  }\r\n\r\n  // Eat white-space.\r\n  queue = ''\r\n\r\n  while (index < length) {\r\n    character = value.charAt(index)\r\n\r\n    if (!whitespace(character)) {\r\n      break\r\n    }\r\n\r\n    queue += character\r\n    index++\r\n  }\r\n\r\n  character = value.charAt(index)\r\n  subvalue += queue\r\n\r\n  // Eat the title.\r\n  if (\r\n    queue &&\r\n    (character === quotationMark ||\r\n      character === apostrophe ||\r\n      (commonmark && character === leftParenthesis))\r\n  ) {\r\n    index++\r\n    subvalue += character\r\n    queue = ''\r\n    marker = character === leftParenthesis ? rightParenthesis : character\r\n    beforeTitle = subvalue\r\n\r\n    // In commonmark-mode, things are pretty easy: the marker cannot occur\r\n    // inside the title.  Non-commonmark does, however, support nested\r\n    // delimiters.\r\n    if (commonmark) {\r\n      while (index < length) {\r\n        character = value.charAt(index)\r\n\r\n        if (character === marker) {\r\n          break\r\n        }\r\n\r\n        if (character === backslash) {\r\n          queue += backslash\r\n          character = value.charAt(++index)\r\n        }\r\n\r\n        index++\r\n        queue += character\r\n      }\r\n\r\n      character = value.charAt(index)\r\n\r\n      if (character !== marker) {\r\n        return\r\n      }\r\n\r\n      title = queue\r\n      subvalue += queue + character\r\n      index++\r\n\r\n      while (index < length) {\r\n        character = value.charAt(index)\r\n\r\n        if (!whitespace(character)) {\r\n          break\r\n        }\r\n\r\n        subvalue += character\r\n        index++\r\n      }\r\n    } else {\r\n      subqueue = ''\r\n\r\n      while (index < length) {\r\n        character = value.charAt(index)\r\n\r\n        if (character === marker) {\r\n          if (hasMarker) {\r\n            queue += marker + subqueue\r\n            subqueue = ''\r\n          }\r\n\r\n          hasMarker = true\r\n        } else if (!hasMarker) {\r\n          queue += character\r\n        } else if (character === rightParenthesis) {\r\n          subvalue += queue + marker + subqueue\r\n          title = queue\r\n          break\r\n        } else if (whitespace(character)) {\r\n          subqueue += character\r\n        } else {\r\n          queue += marker + subqueue + character\r\n          subqueue = ''\r\n          hasMarker = false\r\n        }\r\n\r\n        index++\r\n      }\r\n    }\r\n  }\r\n\r\n  if (value.charAt(index) !== rightParenthesis) {\r\n    return\r\n  }\r\n\r\n  /* istanbul ignore if - never used (yet) */\r\n  if (silent) {\r\n    return true\r\n  }\r\n\r\n  subvalue += rightParenthesis\r\n\r\n  url = self.decode.raw(self.unescape(url), eat(beforeURL).test().end, {\r\n    nonTerminated: false\r\n  })\r\n\r\n  if (title) {\r\n    beforeTitle = eat(beforeTitle).test().end\r\n    title = self.decode.raw(self.unescape(title), beforeTitle)\r\n  }\r\n\r\n  node = {\r\n    type: isImage ? 'image' : 'link',\r\n    title: title || null,\r\n    url: url\r\n  }\r\n\r\n  if (isImage) {\r\n    node.alt = self.decode.raw(self.unescape(content), now) || null\r\n  } else {\r\n    exit = self.enterLink()\r\n    node.children = self.tokenizeInline(content, now)\r\n    exit()\r\n  }\r\n\r\n  return eat(subvalue)(node)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}