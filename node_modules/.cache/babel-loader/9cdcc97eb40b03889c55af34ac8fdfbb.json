{"ast":null,"code":"'use strict';\n\nvar decode = require('parse-entities');\n\nvar decimal = require('is-decimal');\n\nvar alphabetical = require('is-alphabetical');\n\nvar locate = require('../locate/email');\n\nmodule.exports = email;\nemail.locator = locate;\nemail.notInLink = true;\nvar plusSign = 43; // '+'\n\nvar dash = 45; // '-'\n\nvar dot = 46; // '.'\n\nvar atSign = 64; // '@'\n\nvar underscore = 95; // '_'\n\nfunction email(eat, value, silent) {\n  var self = this;\n  var gfm = self.options.gfm;\n  var tokenizers = self.inlineTokenizers;\n  var index = 0;\n  var length = value.length;\n  var firstDot = -1;\n  var code;\n  var content;\n  var children;\n  var exit;\n\n  if (!gfm) {\n    return;\n  }\n\n  code = value.charCodeAt(index);\n\n  while (decimal(code) || alphabetical(code) || code === plusSign || code === dash || code === dot || code === underscore) {\n    code = value.charCodeAt(++index);\n  }\n\n  if (index === 0) {\n    return;\n  }\n\n  if (code !== atSign) {\n    return;\n  }\n\n  index++;\n\n  while (index < length) {\n    code = value.charCodeAt(index);\n\n    if (decimal(code) || alphabetical(code) || code === dash || code === dot || code === underscore) {\n      index++;\n\n      if (firstDot === -1 && code === dot) {\n        firstDot = index;\n      }\n\n      continue;\n    }\n\n    break;\n  }\n\n  if (firstDot === -1 || firstDot === index || code === dash || code === underscore) {\n    return;\n  }\n\n  if (code === dot) {\n    index--;\n  }\n\n  content = value.slice(0, index);\n  /* istanbul ignore if - never used (yet) */\n\n  if (silent) {\n    return true;\n  }\n\n  exit = self.enterLink(); // Temporarily remove all tokenizers except text in url.\n\n  self.inlineTokenizers = {\n    text: tokenizers.text\n  };\n  children = self.tokenizeInline(content, eat.now());\n  self.inlineTokenizers = tokenizers;\n  exit();\n  return eat(content)({\n    type: 'link',\n    title: null,\n    url: 'mailto:' + decode(content, {\n      nonTerminated: false\n    }),\n    children: children\n  });\n}","map":{"version":3,"sources":["E:/Monirul AWS/PorzotokFrontend/node_modules/remark-parse/lib/tokenize/email.js"],"names":["decode","require","decimal","alphabetical","locate","module","exports","email","locator","notInLink","plusSign","dash","dot","atSign","underscore","eat","value","silent","self","gfm","options","tokenizers","inlineTokenizers","index","length","firstDot","code","content","children","exit","charCodeAt","slice","enterLink","text","tokenizeInline","now","type","title","url","nonTerminated"],"mappings":"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","sourcesContent":["'use strict'\n\nvar decode = require('parse-entities')\nvar decimal = require('is-decimal')\nvar alphabetical = require('is-alphabetical')\nvar locate = require('../locate/email')\n\nmodule.exports = email\nemail.locator = locate\nemail.notInLink = true\n\nvar plusSign = 43 // '+'\nvar dash = 45 // '-'\nvar dot = 46 // '.'\nvar atSign = 64 // '@'\nvar underscore = 95 // '_'\n\nfunction email(eat, value, silent) {\n  var self = this\n  var gfm = self.options.gfm\n  var tokenizers = self.inlineTokenizers\n  var index = 0\n  var length = value.length\n  var firstDot = -1\n  var code\n  var content\n  var children\n  var exit\n\n  if (!gfm) {\n    return\n  }\n\n  code = value.charCodeAt(index)\n\n  while (\n    decimal(code) ||\n    alphabetical(code) ||\n    code === plusSign ||\n    code === dash ||\n    code === dot ||\n    code === underscore\n  ) {\n    code = value.charCodeAt(++index)\n  }\n\n  if (index === 0) {\n    return\n  }\n\n  if (code !== atSign) {\n    return\n  }\n\n  index++\n\n  while (index < length) {\n    code = value.charCodeAt(index)\n\n    if (\n      decimal(code) ||\n      alphabetical(code) ||\n      code === dash ||\n      code === dot ||\n      code === underscore\n    ) {\n      index++\n\n      if (firstDot === -1 && code === dot) {\n        firstDot = index\n      }\n\n      continue\n    }\n\n    break\n  }\n\n  if (\n    firstDot === -1 ||\n    firstDot === index ||\n    code === dash ||\n    code === underscore\n  ) {\n    return\n  }\n\n  if (code === dot) {\n    index--\n  }\n\n  content = value.slice(0, index)\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true\n  }\n\n  exit = self.enterLink()\n\n  // Temporarily remove all tokenizers except text in url.\n  self.inlineTokenizers = {text: tokenizers.text}\n  children = self.tokenizeInline(content, eat.now())\n  self.inlineTokenizers = tokenizers\n\n  exit()\n\n  return eat(content)({\n    type: 'link',\n    title: null,\n    url: 'mailto:' + decode(content, {nonTerminated: false}),\n    children: children\n  })\n}\n"]},"metadata":{},"sourceType":"script"}