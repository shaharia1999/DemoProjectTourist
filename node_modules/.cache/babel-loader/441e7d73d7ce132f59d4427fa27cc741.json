{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = Column;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n/* eslint-disable react/no-unused-prop-types */\n\n/**\r\n * A column is a vertical element of a table that contains data.\r\n * The Column component is an abstraction that allows us to represent data of the same data type.\r\n * Both components (Table and Column) are related and should be implemented together.\r\n * @category DataView\r\n */\n\n\nfunction Column() {\n  return /*#__PURE__*/_react[\"default\"].createElement(\"div\", null);\n}\n\nColumn.propTypes = {\n  /**\r\n   * The header of the column. It could be just a `String` with text or a component with a desired content.\r\n   */\n  header: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].node, _propTypes[\"default\"].string]),\n\n  /**\r\n   * The alignment of the text of the column header\r\n   */\n  headerAlignment: _propTypes[\"default\"].oneOf(['left', 'center', 'right']),\n\n  /**\r\n   * The component class or function that is going to be use to render\r\n   * the content of each cell on this column. By default the cell is\r\n   * going to render the computed value(`data[rowIndex][field]`) for each cell.\r\n   */\n  component: _propTypes[\"default\"].func,\n\n  /**\r\n   * The field value is used to compute/map the value is going to be render\r\n   * for each cell. It's the name of a property in the data objects.\r\n   *\r\n   * e.g `data = [{ name: 'Max', ... }, {...}]`;\r\n   * field could be 'name' for a column that wants to represent names on a collection of people.\r\n   */\n  field: _propTypes[\"default\"].string,\n\n  /**\r\n   * Sets whether the column should control the sorting order of the data.\r\n   * @ignore\r\n   */\n  sortable: _propTypes[\"default\"].bool,\n\n  /** Specifies the width of a column in pixels and make the column non-resizable.\r\n   *\r\n   * e.g  `width={100}` */\n  width: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** Specifies the initial width of a column in pixels and allows the column to be resizable.\r\n   * It must be within the minColumnWidth and maxColumnWidth values passed to Table.\r\n   *\r\n   * e.g  `defaultWidth={100}`\r\n   */\n  defaultWidth: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** The data type to be used for data formatting in cell. */\n  type: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].oneOf(['text', 'action'])]),\n\n  /** A boolean that specifies whether a column is editable or not. Its default value is false.  */\n  isEditable: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].bool, _propTypes[\"default\"].func]),\n\n  /** The action triggered when a value attribute changes. */\n  onChange: _propTypes[\"default\"].func,\n\n  /** Determines the alignment of the text in each column cell.\r\n   * Available options are: left, right, center.\r\n   * This value defaults to `left` when the Table uses the `default` variant and defaults to `center` when uses the `listview` variant.\r\n   */\n  cellAlignment: _propTypes[\"default\"].oneOf(['left', 'right', 'center'])\n};\nColumn.defaultProps = {\n  header: undefined,\n  headerAlignment: undefined,\n  component: undefined,\n  field: undefined,\n  sortable: false,\n  width: undefined,\n  defaultWidth: undefined,\n  type: 'text',\n  isEditable: false,\n  onChange: function onChange() {},\n  cellAlignment: undefined\n};","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/react-rainbow-components/components/Column/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","Column","_react","_propTypes","createElement","propTypes","header","oneOfType","node","string","headerAlignment","oneOf","component","func","field","sortable","bool","width","number","defaultWidth","type","isEditable","onChange","cellAlignment","defaultProps","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports[\"default\"] = Column;\r\n\r\nvar _react = _interopRequireDefault(require(\"react\"));\r\n\r\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\r\n\r\n/* eslint-disable react/no-unused-prop-types */\r\n\r\n/**\r\n * A column is a vertical element of a table that contains data.\r\n * The Column component is an abstraction that allows us to represent data of the same data type.\r\n * Both components (Table and Column) are related and should be implemented together.\r\n * @category DataView\r\n */\r\nfunction Column() {\r\n  return /*#__PURE__*/_react[\"default\"].createElement(\"div\", null);\r\n}\r\n\r\nColumn.propTypes = {\r\n  /**\r\n   * The header of the column. It could be just a `String` with text or a component with a desired content.\r\n   */\r\n  header: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].node, _propTypes[\"default\"].string]),\r\n\r\n  /**\r\n   * The alignment of the text of the column header\r\n   */\r\n  headerAlignment: _propTypes[\"default\"].oneOf(['left', 'center', 'right']),\r\n\r\n  /**\r\n   * The component class or function that is going to be use to render\r\n   * the content of each cell on this column. By default the cell is\r\n   * going to render the computed value(`data[rowIndex][field]`) for each cell.\r\n   */\r\n  component: _propTypes[\"default\"].func,\r\n\r\n  /**\r\n   * The field value is used to compute/map the value is going to be render\r\n   * for each cell. It's the name of a property in the data objects.\r\n   *\r\n   * e.g `data = [{ name: 'Max', ... }, {...}]`;\r\n   * field could be 'name' for a column that wants to represent names on a collection of people.\r\n   */\r\n  field: _propTypes[\"default\"].string,\r\n\r\n  /**\r\n   * Sets whether the column should control the sorting order of the data.\r\n   * @ignore\r\n   */\r\n  sortable: _propTypes[\"default\"].bool,\r\n\r\n  /** Specifies the width of a column in pixels and make the column non-resizable.\r\n   *\r\n   * e.g  `width={100}` */\r\n  width: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\r\n\r\n  /** Specifies the initial width of a column in pixels and allows the column to be resizable.\r\n   * It must be within the minColumnWidth and maxColumnWidth values passed to Table.\r\n   *\r\n   * e.g  `defaultWidth={100}`\r\n   */\r\n  defaultWidth: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\r\n\r\n  /** The data type to be used for data formatting in cell. */\r\n  type: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].oneOf(['text', 'action'])]),\r\n\r\n  /** A boolean that specifies whether a column is editable or not. Its default value is false.  */\r\n  isEditable: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].bool, _propTypes[\"default\"].func]),\r\n\r\n  /** The action triggered when a value attribute changes. */\r\n  onChange: _propTypes[\"default\"].func,\r\n\r\n  /** Determines the alignment of the text in each column cell.\r\n   * Available options are: left, right, center.\r\n   * This value defaults to `left` when the Table uses the `default` variant and defaults to `center` when uses the `listview` variant.\r\n   */\r\n  cellAlignment: _propTypes[\"default\"].oneOf(['left', 'right', 'center'])\r\n};\r\nColumn.defaultProps = {\r\n  header: undefined,\r\n  headerAlignment: undefined,\r\n  component: undefined,\r\n  field: undefined,\r\n  sortable: false,\r\n  width: undefined,\r\n  defaultWidth: undefined,\r\n  type: 'text',\r\n  isEditable: false,\r\n  onChange: function onChange() {},\r\n  cellAlignment: undefined\r\n};"]},"metadata":{},"sourceType":"script"}