{"ast":null,"code":"/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\n\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\n\n\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\n\n\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/*\r\nLanguage: Python\r\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\r\nWebsite: https://www.python.org\r\nCategory: common\r\n*/\n\n\nfunction python(hljs) {\n  const RESERVED_WORDS = ['and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal|10', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'];\n  const BUILT_INS = ['__import__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip'];\n  const LITERALS = ['__debug__', 'Ellipsis', 'False', 'None', 'NotImplemented', 'True']; // https://docs.python.org/3/library/typing.html\n  // TODO: Could these be supplemented by a CamelCase matcher in certain\n  // contexts, leaving these remaining only for relevance hinting?\n\n  const TYPES = [\"Any\", \"Callable\", \"Coroutine\", \"Dict\", \"List\", \"Literal\", \"Generic\", \"Optional\", \"Sequence\", \"Set\", \"Tuple\", \"Type\", \"Union\"];\n  const KEYWORDS = {\n    $pattern: /[A-Za-z]\\w+|__\\w+__/,\n    keyword: RESERVED_WORDS,\n    built_in: BUILT_INS,\n    literal: LITERALS,\n    type: TYPES\n  };\n  const PROMPT = {\n    className: 'meta',\n    begin: /^(>>>|\\.\\.\\.) /\n  };\n  const SUBST = {\n    className: 'subst',\n    begin: /\\{/,\n    end: /\\}/,\n    keywords: KEYWORDS,\n    illegal: /#/\n  };\n  const LITERAL_BRACKET = {\n    begin: /\\{\\{/,\n    relevance: 0\n  };\n  const STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [{\n      begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\n      end: /'''/,\n      contains: [hljs.BACKSLASH_ESCAPE, PROMPT],\n      relevance: 10\n    }, {\n      begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\n      end: /\"\"\"/,\n      contains: [hljs.BACKSLASH_ESCAPE, PROMPT],\n      relevance: 10\n    }, {\n      begin: /([fF][rR]|[rR][fF]|[fF])'''/,\n      end: /'''/,\n      contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]\n    }, {\n      begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\n      end: /\"\"\"/,\n      contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]\n    }, {\n      begin: /([uU]|[rR])'/,\n      end: /'/,\n      relevance: 10\n    }, {\n      begin: /([uU]|[rR])\"/,\n      end: /\"/,\n      relevance: 10\n    }, {\n      begin: /([bB]|[bB][rR]|[rR][bB])'/,\n      end: /'/\n    }, {\n      begin: /([bB]|[bB][rR]|[rR][bB])\"/,\n      end: /\"/\n    }, {\n      begin: /([fF][rR]|[rR][fF]|[fF])'/,\n      end: /'/,\n      contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]\n    }, {\n      begin: /([fF][rR]|[rR][fF]|[fF])\"/,\n      end: /\"/,\n      contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]\n    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE]\n  }; // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\n\n  const digitpart = '[0-9](_?[0-9])*';\n  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [// exponentfloat, pointfloat\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\n    // optionally imaginary\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n    // Note: no leading \\b because floats can start with a decimal point\n    // and we don't want to mishandle e.g. `fn(.5)`,\n    // no trailing \\b for pointfloat because it can end with a decimal point\n    // and we don't want to mishandle e.g. `0..hex()`; this should be safe\n    // because both MUST contain a decimal point and so cannot be confused with\n    // the interior part of an identifier\n    {\n      begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?\\\\b`\n    }, {\n      begin: `(${pointfloat})[jJ]?`\n    }, // decinteger, bininteger, octinteger, hexinteger\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\n    // optionally \"long\" in Python 2\n    // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\n    // decinteger is optionally imaginary\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n    {\n      begin: '\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\\\b'\n    }, {\n      begin: '\\\\b0[bB](_?[01])+[lL]?\\\\b'\n    }, {\n      begin: '\\\\b0[oO](_?[0-7])+[lL]?\\\\b'\n    }, {\n      begin: '\\\\b0[xX](_?[0-9a-fA-F])+[lL]?\\\\b'\n    }, // imagnumber (digitpart-based)\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n    {\n      begin: `\\\\b(${digitpart})[jJ]\\\\b`\n    }]\n  };\n  const COMMENT_TYPE = {\n    className: \"comment\",\n    begin: lookahead(/# type:/),\n    end: /$/,\n    keywords: KEYWORDS,\n    contains: [{\n      // prevent keywords from coloring `type`\n      begin: /# type:/\n    }, // comment within a datatype comment includes no keywords\n    {\n      begin: /#/,\n      end: /\\b\\B/,\n      endsWithParent: true\n    }]\n  };\n  const PARAMS = {\n    className: 'params',\n    variants: [// Exclude params in functions without params\n    {\n      className: \"\",\n      begin: /\\(\\s*\\)/,\n      skip: true\n    }, {\n      begin: /\\(/,\n      end: /\\)/,\n      excludeBegin: true,\n      excludeEnd: true,\n      keywords: KEYWORDS,\n      contains: ['self', PROMPT, NUMBER, STRING, hljs.HASH_COMMENT_MODE]\n    }]\n  };\n  SUBST.contains = [STRING, NUMBER, PROMPT];\n  return {\n    name: 'Python',\n    aliases: ['py', 'gyp', 'ipython'],\n    keywords: KEYWORDS,\n    illegal: /(<\\/|->|\\?)|=>/,\n    contains: [PROMPT, NUMBER, {\n      // very common convention\n      begin: /\\bself\\b/\n    }, {\n      // eat \"if\" prior to string so that it won't accidentally be\n      // labeled as an f-string\n      beginKeywords: \"if\",\n      relevance: 0\n    }, STRING, COMMENT_TYPE, hljs.HASH_COMMENT_MODE, {\n      variants: [{\n        className: 'function',\n        beginKeywords: 'def'\n      }, {\n        className: 'class',\n        beginKeywords: 'class'\n      }],\n      end: /:/,\n      illegal: /[${=;\\n,]/,\n      contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS, {\n        begin: /->/,\n        endsWithParent: true,\n        keywords: KEYWORDS\n      }]\n    }, {\n      className: 'meta',\n      begin: /^[\\t ]*@/,\n      end: /(?=#)|$/,\n      contains: [NUMBER, PARAMS, STRING]\n    }]\n  };\n}\n\nmodule.exports = python;","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/highlight.js/lib/languages/python.js"],"names":["source","re","lookahead","concat","args","joined","map","x","join","python","hljs","RESERVED_WORDS","BUILT_INS","LITERALS","TYPES","KEYWORDS","$pattern","keyword","built_in","literal","type","PROMPT","className","begin","SUBST","end","keywords","illegal","LITERAL_BRACKET","relevance","STRING","contains","BACKSLASH_ESCAPE","variants","APOS_STRING_MODE","QUOTE_STRING_MODE","digitpart","pointfloat","NUMBER","COMMENT_TYPE","endsWithParent","PARAMS","skip","excludeBegin","excludeEnd","HASH_COMMENT_MODE","name","aliases","beginKeywords","UNDERSCORE_TITLE_MODE","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction lookahead(re) {\r\n  return concat('(?=', re, ')');\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/*\r\nLanguage: Python\r\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\r\nWebsite: https://www.python.org\r\nCategory: common\r\n*/\r\n\r\nfunction python(hljs) {\r\n  const RESERVED_WORDS = [\r\n    'and',\r\n    'as',\r\n    'assert',\r\n    'async',\r\n    'await',\r\n    'break',\r\n    'class',\r\n    'continue',\r\n    'def',\r\n    'del',\r\n    'elif',\r\n    'else',\r\n    'except',\r\n    'finally',\r\n    'for',\r\n    'from',\r\n    'global',\r\n    'if',\r\n    'import',\r\n    'in',\r\n    'is',\r\n    'lambda',\r\n    'nonlocal|10',\r\n    'not',\r\n    'or',\r\n    'pass',\r\n    'raise',\r\n    'return',\r\n    'try',\r\n    'while',\r\n    'with',\r\n    'yield'\r\n  ];\r\n\r\n  const BUILT_INS = [\r\n    '__import__',\r\n    'abs',\r\n    'all',\r\n    'any',\r\n    'ascii',\r\n    'bin',\r\n    'bool',\r\n    'breakpoint',\r\n    'bytearray',\r\n    'bytes',\r\n    'callable',\r\n    'chr',\r\n    'classmethod',\r\n    'compile',\r\n    'complex',\r\n    'delattr',\r\n    'dict',\r\n    'dir',\r\n    'divmod',\r\n    'enumerate',\r\n    'eval',\r\n    'exec',\r\n    'filter',\r\n    'float',\r\n    'format',\r\n    'frozenset',\r\n    'getattr',\r\n    'globals',\r\n    'hasattr',\r\n    'hash',\r\n    'help',\r\n    'hex',\r\n    'id',\r\n    'input',\r\n    'int',\r\n    'isinstance',\r\n    'issubclass',\r\n    'iter',\r\n    'len',\r\n    'list',\r\n    'locals',\r\n    'map',\r\n    'max',\r\n    'memoryview',\r\n    'min',\r\n    'next',\r\n    'object',\r\n    'oct',\r\n    'open',\r\n    'ord',\r\n    'pow',\r\n    'print',\r\n    'property',\r\n    'range',\r\n    'repr',\r\n    'reversed',\r\n    'round',\r\n    'set',\r\n    'setattr',\r\n    'slice',\r\n    'sorted',\r\n    'staticmethod',\r\n    'str',\r\n    'sum',\r\n    'super',\r\n    'tuple',\r\n    'type',\r\n    'vars',\r\n    'zip'\r\n  ];\r\n\r\n  const LITERALS = [\r\n    '__debug__',\r\n    'Ellipsis',\r\n    'False',\r\n    'None',\r\n    'NotImplemented',\r\n    'True'\r\n  ];\r\n\r\n  // https://docs.python.org/3/library/typing.html\r\n  // TODO: Could these be supplemented by a CamelCase matcher in certain\r\n  // contexts, leaving these remaining only for relevance hinting?\r\n  const TYPES = [\r\n    \"Any\",\r\n    \"Callable\",\r\n    \"Coroutine\",\r\n    \"Dict\",\r\n    \"List\",\r\n    \"Literal\",\r\n    \"Generic\",\r\n    \"Optional\",\r\n    \"Sequence\",\r\n    \"Set\",\r\n    \"Tuple\",\r\n    \"Type\",\r\n    \"Union\"\r\n  ];\r\n\r\n  const KEYWORDS = {\r\n    $pattern: /[A-Za-z]\\w+|__\\w+__/,\r\n    keyword: RESERVED_WORDS,\r\n    built_in: BUILT_INS,\r\n    literal: LITERALS,\r\n    type: TYPES\r\n  };\r\n\r\n  const PROMPT = {\r\n    className: 'meta',\r\n    begin: /^(>>>|\\.\\.\\.) /\r\n  };\r\n\r\n  const SUBST = {\r\n    className: 'subst',\r\n    begin: /\\{/,\r\n    end: /\\}/,\r\n    keywords: KEYWORDS,\r\n    illegal: /#/\r\n  };\r\n\r\n  const LITERAL_BRACKET = {\r\n    begin: /\\{\\{/,\r\n    relevance: 0\r\n  };\r\n\r\n  const STRING = {\r\n    className: 'string',\r\n    contains: [ hljs.BACKSLASH_ESCAPE ],\r\n    variants: [\r\n      {\r\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\r\n        end: /'''/,\r\n        contains: [\r\n          hljs.BACKSLASH_ESCAPE,\r\n          PROMPT\r\n        ],\r\n        relevance: 10\r\n      },\r\n      {\r\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\r\n        end: /\"\"\"/,\r\n        contains: [\r\n          hljs.BACKSLASH_ESCAPE,\r\n          PROMPT\r\n        ],\r\n        relevance: 10\r\n      },\r\n      {\r\n        begin: /([fF][rR]|[rR][fF]|[fF])'''/,\r\n        end: /'''/,\r\n        contains: [\r\n          hljs.BACKSLASH_ESCAPE,\r\n          PROMPT,\r\n          LITERAL_BRACKET,\r\n          SUBST\r\n        ]\r\n      },\r\n      {\r\n        begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\r\n        end: /\"\"\"/,\r\n        contains: [\r\n          hljs.BACKSLASH_ESCAPE,\r\n          PROMPT,\r\n          LITERAL_BRACKET,\r\n          SUBST\r\n        ]\r\n      },\r\n      {\r\n        begin: /([uU]|[rR])'/,\r\n        end: /'/,\r\n        relevance: 10\r\n      },\r\n      {\r\n        begin: /([uU]|[rR])\"/,\r\n        end: /\"/,\r\n        relevance: 10\r\n      },\r\n      {\r\n        begin: /([bB]|[bB][rR]|[rR][bB])'/,\r\n        end: /'/\r\n      },\r\n      {\r\n        begin: /([bB]|[bB][rR]|[rR][bB])\"/,\r\n        end: /\"/\r\n      },\r\n      {\r\n        begin: /([fF][rR]|[rR][fF]|[fF])'/,\r\n        end: /'/,\r\n        contains: [\r\n          hljs.BACKSLASH_ESCAPE,\r\n          LITERAL_BRACKET,\r\n          SUBST\r\n        ]\r\n      },\r\n      {\r\n        begin: /([fF][rR]|[rR][fF]|[fF])\"/,\r\n        end: /\"/,\r\n        contains: [\r\n          hljs.BACKSLASH_ESCAPE,\r\n          LITERAL_BRACKET,\r\n          SUBST\r\n        ]\r\n      },\r\n      hljs.APOS_STRING_MODE,\r\n      hljs.QUOTE_STRING_MODE\r\n    ]\r\n  };\r\n\r\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\r\n  const digitpart = '[0-9](_?[0-9])*';\r\n  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;\r\n  const NUMBER = {\r\n    className: 'number',\r\n    relevance: 0,\r\n    variants: [\r\n      // exponentfloat, pointfloat\r\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\r\n      // optionally imaginary\r\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\r\n      // Note: no leading \\b because floats can start with a decimal point\r\n      // and we don't want to mishandle e.g. `fn(.5)`,\r\n      // no trailing \\b for pointfloat because it can end with a decimal point\r\n      // and we don't want to mishandle e.g. `0..hex()`; this should be safe\r\n      // because both MUST contain a decimal point and so cannot be confused with\r\n      // the interior part of an identifier\r\n      {\r\n        begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?\\\\b`\r\n      },\r\n      {\r\n        begin: `(${pointfloat})[jJ]?`\r\n      },\r\n\r\n      // decinteger, bininteger, octinteger, hexinteger\r\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\r\n      // optionally \"long\" in Python 2\r\n      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\r\n      // decinteger is optionally imaginary\r\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\r\n      {\r\n        begin: '\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\\\b'\r\n      },\r\n      {\r\n        begin: '\\\\b0[bB](_?[01])+[lL]?\\\\b'\r\n      },\r\n      {\r\n        begin: '\\\\b0[oO](_?[0-7])+[lL]?\\\\b'\r\n      },\r\n      {\r\n        begin: '\\\\b0[xX](_?[0-9a-fA-F])+[lL]?\\\\b'\r\n      },\r\n\r\n      // imagnumber (digitpart-based)\r\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\r\n      {\r\n        begin: `\\\\b(${digitpart})[jJ]\\\\b`\r\n      }\r\n    ]\r\n  };\r\n  const COMMENT_TYPE = {\r\n    className: \"comment\",\r\n    begin: lookahead(/# type:/),\r\n    end: /$/,\r\n    keywords: KEYWORDS,\r\n    contains: [\r\n      { // prevent keywords from coloring `type`\r\n        begin: /# type:/\r\n      },\r\n      // comment within a datatype comment includes no keywords\r\n      {\r\n        begin: /#/,\r\n        end: /\\b\\B/,\r\n        endsWithParent: true\r\n      }\r\n    ]\r\n  };\r\n  const PARAMS = {\r\n    className: 'params',\r\n    variants: [\r\n      // Exclude params in functions without params\r\n      {\r\n        className: \"\",\r\n        begin: /\\(\\s*\\)/,\r\n        skip: true\r\n      },\r\n      {\r\n        begin: /\\(/,\r\n        end: /\\)/,\r\n        excludeBegin: true,\r\n        excludeEnd: true,\r\n        keywords: KEYWORDS,\r\n        contains: [\r\n          'self',\r\n          PROMPT,\r\n          NUMBER,\r\n          STRING,\r\n          hljs.HASH_COMMENT_MODE\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n  SUBST.contains = [\r\n    STRING,\r\n    NUMBER,\r\n    PROMPT\r\n  ];\r\n\r\n  return {\r\n    name: 'Python',\r\n    aliases: [\r\n      'py',\r\n      'gyp',\r\n      'ipython'\r\n    ],\r\n    keywords: KEYWORDS,\r\n    illegal: /(<\\/|->|\\?)|=>/,\r\n    contains: [\r\n      PROMPT,\r\n      NUMBER,\r\n      {\r\n        // very common convention\r\n        begin: /\\bself\\b/\r\n      },\r\n      {\r\n        // eat \"if\" prior to string so that it won't accidentally be\r\n        // labeled as an f-string\r\n        beginKeywords: \"if\",\r\n        relevance: 0\r\n      },\r\n      STRING,\r\n      COMMENT_TYPE,\r\n      hljs.HASH_COMMENT_MODE,\r\n      {\r\n        variants: [\r\n          {\r\n            className: 'function',\r\n            beginKeywords: 'def'\r\n          },\r\n          {\r\n            className: 'class',\r\n            beginKeywords: 'class'\r\n          }\r\n        ],\r\n        end: /:/,\r\n        illegal: /[${=;\\n,]/,\r\n        contains: [\r\n          hljs.UNDERSCORE_TITLE_MODE,\r\n          PARAMS,\r\n          {\r\n            begin: /->/,\r\n            endsWithParent: true,\r\n            keywords: KEYWORDS\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        className: 'meta',\r\n        begin: /^[\\t ]*@/,\r\n        end: /(?=#)|$/,\r\n        contains: [\r\n          NUMBER,\r\n          PARAMS,\r\n          STRING\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = python;\r\n"]},"metadata":{},"sourceType":"script"}