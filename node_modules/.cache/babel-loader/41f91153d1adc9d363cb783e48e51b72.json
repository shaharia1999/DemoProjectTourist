{"ast":null,"code":"/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\n\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\n\n\nfunction anyNumberOfTimes(re) {\n  return concat('(', re, ')*');\n}\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\n\n\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\n\n\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/**\r\n * Any of the passed expresssions may match\r\n *\r\n * Creates a huge this | this | that | that match\r\n * @param {(RegExp | string)[] } args\r\n * @returns {string}\r\n */\n\n\nfunction either(...args) {\n  const joined = '(' + args.map(x => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n/*\r\nLanguage: Handlebars\r\nRequires: xml.js\r\nAuthor: Robin Ward <robin.ward@gmail.com>\r\nDescription: Matcher for Handlebars as well as EmberJS additions.\r\nWebsite: https://handlebarsjs.com\r\nCategory: template\r\n*/\n\n\nfunction handlebars(hljs) {\n  const BUILT_INS = {\n    'builtin-name': ['action', 'bindattr', 'collection', 'component', 'concat', 'debugger', 'each', 'each-in', 'get', 'hash', 'if', 'in', 'input', 'link-to', 'loc', 'log', 'lookup', 'mut', 'outlet', 'partial', 'query-params', 'render', 'template', 'textarea', 'unbound', 'unless', 'view', 'with', 'yield']\n  };\n  const LITERALS = {\n    literal: ['true', 'false', 'undefined', 'null']\n  }; // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments\n  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths\n  // like a/b, ./abc/cde, and abc.bcd\n\n  const DOUBLE_QUOTED_ID_REGEX = /\"\"|\"[^\"]+\"/;\n  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;\n  const BRACKET_QUOTED_ID_REGEX = /\\[\\]|\\[[^\\]]+\\]/;\n  const PLAIN_ID_REGEX = /[^\\s!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]+/;\n  const PATH_DELIMITER_REGEX = /(\\.|\\/)/;\n  const ANY_ID = either(DOUBLE_QUOTED_ID_REGEX, SINGLE_QUOTED_ID_REGEX, BRACKET_QUOTED_ID_REGEX, PLAIN_ID_REGEX);\n  const IDENTIFIER_REGEX = concat(optional(/\\.|\\.\\/|\\//), // relative or absolute path\n  ANY_ID, anyNumberOfTimes(concat(PATH_DELIMITER_REGEX, ANY_ID))); // identifier followed by a equal-sign (without the equal sign)\n\n  const HASH_PARAM_REGEX = concat('(', BRACKET_QUOTED_ID_REGEX, '|', PLAIN_ID_REGEX, ')(?==)');\n  const HELPER_NAME_OR_PATH_EXPRESSION = {\n    begin: IDENTIFIER_REGEX,\n    lexemes: /[\\w.\\/]+/\n  };\n  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: LITERALS\n  });\n  const SUB_EXPRESSION = {\n    begin: /\\(/,\n    end: /\\)/ // the \"contains\" is added below when all necessary sub-modes are defined\n\n  };\n  const HASH = {\n    // fka \"attribute-assignment\", parameters of the form 'key=value'\n    className: 'attr',\n    begin: HASH_PARAM_REGEX,\n    relevance: 0,\n    starts: {\n      begin: /=/,\n      end: /=/,\n      starts: {\n        contains: [hljs.NUMBER_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, HELPER_PARAMETER, SUB_EXPRESSION]\n      }\n    }\n  };\n  const BLOCK_PARAMS = {\n    // parameters of the form '{{#with x as | y |}}...{{/with}}'\n    begin: /as\\s+\\|/,\n    keywords: {\n      keyword: 'as'\n    },\n    end: /\\|/,\n    contains: [{\n      // define sub-mode in order to prevent highlighting of block-parameter named \"as\"\n      begin: /\\w+/\n    }]\n  };\n  const HELPER_PARAMETERS = {\n    contains: [hljs.NUMBER_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, BLOCK_PARAMS, HASH, HELPER_PARAMETER, SUB_EXPRESSION],\n    returnEnd: true // the property \"end\" is defined through inheritance when the mode is used. If depends\n    // on the surrounding mode, but \"endsWithParent\" does not work here (i.e. it includes the\n    // end-token of the surrounding mode)\n\n  };\n  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\)/\n    })\n  });\n  SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];\n  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name',\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name'\n  });\n  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\{\\{/,\n    skip: true\n  };\n  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\\\(?=\\{\\{)/,\n    skip: true\n  };\n  return {\n    name: 'Handlebars',\n    aliases: ['hbs', 'html.hbs', 'html.handlebars', 'htmlbars'],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH, PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH, hljs.COMMENT(/\\{\\{!--/, /--\\}\\}/), hljs.COMMENT(/\\{\\{!/, /\\}\\}/), {\n      // open raw block \"{{{{raw}}}} content not evaluated {{{{/raw}}}}\"\n      className: 'template-tag',\n      begin: /\\{\\{\\{\\{(?!\\/)/,\n      end: /\\}\\}\\}\\}/,\n      contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\n      starts: {\n        end: /\\{\\{\\{\\{\\//,\n        returnEnd: true,\n        subLanguage: 'xml'\n      }\n    }, {\n      // close raw block\n      className: 'template-tag',\n      begin: /\\{\\{\\{\\{\\//,\n      end: /\\}\\}\\}\\}/,\n      contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n    }, {\n      // open block statement\n      className: 'template-tag',\n      begin: /\\{\\{#/,\n      end: /\\}\\}/,\n      contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]\n    }, {\n      className: 'template-tag',\n      begin: /\\{\\{(?=else\\}\\})/,\n      end: /\\}\\}/,\n      keywords: 'else'\n    }, {\n      className: 'template-tag',\n      begin: /\\{\\{(?=else if)/,\n      end: /\\}\\}/,\n      keywords: 'else if'\n    }, {\n      // closing block statement\n      className: 'template-tag',\n      begin: /\\{\\{\\//,\n      end: /\\}\\}/,\n      contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n    }, {\n      // template variable or helper-call that is NOT html-escaped\n      className: 'template-variable',\n      begin: /\\{\\{\\{/,\n      end: /\\}\\}\\}/,\n      contains: [BASIC_MUSTACHE_CONTENTS]\n    }, {\n      // template variable or helper-call that is html-escaped\n      className: 'template-variable',\n      begin: /\\{\\{/,\n      end: /\\}\\}/,\n      contains: [BASIC_MUSTACHE_CONTENTS]\n    }]\n  };\n}\n/*\r\n Language: HTMLBars (legacy)\r\n Requires: xml.js\r\n Description: Matcher for Handlebars as well as EmberJS additions.\r\n Website: https://github.com/tildeio/htmlbars\r\n Category: template\r\n */\n\n\nfunction htmlbars(hljs) {\n  const definition = handlebars(hljs);\n  definition.name = \"HTMLbars\"; // HACK: This lets handlebars do the auto-detection if it's been loaded (by\n  // default the build script will load in alphabetical order) and if not (perhaps\n  // an install is only using `htmlbars`, not `handlebars`) then this will still\n  // allow HTMLBars to participate in the auto-detection\n  // worse case someone will have HTMLbars and handlebars competing for the same\n  // content and will need to change their setup to only require handlebars, but\n  // I don't consider this a breaking change\n\n  if (hljs.getLanguage(\"handlebars\")) {\n    definition.disableAutodetect = true;\n  }\n\n  return definition;\n}\n\nmodule.exports = htmlbars;","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/highlight.js/lib/languages/htmlbars.js"],"names":["source","re","anyNumberOfTimes","concat","optional","args","joined","map","x","join","either","handlebars","hljs","BUILT_INS","LITERALS","literal","DOUBLE_QUOTED_ID_REGEX","SINGLE_QUOTED_ID_REGEX","BRACKET_QUOTED_ID_REGEX","PLAIN_ID_REGEX","PATH_DELIMITER_REGEX","ANY_ID","IDENTIFIER_REGEX","HASH_PARAM_REGEX","HELPER_NAME_OR_PATH_EXPRESSION","begin","lexemes","HELPER_PARAMETER","inherit","keywords","SUB_EXPRESSION","end","HASH","className","relevance","starts","contains","NUMBER_MODE","QUOTE_STRING_MODE","APOS_STRING_MODE","BLOCK_PARAMS","keyword","HELPER_PARAMETERS","returnEnd","SUB_EXPRESSION_CONTENTS","OPENING_BLOCK_MUSTACHE_CONTENTS","CLOSING_BLOCK_MUSTACHE_CONTENTS","BASIC_MUSTACHE_CONTENTS","ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH","skip","PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH","name","aliases","case_insensitive","subLanguage","COMMENT","htmlbars","definition","getLanguage","disableAutodetect","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction anyNumberOfTimes(re) {\r\n  return concat('(', re, ')*');\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction optional(re) {\r\n  return concat('(', re, ')?');\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/**\r\n * Any of the passed expresssions may match\r\n *\r\n * Creates a huge this | this | that | that match\r\n * @param {(RegExp | string)[] } args\r\n * @returns {string}\r\n */\r\nfunction either(...args) {\r\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\r\n  return joined;\r\n}\r\n\r\n/*\r\nLanguage: Handlebars\r\nRequires: xml.js\r\nAuthor: Robin Ward <robin.ward@gmail.com>\r\nDescription: Matcher for Handlebars as well as EmberJS additions.\r\nWebsite: https://handlebarsjs.com\r\nCategory: template\r\n*/\r\n\r\nfunction handlebars(hljs) {\r\n  const BUILT_INS = {\r\n    'builtin-name': [\r\n      'action',\r\n      'bindattr',\r\n      'collection',\r\n      'component',\r\n      'concat',\r\n      'debugger',\r\n      'each',\r\n      'each-in',\r\n      'get',\r\n      'hash',\r\n      'if',\r\n      'in',\r\n      'input',\r\n      'link-to',\r\n      'loc',\r\n      'log',\r\n      'lookup',\r\n      'mut',\r\n      'outlet',\r\n      'partial',\r\n      'query-params',\r\n      'render',\r\n      'template',\r\n      'textarea',\r\n      'unbound',\r\n      'unless',\r\n      'view',\r\n      'with',\r\n      'yield'\r\n    ]\r\n  };\r\n\r\n  const LITERALS = {\r\n    literal: [\r\n      'true',\r\n      'false',\r\n      'undefined',\r\n      'null'\r\n    ]\r\n  };\r\n\r\n  // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments\r\n  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths\r\n  // like a/b, ./abc/cde, and abc.bcd\r\n\r\n  const DOUBLE_QUOTED_ID_REGEX = /\"\"|\"[^\"]+\"/;\r\n  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;\r\n  const BRACKET_QUOTED_ID_REGEX = /\\[\\]|\\[[^\\]]+\\]/;\r\n  const PLAIN_ID_REGEX = /[^\\s!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]+/;\r\n  const PATH_DELIMITER_REGEX = /(\\.|\\/)/;\r\n  const ANY_ID = either(\r\n    DOUBLE_QUOTED_ID_REGEX,\r\n    SINGLE_QUOTED_ID_REGEX,\r\n    BRACKET_QUOTED_ID_REGEX,\r\n    PLAIN_ID_REGEX\r\n    );\r\n\r\n  const IDENTIFIER_REGEX = concat(\r\n    optional(/\\.|\\.\\/|\\//), // relative or absolute path\r\n    ANY_ID,\r\n    anyNumberOfTimes(concat(\r\n      PATH_DELIMITER_REGEX,\r\n      ANY_ID\r\n    ))\r\n  );\r\n\r\n  // identifier followed by a equal-sign (without the equal sign)\r\n  const HASH_PARAM_REGEX = concat(\r\n    '(',\r\n    BRACKET_QUOTED_ID_REGEX, '|',\r\n    PLAIN_ID_REGEX,\r\n    ')(?==)'\r\n  );\r\n\r\n  const HELPER_NAME_OR_PATH_EXPRESSION = {\r\n    begin: IDENTIFIER_REGEX,\r\n    lexemes: /[\\w.\\/]+/\r\n  };\r\n\r\n  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\r\n    keywords: LITERALS\r\n  });\r\n\r\n  const SUB_EXPRESSION = {\r\n    begin: /\\(/,\r\n    end: /\\)/\r\n    // the \"contains\" is added below when all necessary sub-modes are defined\r\n  };\r\n\r\n  const HASH = {\r\n    // fka \"attribute-assignment\", parameters of the form 'key=value'\r\n    className: 'attr',\r\n    begin: HASH_PARAM_REGEX,\r\n    relevance: 0,\r\n    starts: {\r\n      begin: /=/,\r\n      end: /=/,\r\n      starts: {\r\n        contains: [\r\n          hljs.NUMBER_MODE,\r\n          hljs.QUOTE_STRING_MODE,\r\n          hljs.APOS_STRING_MODE,\r\n          HELPER_PARAMETER,\r\n          SUB_EXPRESSION\r\n        ]\r\n      }\r\n    }\r\n  };\r\n\r\n  const BLOCK_PARAMS = {\r\n    // parameters of the form '{{#with x as | y |}}...{{/with}}'\r\n    begin: /as\\s+\\|/,\r\n    keywords: {\r\n      keyword: 'as'\r\n    },\r\n    end: /\\|/,\r\n    contains: [\r\n      {\r\n        // define sub-mode in order to prevent highlighting of block-parameter named \"as\"\r\n        begin: /\\w+/\r\n      }\r\n    ]\r\n  };\r\n\r\n  const HELPER_PARAMETERS = {\r\n    contains: [\r\n      hljs.NUMBER_MODE,\r\n      hljs.QUOTE_STRING_MODE,\r\n      hljs.APOS_STRING_MODE,\r\n      BLOCK_PARAMS,\r\n      HASH,\r\n      HELPER_PARAMETER,\r\n      SUB_EXPRESSION\r\n    ],\r\n    returnEnd: true\r\n    // the property \"end\" is defined through inheritance when the mode is used. If depends\r\n    // on the surrounding mode, but \"endsWithParent\" does not work here (i.e. it includes the\r\n    // end-token of the surrounding mode)\r\n  };\r\n\r\n  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\r\n    className: 'name',\r\n    keywords: BUILT_INS,\r\n    starts: hljs.inherit(HELPER_PARAMETERS, {\r\n      end: /\\)/\r\n    })\r\n  });\r\n\r\n  SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];\r\n\r\n  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\r\n    keywords: BUILT_INS,\r\n    className: 'name',\r\n    starts: hljs.inherit(HELPER_PARAMETERS, {\r\n      end: /\\}\\}/\r\n    })\r\n  });\r\n\r\n  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\r\n    keywords: BUILT_INS,\r\n    className: 'name'\r\n  });\r\n\r\n  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\r\n    className: 'name',\r\n    keywords: BUILT_INS,\r\n    starts: hljs.inherit(HELPER_PARAMETERS, {\r\n      end: /\\}\\}/\r\n    })\r\n  });\r\n\r\n  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {\r\n    begin: /\\\\\\{\\{/,\r\n    skip: true\r\n  };\r\n  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {\r\n    begin: /\\\\\\\\(?=\\{\\{)/,\r\n    skip: true\r\n  };\r\n\r\n  return {\r\n    name: 'Handlebars',\r\n    aliases: [\r\n      'hbs',\r\n      'html.hbs',\r\n      'html.handlebars',\r\n      'htmlbars'\r\n    ],\r\n    case_insensitive: true,\r\n    subLanguage: 'xml',\r\n    contains: [\r\n      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,\r\n      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,\r\n      hljs.COMMENT(/\\{\\{!--/, /--\\}\\}/),\r\n      hljs.COMMENT(/\\{\\{!/, /\\}\\}/),\r\n      {\r\n        // open raw block \"{{{{raw}}}} content not evaluated {{{{/raw}}}}\"\r\n        className: 'template-tag',\r\n        begin: /\\{\\{\\{\\{(?!\\/)/,\r\n        end: /\\}\\}\\}\\}/,\r\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\r\n        starts: {\r\n          end: /\\{\\{\\{\\{\\//,\r\n          returnEnd: true,\r\n          subLanguage: 'xml'\r\n        }\r\n      },\r\n      {\r\n        // close raw block\r\n        className: 'template-tag',\r\n        begin: /\\{\\{\\{\\{\\//,\r\n        end: /\\}\\}\\}\\}/,\r\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\r\n      },\r\n      {\r\n        // open block statement\r\n        className: 'template-tag',\r\n        begin: /\\{\\{#/,\r\n        end: /\\}\\}/,\r\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]\r\n      },\r\n      {\r\n        className: 'template-tag',\r\n        begin: /\\{\\{(?=else\\}\\})/,\r\n        end: /\\}\\}/,\r\n        keywords: 'else'\r\n      },\r\n      {\r\n        className: 'template-tag',\r\n        begin: /\\{\\{(?=else if)/,\r\n        end: /\\}\\}/,\r\n        keywords: 'else if'\r\n      },\r\n      {\r\n        // closing block statement\r\n        className: 'template-tag',\r\n        begin: /\\{\\{\\//,\r\n        end: /\\}\\}/,\r\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\r\n      },\r\n      {\r\n        // template variable or helper-call that is NOT html-escaped\r\n        className: 'template-variable',\r\n        begin: /\\{\\{\\{/,\r\n        end: /\\}\\}\\}/,\r\n        contains: [BASIC_MUSTACHE_CONTENTS]\r\n      },\r\n      {\r\n        // template variable or helper-call that is html-escaped\r\n        className: 'template-variable',\r\n        begin: /\\{\\{/,\r\n        end: /\\}\\}/,\r\n        contains: [BASIC_MUSTACHE_CONTENTS]\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\n/*\r\n Language: HTMLBars (legacy)\r\n Requires: xml.js\r\n Description: Matcher for Handlebars as well as EmberJS additions.\r\n Website: https://github.com/tildeio/htmlbars\r\n Category: template\r\n */\r\n\r\nfunction htmlbars(hljs) {\r\n  const definition = handlebars(hljs);\r\n\r\n  definition.name = \"HTMLbars\";\r\n\r\n  // HACK: This lets handlebars do the auto-detection if it's been loaded (by\r\n  // default the build script will load in alphabetical order) and if not (perhaps\r\n  // an install is only using `htmlbars`, not `handlebars`) then this will still\r\n  // allow HTMLBars to participate in the auto-detection\r\n\r\n  // worse case someone will have HTMLbars and handlebars competing for the same\r\n  // content and will need to change their setup to only require handlebars, but\r\n  // I don't consider this a breaking change\r\n  if (hljs.getLanguage(\"handlebars\")) {\r\n    definition.disableAutodetect = true;\r\n  }\r\n\r\n  return definition;\r\n}\r\n\r\nmodule.exports = htmlbars;\r\n"]},"metadata":{},"sourceType":"script"}