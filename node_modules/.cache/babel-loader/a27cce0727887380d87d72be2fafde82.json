{"ast":null,"code":"'use strict';\n\nvar locate = require('../locate/escape');\n\nmodule.exports = escape;\nescape.locator = locate;\nvar lineFeed = '\\n';\nvar backslash = '\\\\';\n\nfunction escape(eat, value, silent) {\n  var self = this;\n  var character;\n  var node;\n\n  if (value.charAt(0) === backslash) {\n    character = value.charAt(1);\n\n    if (self.escape.indexOf(character) !== -1) {\n      /* istanbul ignore if - never used (yet) */\n      if (silent) {\n        return true;\n      }\n\n      if (character === lineFeed) {\n        node = {\n          type: 'break'\n        };\n      } else {\n        node = {\n          type: 'text',\n          value: character\n        };\n      }\n\n      return eat(backslash + character)(node);\n    }\n  }\n}","map":{"version":3,"sources":["D:/PorzotokFrontend/node_modules/remark-parse/lib/tokenize/escape.js"],"names":["locate","require","module","exports","escape","locator","lineFeed","backslash","eat","value","silent","self","character","node","charAt","indexOf","type"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,OAAP,GAAiBL,MAAjB;AAEA,IAAIM,QAAQ,GAAG,IAAf;AACA,IAAIC,SAAS,GAAG,IAAhB;;AAEA,SAASH,MAAT,CAAgBI,GAAhB,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,SAAJ;AACA,MAAIC,IAAJ;;AAEA,MAAIJ,KAAK,CAACK,MAAN,CAAa,CAAb,MAAoBP,SAAxB,EAAmC;AACjCK,IAAAA,SAAS,GAAGH,KAAK,CAACK,MAAN,CAAa,CAAb,CAAZ;;AAEA,QAAIH,IAAI,CAACP,MAAL,CAAYW,OAAZ,CAAoBH,SAApB,MAAmC,CAAC,CAAxC,EAA2C;AACzC;AACA,UAAIF,MAAJ,EAAY;AACV,eAAO,IAAP;AACD;;AAED,UAAIE,SAAS,KAAKN,QAAlB,EAA4B;AAC1BO,QAAAA,IAAI,GAAG;AAACG,UAAAA,IAAI,EAAE;AAAP,SAAP;AACD,OAFD,MAEO;AACLH,QAAAA,IAAI,GAAG;AAACG,UAAAA,IAAI,EAAE,MAAP;AAAeP,UAAAA,KAAK,EAAEG;AAAtB,SAAP;AACD;;AAED,aAAOJ,GAAG,CAACD,SAAS,GAAGK,SAAb,CAAH,CAA2BC,IAA3B,CAAP;AACD;AACF;AACF","sourcesContent":["'use strict'\n\nvar locate = require('../locate/escape')\n\nmodule.exports = escape\nescape.locator = locate\n\nvar lineFeed = '\\n'\nvar backslash = '\\\\'\n\nfunction escape(eat, value, silent) {\n  var self = this\n  var character\n  var node\n\n  if (value.charAt(0) === backslash) {\n    character = value.charAt(1)\n\n    if (self.escape.indexOf(character) !== -1) {\n      /* istanbul ignore if - never used (yet) */\n      if (silent) {\n        return true\n      }\n\n      if (character === lineFeed) {\n        node = {type: 'break'}\n      } else {\n        node = {type: 'text', value: character}\n      }\n\n      return eat(backslash + character)(node)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}