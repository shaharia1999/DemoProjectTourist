{"ast":null,"code":"'use strict';\n\nvar repeat = require('repeat-string');\n\nvar trim = require('trim-trailing-lines');\n\nmodule.exports = indentedCode;\nvar lineFeed = '\\n';\nvar tab = '\\t';\nvar space = ' ';\nvar tabSize = 4;\nvar codeIndent = repeat(space, tabSize);\n\nfunction indentedCode(eat, value, silent) {\n  var index = -1;\n  var length = value.length;\n  var subvalue = '';\n  var content = '';\n  var subvalueQueue = '';\n  var contentQueue = '';\n  var character;\n  var blankQueue;\n  var indent;\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (indent) {\n      indent = false;\n      subvalue += subvalueQueue;\n      content += contentQueue;\n      subvalueQueue = '';\n      contentQueue = '';\n\n      if (character === lineFeed) {\n        subvalueQueue = character;\n        contentQueue = character;\n      } else {\n        subvalue += character;\n        content += character;\n\n        while (++index < length) {\n          character = value.charAt(index);\n\n          if (!character || character === lineFeed) {\n            contentQueue = character;\n            subvalueQueue = character;\n            break;\n          }\n\n          subvalue += character;\n          content += character;\n        }\n      }\n    } else if (character === space && value.charAt(index + 1) === character && value.charAt(index + 2) === character && value.charAt(index + 3) === character) {\n      subvalueQueue += codeIndent;\n      index += 3;\n      indent = true;\n    } else if (character === tab) {\n      subvalueQueue += character;\n      indent = true;\n    } else {\n      blankQueue = '';\n\n      while (character === tab || character === space) {\n        blankQueue += character;\n        character = value.charAt(++index);\n      }\n\n      if (character !== lineFeed) {\n        break;\n      }\n\n      subvalueQueue += blankQueue + character;\n      contentQueue += character;\n    }\n  }\n\n  if (content) {\n    if (silent) {\n      return true;\n    }\n\n    return eat(subvalue)({\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: trim(content)\n    });\n  }\n}","map":{"version":3,"sources":["E:/Monirul AWS/PorzotokFrontend/node_modules/remark-parse/lib/tokenize/code-indented.js"],"names":["repeat","require","trim","module","exports","indentedCode","lineFeed","tab","space","tabSize","codeIndent","eat","value","silent","index","length","subvalue","content","subvalueQueue","contentQueue","character","blankQueue","indent","charAt","type","lang","meta"],"mappings":"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","sourcesContent":["'use strict'\n\nvar repeat = require('repeat-string')\nvar trim = require('trim-trailing-lines')\n\nmodule.exports = indentedCode\n\nvar lineFeed = '\\n'\nvar tab = '\\t'\nvar space = ' '\n\nvar tabSize = 4\nvar codeIndent = repeat(space, tabSize)\n\nfunction indentedCode(eat, value, silent) {\n  var index = -1\n  var length = value.length\n  var subvalue = ''\n  var content = ''\n  var subvalueQueue = ''\n  var contentQueue = ''\n  var character\n  var blankQueue\n  var indent\n\n  while (++index < length) {\n    character = value.charAt(index)\n\n    if (indent) {\n      indent = false\n\n      subvalue += subvalueQueue\n      content += contentQueue\n      subvalueQueue = ''\n      contentQueue = ''\n\n      if (character === lineFeed) {\n        subvalueQueue = character\n        contentQueue = character\n      } else {\n        subvalue += character\n        content += character\n\n        while (++index < length) {\n          character = value.charAt(index)\n\n          if (!character || character === lineFeed) {\n            contentQueue = character\n            subvalueQueue = character\n            break\n          }\n\n          subvalue += character\n          content += character\n        }\n      }\n    } else if (\n      character === space &&\n      value.charAt(index + 1) === character &&\n      value.charAt(index + 2) === character &&\n      value.charAt(index + 3) === character\n    ) {\n      subvalueQueue += codeIndent\n      index += 3\n      indent = true\n    } else if (character === tab) {\n      subvalueQueue += character\n      indent = true\n    } else {\n      blankQueue = ''\n\n      while (character === tab || character === space) {\n        blankQueue += character\n        character = value.charAt(++index)\n      }\n\n      if (character !== lineFeed) {\n        break\n      }\n\n      subvalueQueue += blankQueue + character\n      contentQueue += character\n    }\n  }\n\n  if (content) {\n    if (silent) {\n      return true\n    }\n\n    return eat(subvalue)({\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: trim(content)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}