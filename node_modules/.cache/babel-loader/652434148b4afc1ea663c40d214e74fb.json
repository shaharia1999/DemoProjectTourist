{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getHeaderRowFromWorkbook;\n\nvar _xlsx = _interopRequireDefault(require(\"xlsx\"));\n/* eslint-disable id-length */\n\n\nfunction getHeaderRowFromWorkbook(workbook) {\n  try {\n    var sheet = workbook.Sheets[workbook.SheetNames[0]];\n    var headers = [];\n\n    var range = _xlsx[\"default\"].utils.decode_range(sheet['!ref']);\n\n    var C;\n    /* start in the first row */\n\n    var R = range.s.r;\n    /* walk every column in the range */\n    // eslint-disable-next-line no-plusplus\n\n    for (C = range.s.c; C <= range.e.c; ++C) {\n      /* find the cell in the first row */\n      var cell = sheet[_xlsx[\"default\"].utils.encode_cell({\n        c: C,\n        r: R\n      })];\n\n      var hdr = \"UNKNOWN \".concat(C); // <-- replace with your desired default\n\n      if (cell && cell.t) hdr = _xlsx[\"default\"].utils.format_cell(cell);\n      headers.push(hdr);\n    }\n\n    return headers;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n    return [];\n  }\n}","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/react-rainbow-components/components/ImportRecordsFlow/helpers/getHeaderRowFromWorkbook.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","getHeaderRowFromWorkbook","_xlsx","workbook","sheet","Sheets","SheetNames","headers","range","utils","decode_range","C","R","s","r","c","e","cell","encode_cell","hdr","concat","t","format_cell","push","error","console","log"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,wBAArB;;AAEA,IAAIC,KAAK,GAAGP,sBAAsB,CAACC,OAAO,CAAC,MAAD,CAAR,CAAlC;AAEA;;;AACA,SAASK,wBAAT,CAAkCE,QAAlC,EAA4C;AAC1C,MAAI;AACF,QAAIC,KAAK,GAAGD,QAAQ,CAACE,MAAT,CAAgBF,QAAQ,CAACG,UAAT,CAAoB,CAApB,CAAhB,CAAZ;AACA,QAAIC,OAAO,GAAG,EAAd;;AAEA,QAAIC,KAAK,GAAGN,KAAK,CAAC,SAAD,CAAL,CAAiBO,KAAjB,CAAuBC,YAAvB,CAAoCN,KAAK,CAAC,MAAD,CAAzC,CAAZ;;AAEA,QAAIO,CAAJ;AACA;;AAEA,QAAIC,CAAC,GAAGJ,KAAK,CAACK,CAAN,CAAQC,CAAhB;AACA;AACA;;AAEA,SAAKH,CAAC,GAAGH,KAAK,CAACK,CAAN,CAAQE,CAAjB,EAAoBJ,CAAC,IAAIH,KAAK,CAACQ,CAAN,CAAQD,CAAjC,EAAoC,EAAEJ,CAAtC,EAAyC;AACvC;AACA,UAAIM,IAAI,GAAGb,KAAK,CAACF,KAAK,CAAC,SAAD,CAAL,CAAiBO,KAAjB,CAAuBS,WAAvB,CAAmC;AAClDH,QAAAA,CAAC,EAAEJ,CAD+C;AAElDG,QAAAA,CAAC,EAAEF;AAF+C,OAAnC,CAAD,CAAhB;;AAKA,UAAIO,GAAG,GAAG,WAAWC,MAAX,CAAkBT,CAAlB,CAAV,CAPuC,CAOP;;AAEhC,UAAIM,IAAI,IAAIA,IAAI,CAACI,CAAjB,EAAoBF,GAAG,GAAGjB,KAAK,CAAC,SAAD,CAAL,CAAiBO,KAAjB,CAAuBa,WAAvB,CAAmCL,IAAnC,CAAN;AACpBV,MAAAA,OAAO,CAACgB,IAAR,CAAaJ,GAAb;AACD;;AAED,WAAOZ,OAAP;AACD,GA3BD,CA2BE,OAAOiB,KAAP,EAAc;AACd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO,EAAP;AACD;AACF","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports[\"default\"] = getHeaderRowFromWorkbook;\r\n\r\nvar _xlsx = _interopRequireDefault(require(\"xlsx\"));\r\n\r\n/* eslint-disable id-length */\r\nfunction getHeaderRowFromWorkbook(workbook) {\r\n  try {\r\n    var sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n    var headers = [];\r\n\r\n    var range = _xlsx[\"default\"].utils.decode_range(sheet['!ref']);\r\n\r\n    var C;\r\n    /* start in the first row */\r\n\r\n    var R = range.s.r;\r\n    /* walk every column in the range */\r\n    // eslint-disable-next-line no-plusplus\r\n\r\n    for (C = range.s.c; C <= range.e.c; ++C) {\r\n      /* find the cell in the first row */\r\n      var cell = sheet[_xlsx[\"default\"].utils.encode_cell({\r\n        c: C,\r\n        r: R\r\n      })];\r\n\r\n      var hdr = \"UNKNOWN \".concat(C); // <-- replace with your desired default\r\n\r\n      if (cell && cell.t) hdr = _xlsx[\"default\"].utils.format_cell(cell);\r\n      headers.push(hdr);\r\n    }\r\n\r\n    return headers;\r\n  } catch (error) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(error);\r\n    return [];\r\n  }\r\n}"]},"metadata":{},"sourceType":"script"}