{"ast":null,"code":"'use strict';\n\nvar openCloseTag = require('../util/html').openCloseTag;\n\nmodule.exports = blockHtml;\nvar tab = '\\t';\nvar space = ' ';\nvar lineFeed = '\\n';\nvar lessThan = '<';\nvar rawOpenExpression = /^<(script|pre|style)(?=(\\s|>|$))/i;\nvar rawCloseExpression = /<\\/(script|pre|style)>/i;\nvar commentOpenExpression = /^<!--/;\nvar commentCloseExpression = /-->/;\nvar instructionOpenExpression = /^<\\?/;\nvar instructionCloseExpression = /\\?>/;\nvar directiveOpenExpression = /^<![A-Za-z]/;\nvar directiveCloseExpression = />/;\nvar cdataOpenExpression = /^<!\\[CDATA\\[/;\nvar cdataCloseExpression = /]]>/;\nvar elementCloseExpression = /^$/;\nvar otherElementOpenExpression = new RegExp(openCloseTag.source + '\\\\s*$');\n\nfunction blockHtml(eat, value, silent) {\n  var self = this;\n  var blocks = self.options.blocks.join('|');\n  var elementOpenExpression = new RegExp('^</?(' + blocks + ')(?=(\\\\s|/?>|$))', 'i');\n  var length = value.length;\n  var index = 0;\n  var next;\n  var line;\n  var offset;\n  var character;\n  var count;\n  var sequence;\n  var subvalue;\n  var sequences = [[rawOpenExpression, rawCloseExpression, true], [commentOpenExpression, commentCloseExpression, true], [instructionOpenExpression, instructionCloseExpression, true], [directiveOpenExpression, directiveCloseExpression, true], [cdataOpenExpression, cdataCloseExpression, true], [elementOpenExpression, elementCloseExpression, true], [otherElementOpenExpression, elementCloseExpression, false]]; // Eat initial spacing.\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== tab && character !== space) {\n      break;\n    }\n\n    index++;\n  }\n\n  if (value.charAt(index) !== lessThan) {\n    return;\n  }\n\n  next = value.indexOf(lineFeed, index + 1);\n  next = next === -1 ? length : next;\n  line = value.slice(index, next);\n  offset = -1;\n  count = sequences.length;\n\n  while (++offset < count) {\n    if (sequences[offset][0].test(line)) {\n      sequence = sequences[offset];\n      break;\n    }\n  }\n\n  if (!sequence) {\n    return;\n  }\n\n  if (silent) {\n    return sequence[2];\n  }\n\n  index = next;\n\n  if (!sequence[1].test(line)) {\n    while (index < length) {\n      next = value.indexOf(lineFeed, index + 1);\n      next = next === -1 ? length : next;\n      line = value.slice(index + 1, next);\n\n      if (sequence[1].test(line)) {\n        if (line) {\n          index = next;\n        }\n\n        break;\n      }\n\n      index = next;\n    }\n  }\n\n  subvalue = value.slice(0, index);\n  return eat(subvalue)({\n    type: 'html',\n    value: subvalue\n  });\n}","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/remark-parse/lib/tokenize/html-block.js"],"names":["openCloseTag","require","module","exports","blockHtml","tab","space","lineFeed","lessThan","rawOpenExpression","rawCloseExpression","commentOpenExpression","commentCloseExpression","instructionOpenExpression","instructionCloseExpression","directiveOpenExpression","directiveCloseExpression","cdataOpenExpression","cdataCloseExpression","elementCloseExpression","otherElementOpenExpression","RegExp","source","eat","value","silent","self","blocks","options","join","elementOpenExpression","length","index","next","line","offset","character","count","sequence","subvalue","sequences","charAt","indexOf","slice","test","type"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nvar openCloseTag = require('../util/html').openCloseTag\r\n\r\nmodule.exports = blockHtml\r\n\r\nvar tab = '\\t'\r\nvar space = ' '\r\nvar lineFeed = '\\n'\r\nvar lessThan = '<'\r\n\r\nvar rawOpenExpression = /^<(script|pre|style)(?=(\\s|>|$))/i\r\nvar rawCloseExpression = /<\\/(script|pre|style)>/i\r\nvar commentOpenExpression = /^<!--/\r\nvar commentCloseExpression = /-->/\r\nvar instructionOpenExpression = /^<\\?/\r\nvar instructionCloseExpression = /\\?>/\r\nvar directiveOpenExpression = /^<![A-Za-z]/\r\nvar directiveCloseExpression = />/\r\nvar cdataOpenExpression = /^<!\\[CDATA\\[/\r\nvar cdataCloseExpression = /]]>/\r\nvar elementCloseExpression = /^$/\r\nvar otherElementOpenExpression = new RegExp(openCloseTag.source + '\\\\s*$')\r\n\r\nfunction blockHtml(eat, value, silent) {\r\n  var self = this\r\n  var blocks = self.options.blocks.join('|')\r\n  var elementOpenExpression = new RegExp(\r\n    '^</?(' + blocks + ')(?=(\\\\s|/?>|$))',\r\n    'i'\r\n  )\r\n  var length = value.length\r\n  var index = 0\r\n  var next\r\n  var line\r\n  var offset\r\n  var character\r\n  var count\r\n  var sequence\r\n  var subvalue\r\n\r\n  var sequences = [\r\n    [rawOpenExpression, rawCloseExpression, true],\r\n    [commentOpenExpression, commentCloseExpression, true],\r\n    [instructionOpenExpression, instructionCloseExpression, true],\r\n    [directiveOpenExpression, directiveCloseExpression, true],\r\n    [cdataOpenExpression, cdataCloseExpression, true],\r\n    [elementOpenExpression, elementCloseExpression, true],\r\n    [otherElementOpenExpression, elementCloseExpression, false]\r\n  ]\r\n\r\n  // Eat initial spacing.\r\n  while (index < length) {\r\n    character = value.charAt(index)\r\n\r\n    if (character !== tab && character !== space) {\r\n      break\r\n    }\r\n\r\n    index++\r\n  }\r\n\r\n  if (value.charAt(index) !== lessThan) {\r\n    return\r\n  }\r\n\r\n  next = value.indexOf(lineFeed, index + 1)\r\n  next = next === -1 ? length : next\r\n  line = value.slice(index, next)\r\n  offset = -1\r\n  count = sequences.length\r\n\r\n  while (++offset < count) {\r\n    if (sequences[offset][0].test(line)) {\r\n      sequence = sequences[offset]\r\n      break\r\n    }\r\n  }\r\n\r\n  if (!sequence) {\r\n    return\r\n  }\r\n\r\n  if (silent) {\r\n    return sequence[2]\r\n  }\r\n\r\n  index = next\r\n\r\n  if (!sequence[1].test(line)) {\r\n    while (index < length) {\r\n      next = value.indexOf(lineFeed, index + 1)\r\n      next = next === -1 ? length : next\r\n      line = value.slice(index + 1, next)\r\n\r\n      if (sequence[1].test(line)) {\r\n        if (line) {\r\n          index = next\r\n        }\r\n\r\n        break\r\n      }\r\n\r\n      index = next\r\n    }\r\n  }\r\n\r\n  subvalue = value.slice(0, index)\r\n\r\n  return eat(subvalue)({type: 'html', value: subvalue})\r\n}\r\n"]},"metadata":{},"sourceType":"script"}