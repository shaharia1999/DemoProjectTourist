{"ast":null,"code":"'use strict';\n\nvar whitespace = require('is-whitespace-character');\n\nvar locate = require('../locate/link');\n\nvar normalize = require('../util/normalize');\n\nmodule.exports = reference;\nreference.locator = locate;\nvar link = 'link';\nvar image = 'image';\nvar shortcut = 'shortcut';\nvar collapsed = 'collapsed';\nvar full = 'full';\nvar exclamationMark = '!';\nvar leftSquareBracket = '[';\nvar backslash = '\\\\';\nvar rightSquareBracket = ']';\n\nfunction reference(eat, value, silent) {\n  var self = this;\n  var commonmark = self.options.commonmark;\n  var character = value.charAt(0);\n  var index = 0;\n  var length = value.length;\n  var subvalue = '';\n  var intro = '';\n  var type = link;\n  var referenceType = shortcut;\n  var content;\n  var identifier;\n  var now;\n  var node;\n  var exit;\n  var queue;\n  var bracketed;\n  var depth; // Check whether we’re eating an image.\n\n  if (character === exclamationMark) {\n    type = image;\n    intro = character;\n    character = value.charAt(++index);\n  }\n\n  if (character !== leftSquareBracket) {\n    return;\n  }\n\n  index++;\n  intro += character;\n  queue = ''; // Eat the text.\n\n  depth = 0;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character === leftSquareBracket) {\n      bracketed = true;\n      depth++;\n    } else if (character === rightSquareBracket) {\n      if (!depth) {\n        break;\n      }\n\n      depth--;\n    }\n\n    if (character === backslash) {\n      queue += backslash;\n      character = value.charAt(++index);\n    }\n\n    queue += character;\n    index++;\n  }\n\n  subvalue = queue;\n  content = queue;\n  character = value.charAt(index);\n\n  if (character !== rightSquareBracket) {\n    return;\n  }\n\n  index++;\n  subvalue += character;\n  queue = '';\n\n  if (!commonmark) {\n    // The original markdown syntax definition explicitly allows for whitespace\n    // between the link text and link label; commonmark departs from this, in\n    // part to improve support for shortcut reference links\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (!whitespace(character)) {\n        break;\n      }\n\n      queue += character;\n      index++;\n    }\n  }\n\n  character = value.charAt(index);\n\n  if (character === leftSquareBracket) {\n    identifier = '';\n    queue += character;\n    index++;\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (character === leftSquareBracket || character === rightSquareBracket) {\n        break;\n      }\n\n      if (character === backslash) {\n        identifier += backslash;\n        character = value.charAt(++index);\n      }\n\n      identifier += character;\n      index++;\n    }\n\n    character = value.charAt(index);\n\n    if (character === rightSquareBracket) {\n      referenceType = identifier ? full : collapsed;\n      queue += identifier + character;\n      index++;\n    } else {\n      identifier = '';\n    }\n\n    subvalue += queue;\n    queue = '';\n  } else {\n    if (!content) {\n      return;\n    }\n\n    identifier = content;\n  } // Brackets cannot be inside the identifier.\n\n\n  if (referenceType !== full && bracketed) {\n    return;\n  }\n\n  subvalue = intro + subvalue;\n\n  if (type === link && self.inLink) {\n    return null;\n  }\n  /* istanbul ignore if - never used (yet) */\n\n\n  if (silent) {\n    return true;\n  }\n\n  now = eat.now();\n  now.column += intro.length;\n  now.offset += intro.length;\n  identifier = referenceType === full ? identifier : content;\n  node = {\n    type: type + 'Reference',\n    identifier: normalize(identifier),\n    label: identifier,\n    referenceType: referenceType\n  };\n\n  if (type === link) {\n    exit = self.enterLink();\n    node.children = self.tokenizeInline(content, now);\n    exit();\n  } else {\n    node.alt = self.decode.raw(self.unescape(content), now) || null;\n  }\n\n  return eat(subvalue)(node);\n}","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/remark-parse/lib/tokenize/reference.js"],"names":["whitespace","require","locate","normalize","module","exports","reference","locator","link","image","shortcut","collapsed","full","exclamationMark","leftSquareBracket","backslash","rightSquareBracket","eat","value","silent","self","commonmark","options","character","charAt","index","length","subvalue","intro","type","referenceType","content","identifier","now","node","exit","queue","bracketed","depth","inLink","column","offset","label","enterLink","children","tokenizeInline","alt","decode","raw","unescape"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAAxB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,mBAAD,CAAvB;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,SAAjB;AACAA,SAAS,CAACC,OAAV,GAAoBL,MAApB;AAEA,IAAIM,IAAI,GAAG,MAAX;AACA,IAAIC,KAAK,GAAG,OAAZ;AACA,IAAIC,QAAQ,GAAG,UAAf;AACA,IAAIC,SAAS,GAAG,WAAhB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,eAAe,GAAG,GAAtB;AACA,IAAIC,iBAAiB,GAAG,GAAxB;AACA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,kBAAkB,GAAG,GAAzB;;AAEA,SAASV,SAAT,CAAmBW,GAAnB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuC;AACrC,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,UAAU,GAAGD,IAAI,CAACE,OAAL,CAAaD,UAA9B;AACA,MAAIE,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAa,CAAb,CAAhB;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAGR,KAAK,CAACQ,MAAnB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,IAAI,GAAGrB,IAAX;AACA,MAAIsB,aAAa,GAAGpB,QAApB;AACA,MAAIqB,OAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,KAAJ,CAjBqC,CAmBrC;;AACA,MAAIf,SAAS,KAAKV,eAAlB,EAAmC;AACjCgB,IAAAA,IAAI,GAAGpB,KAAP;AACAmB,IAAAA,KAAK,GAAGL,SAAR;AACAA,IAAAA,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAa,EAAEC,KAAf,CAAZ;AACD;;AAED,MAAIF,SAAS,KAAKT,iBAAlB,EAAqC;AACnC;AACD;;AAEDW,EAAAA,KAAK;AACLG,EAAAA,KAAK,IAAIL,SAAT;AACAa,EAAAA,KAAK,GAAG,EAAR,CAhCqC,CAkCrC;;AACAE,EAAAA,KAAK,GAAG,CAAR;;AAEA,SAAOb,KAAK,GAAGC,MAAf,EAAuB;AACrBH,IAAAA,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAaC,KAAb,CAAZ;;AAEA,QAAIF,SAAS,KAAKT,iBAAlB,EAAqC;AACnCuB,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,KAAK;AACN,KAHD,MAGO,IAAIf,SAAS,KAAKP,kBAAlB,EAAsC;AAC3C,UAAI,CAACsB,KAAL,EAAY;AACV;AACD;;AAEDA,MAAAA,KAAK;AACN;;AAED,QAAIf,SAAS,KAAKR,SAAlB,EAA6B;AAC3BqB,MAAAA,KAAK,IAAIrB,SAAT;AACAQ,MAAAA,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAa,EAAEC,KAAf,CAAZ;AACD;;AAEDW,IAAAA,KAAK,IAAIb,SAAT;AACAE,IAAAA,KAAK;AACN;;AAEDE,EAAAA,QAAQ,GAAGS,KAAX;AACAL,EAAAA,OAAO,GAAGK,KAAV;AACAb,EAAAA,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAaC,KAAb,CAAZ;;AAEA,MAAIF,SAAS,KAAKP,kBAAlB,EAAsC;AACpC;AACD;;AAEDS,EAAAA,KAAK;AACLE,EAAAA,QAAQ,IAAIJ,SAAZ;AACAa,EAAAA,KAAK,GAAG,EAAR;;AAEA,MAAI,CAACf,UAAL,EAAiB;AACf;AACA;AACA;AACA,WAAOI,KAAK,GAAGC,MAAf,EAAuB;AACrBH,MAAAA,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAaC,KAAb,CAAZ;;AAEA,UAAI,CAACzB,UAAU,CAACuB,SAAD,CAAf,EAA4B;AAC1B;AACD;;AAEDa,MAAAA,KAAK,IAAIb,SAAT;AACAE,MAAAA,KAAK;AACN;AACF;;AAEDF,EAAAA,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAaC,KAAb,CAAZ;;AAEA,MAAIF,SAAS,KAAKT,iBAAlB,EAAqC;AACnCkB,IAAAA,UAAU,GAAG,EAAb;AACAI,IAAAA,KAAK,IAAIb,SAAT;AACAE,IAAAA,KAAK;;AAEL,WAAOA,KAAK,GAAGC,MAAf,EAAuB;AACrBH,MAAAA,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAaC,KAAb,CAAZ;;AAEA,UAAIF,SAAS,KAAKT,iBAAd,IAAmCS,SAAS,KAAKP,kBAArD,EAAyE;AACvE;AACD;;AAED,UAAIO,SAAS,KAAKR,SAAlB,EAA6B;AAC3BiB,QAAAA,UAAU,IAAIjB,SAAd;AACAQ,QAAAA,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAa,EAAEC,KAAf,CAAZ;AACD;;AAEDO,MAAAA,UAAU,IAAIT,SAAd;AACAE,MAAAA,KAAK;AACN;;AAEDF,IAAAA,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAaC,KAAb,CAAZ;;AAEA,QAAIF,SAAS,KAAKP,kBAAlB,EAAsC;AACpCc,MAAAA,aAAa,GAAGE,UAAU,GAAGpB,IAAH,GAAUD,SAApC;AACAyB,MAAAA,KAAK,IAAIJ,UAAU,GAAGT,SAAtB;AACAE,MAAAA,KAAK;AACN,KAJD,MAIO;AACLO,MAAAA,UAAU,GAAG,EAAb;AACD;;AAEDL,IAAAA,QAAQ,IAAIS,KAAZ;AACAA,IAAAA,KAAK,GAAG,EAAR;AACD,GAjCD,MAiCO;AACL,QAAI,CAACL,OAAL,EAAc;AACZ;AACD;;AAEDC,IAAAA,UAAU,GAAGD,OAAb;AACD,GAjIoC,CAmIrC;;;AACA,MAAID,aAAa,KAAKlB,IAAlB,IAA0ByB,SAA9B,EAAyC;AACvC;AACD;;AAEDV,EAAAA,QAAQ,GAAGC,KAAK,GAAGD,QAAnB;;AAEA,MAAIE,IAAI,KAAKrB,IAAT,IAAiBY,IAAI,CAACmB,MAA1B,EAAkC;AAChC,WAAO,IAAP;AACD;AAED;;;AACA,MAAIpB,MAAJ,EAAY;AACV,WAAO,IAAP;AACD;;AAEDc,EAAAA,GAAG,GAAGhB,GAAG,CAACgB,GAAJ,EAAN;AACAA,EAAAA,GAAG,CAACO,MAAJ,IAAcZ,KAAK,CAACF,MAApB;AACAO,EAAAA,GAAG,CAACQ,MAAJ,IAAcb,KAAK,CAACF,MAApB;AACAM,EAAAA,UAAU,GAAGF,aAAa,KAAKlB,IAAlB,GAAyBoB,UAAzB,GAAsCD,OAAnD;AAEAG,EAAAA,IAAI,GAAG;AACLL,IAAAA,IAAI,EAAEA,IAAI,GAAG,WADR;AAELG,IAAAA,UAAU,EAAE7B,SAAS,CAAC6B,UAAD,CAFhB;AAGLU,IAAAA,KAAK,EAAEV,UAHF;AAILF,IAAAA,aAAa,EAAEA;AAJV,GAAP;;AAOA,MAAID,IAAI,KAAKrB,IAAb,EAAmB;AACjB2B,IAAAA,IAAI,GAAGf,IAAI,CAACuB,SAAL,EAAP;AACAT,IAAAA,IAAI,CAACU,QAAL,GAAgBxB,IAAI,CAACyB,cAAL,CAAoBd,OAApB,EAA6BE,GAA7B,CAAhB;AACAE,IAAAA,IAAI;AACL,GAJD,MAIO;AACLD,IAAAA,IAAI,CAACY,GAAL,GAAW1B,IAAI,CAAC2B,MAAL,CAAYC,GAAZ,CAAgB5B,IAAI,CAAC6B,QAAL,CAAclB,OAAd,CAAhB,EAAwCE,GAAxC,KAAgD,IAA3D;AACD;;AAED,SAAOhB,GAAG,CAACU,QAAD,CAAH,CAAcO,IAAd,CAAP;AACD","sourcesContent":["'use strict'\r\n\r\nvar whitespace = require('is-whitespace-character')\r\nvar locate = require('../locate/link')\r\nvar normalize = require('../util/normalize')\r\n\r\nmodule.exports = reference\r\nreference.locator = locate\r\n\r\nvar link = 'link'\r\nvar image = 'image'\r\nvar shortcut = 'shortcut'\r\nvar collapsed = 'collapsed'\r\nvar full = 'full'\r\nvar exclamationMark = '!'\r\nvar leftSquareBracket = '['\r\nvar backslash = '\\\\'\r\nvar rightSquareBracket = ']'\r\n\r\nfunction reference(eat, value, silent) {\r\n  var self = this\r\n  var commonmark = self.options.commonmark\r\n  var character = value.charAt(0)\r\n  var index = 0\r\n  var length = value.length\r\n  var subvalue = ''\r\n  var intro = ''\r\n  var type = link\r\n  var referenceType = shortcut\r\n  var content\r\n  var identifier\r\n  var now\r\n  var node\r\n  var exit\r\n  var queue\r\n  var bracketed\r\n  var depth\r\n\r\n  // Check whether we’re eating an image.\r\n  if (character === exclamationMark) {\r\n    type = image\r\n    intro = character\r\n    character = value.charAt(++index)\r\n  }\r\n\r\n  if (character !== leftSquareBracket) {\r\n    return\r\n  }\r\n\r\n  index++\r\n  intro += character\r\n  queue = ''\r\n\r\n  // Eat the text.\r\n  depth = 0\r\n\r\n  while (index < length) {\r\n    character = value.charAt(index)\r\n\r\n    if (character === leftSquareBracket) {\r\n      bracketed = true\r\n      depth++\r\n    } else if (character === rightSquareBracket) {\r\n      if (!depth) {\r\n        break\r\n      }\r\n\r\n      depth--\r\n    }\r\n\r\n    if (character === backslash) {\r\n      queue += backslash\r\n      character = value.charAt(++index)\r\n    }\r\n\r\n    queue += character\r\n    index++\r\n  }\r\n\r\n  subvalue = queue\r\n  content = queue\r\n  character = value.charAt(index)\r\n\r\n  if (character !== rightSquareBracket) {\r\n    return\r\n  }\r\n\r\n  index++\r\n  subvalue += character\r\n  queue = ''\r\n\r\n  if (!commonmark) {\r\n    // The original markdown syntax definition explicitly allows for whitespace\r\n    // between the link text and link label; commonmark departs from this, in\r\n    // part to improve support for shortcut reference links\r\n    while (index < length) {\r\n      character = value.charAt(index)\r\n\r\n      if (!whitespace(character)) {\r\n        break\r\n      }\r\n\r\n      queue += character\r\n      index++\r\n    }\r\n  }\r\n\r\n  character = value.charAt(index)\r\n\r\n  if (character === leftSquareBracket) {\r\n    identifier = ''\r\n    queue += character\r\n    index++\r\n\r\n    while (index < length) {\r\n      character = value.charAt(index)\r\n\r\n      if (character === leftSquareBracket || character === rightSquareBracket) {\r\n        break\r\n      }\r\n\r\n      if (character === backslash) {\r\n        identifier += backslash\r\n        character = value.charAt(++index)\r\n      }\r\n\r\n      identifier += character\r\n      index++\r\n    }\r\n\r\n    character = value.charAt(index)\r\n\r\n    if (character === rightSquareBracket) {\r\n      referenceType = identifier ? full : collapsed\r\n      queue += identifier + character\r\n      index++\r\n    } else {\r\n      identifier = ''\r\n    }\r\n\r\n    subvalue += queue\r\n    queue = ''\r\n  } else {\r\n    if (!content) {\r\n      return\r\n    }\r\n\r\n    identifier = content\r\n  }\r\n\r\n  // Brackets cannot be inside the identifier.\r\n  if (referenceType !== full && bracketed) {\r\n    return\r\n  }\r\n\r\n  subvalue = intro + subvalue\r\n\r\n  if (type === link && self.inLink) {\r\n    return null\r\n  }\r\n\r\n  /* istanbul ignore if - never used (yet) */\r\n  if (silent) {\r\n    return true\r\n  }\r\n\r\n  now = eat.now()\r\n  now.column += intro.length\r\n  now.offset += intro.length\r\n  identifier = referenceType === full ? identifier : content\r\n\r\n  node = {\r\n    type: type + 'Reference',\r\n    identifier: normalize(identifier),\r\n    label: identifier,\r\n    referenceType: referenceType\r\n  }\r\n\r\n  if (type === link) {\r\n    exit = self.enterLink()\r\n    node.children = self.tokenizeInline(content, now)\r\n    exit()\r\n  } else {\r\n    node.alt = self.decode.raw(self.unescape(content), now) || null\r\n  }\r\n\r\n  return eat(subvalue)(node)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}