{"ast":null,"code":"'use strict';\n\nvar trim = require('trim');\n\nvar repeat = require('repeat-string');\n\nvar getIndent = require('./get-indentation');\n\nmodule.exports = indentation;\nvar lineFeed = '\\n';\nvar space = ' ';\nvar exclamationMark = '!'; // Remove the minimum indent from every line in `value`.  Supports both tab,\n// spaced, and mixed indentation (as well as possible).\n\nfunction indentation(value, maximum) {\n  var values = value.split(lineFeed);\n  var position = values.length + 1;\n  var minIndent = Infinity;\n  var matrix = [];\n  var index;\n  var indentation;\n  var stops;\n  values.unshift(repeat(space, maximum) + exclamationMark);\n\n  while (position--) {\n    indentation = getIndent(values[position]);\n    matrix[position] = indentation.stops;\n\n    if (trim(values[position]).length === 0) {\n      continue;\n    }\n\n    if (indentation.indent) {\n      if (indentation.indent > 0 && indentation.indent < minIndent) {\n        minIndent = indentation.indent;\n      }\n    } else {\n      minIndent = Infinity;\n      break;\n    }\n  }\n\n  if (minIndent !== Infinity) {\n    position = values.length;\n\n    while (position--) {\n      stops = matrix[position];\n      index = minIndent;\n\n      while (index && !(index in stops)) {\n        index--;\n      }\n\n      values[position] = values[position].slice(stops[index] + 1);\n    }\n  }\n\n  values.shift();\n  return values.join(lineFeed);\n}","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/remark-parse/lib/util/remove-indentation.js"],"names":["trim","require","repeat","getIndent","module","exports","indentation","lineFeed","space","exclamationMark","value","maximum","values","split","position","length","minIndent","Infinity","matrix","index","stops","unshift","indent","slice","shift","join"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAApB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,mBAAD,CAAvB;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,WAAjB;AAEA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,eAAe,GAAG,GAAtB,C,CAEA;AACA;;AACA,SAASH,WAAT,CAAqBI,KAArB,EAA4BC,OAA5B,EAAqC;AACnC,MAAIC,MAAM,GAAGF,KAAK,CAACG,KAAN,CAAYN,QAAZ,CAAb;AACA,MAAIO,QAAQ,GAAGF,MAAM,CAACG,MAAP,GAAgB,CAA/B;AACA,MAAIC,SAAS,GAAGC,QAAhB;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAJ;AACA,MAAIb,WAAJ;AACA,MAAIc,KAAJ;AAEAR,EAAAA,MAAM,CAACS,OAAP,CAAenB,MAAM,CAACM,KAAD,EAAQG,OAAR,CAAN,GAAyBF,eAAxC;;AAEA,SAAOK,QAAQ,EAAf,EAAmB;AACjBR,IAAAA,WAAW,GAAGH,SAAS,CAACS,MAAM,CAACE,QAAD,CAAP,CAAvB;AAEAI,IAAAA,MAAM,CAACJ,QAAD,CAAN,GAAmBR,WAAW,CAACc,KAA/B;;AAEA,QAAIpB,IAAI,CAACY,MAAM,CAACE,QAAD,CAAP,CAAJ,CAAuBC,MAAvB,KAAkC,CAAtC,EAAyC;AACvC;AACD;;AAED,QAAIT,WAAW,CAACgB,MAAhB,EAAwB;AACtB,UAAIhB,WAAW,CAACgB,MAAZ,GAAqB,CAArB,IAA0BhB,WAAW,CAACgB,MAAZ,GAAqBN,SAAnD,EAA8D;AAC5DA,QAAAA,SAAS,GAAGV,WAAW,CAACgB,MAAxB;AACD;AACF,KAJD,MAIO;AACLN,MAAAA,SAAS,GAAGC,QAAZ;AAEA;AACD;AACF;;AAED,MAAID,SAAS,KAAKC,QAAlB,EAA4B;AAC1BH,IAAAA,QAAQ,GAAGF,MAAM,CAACG,MAAlB;;AAEA,WAAOD,QAAQ,EAAf,EAAmB;AACjBM,MAAAA,KAAK,GAAGF,MAAM,CAACJ,QAAD,CAAd;AACAK,MAAAA,KAAK,GAAGH,SAAR;;AAEA,aAAOG,KAAK,IAAI,EAAEA,KAAK,IAAIC,KAAX,CAAhB,EAAmC;AACjCD,QAAAA,KAAK;AACN;;AAEDP,MAAAA,MAAM,CAACE,QAAD,CAAN,GAAmBF,MAAM,CAACE,QAAD,CAAN,CAAiBS,KAAjB,CAAuBH,KAAK,CAACD,KAAD,CAAL,GAAe,CAAtC,CAAnB;AACD;AACF;;AAEDP,EAAAA,MAAM,CAACY,KAAP;AAEA,SAAOZ,MAAM,CAACa,IAAP,CAAYlB,QAAZ,CAAP;AACD","sourcesContent":["'use strict'\r\n\r\nvar trim = require('trim')\r\nvar repeat = require('repeat-string')\r\nvar getIndent = require('./get-indentation')\r\n\r\nmodule.exports = indentation\r\n\r\nvar lineFeed = '\\n'\r\nvar space = ' '\r\nvar exclamationMark = '!'\r\n\r\n// Remove the minimum indent from every line in `value`.  Supports both tab,\r\n// spaced, and mixed indentation (as well as possible).\r\nfunction indentation(value, maximum) {\r\n  var values = value.split(lineFeed)\r\n  var position = values.length + 1\r\n  var minIndent = Infinity\r\n  var matrix = []\r\n  var index\r\n  var indentation\r\n  var stops\r\n\r\n  values.unshift(repeat(space, maximum) + exclamationMark)\r\n\r\n  while (position--) {\r\n    indentation = getIndent(values[position])\r\n\r\n    matrix[position] = indentation.stops\r\n\r\n    if (trim(values[position]).length === 0) {\r\n      continue\r\n    }\r\n\r\n    if (indentation.indent) {\r\n      if (indentation.indent > 0 && indentation.indent < minIndent) {\r\n        minIndent = indentation.indent\r\n      }\r\n    } else {\r\n      minIndent = Infinity\r\n\r\n      break\r\n    }\r\n  }\r\n\r\n  if (minIndent !== Infinity) {\r\n    position = values.length\r\n\r\n    while (position--) {\r\n      stops = matrix[position]\r\n      index = minIndent\r\n\r\n      while (index && !(index in stops)) {\r\n        index--\r\n      }\r\n\r\n      values[position] = values[position].slice(stops[index] + 1)\r\n    }\r\n  }\r\n\r\n  values.shift()\r\n\r\n  return values.join(lineFeed)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}