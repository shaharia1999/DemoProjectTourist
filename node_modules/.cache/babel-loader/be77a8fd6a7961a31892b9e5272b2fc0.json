{"ast":null,"code":"'use strict';\n\nmodule.exports = toHast;\n\nvar u = require('unist-builder');\n\nvar visit = require('unist-util-visit');\n\nvar position = require('unist-util-position');\n\nvar generated = require('unist-util-generated');\n\nvar definitions = require('mdast-util-definitions');\n\nvar one = require('./one');\n\nvar footer = require('./footer');\n\nvar handlers = require('./handlers');\n\nvar own = {}.hasOwnProperty;\nvar deprecationWarningIssued = false; // Factory to transform.\n\nfunction factory(tree, options) {\n  var settings = options || {}; // Issue a warning if the deprecated tag 'allowDangerousHTML' is used\n\n  if (settings.allowDangerousHTML !== undefined && !deprecationWarningIssued) {\n    deprecationWarningIssued = true;\n    console.warn('mdast-util-to-hast: deprecation: `allowDangerousHTML` is nonstandard, use `allowDangerousHtml` instead');\n  }\n\n  var dangerous = settings.allowDangerousHtml || settings.allowDangerousHTML;\n  var footnoteById = {};\n  h.dangerous = dangerous;\n  h.definition = definitions(tree, settings);\n  h.footnoteById = footnoteById;\n  h.footnoteOrder = [];\n  h.augment = augment;\n  h.handlers = Object.assign({}, handlers, settings.handlers);\n  h.unknownHandler = settings.unknownHandler;\n  visit(tree, 'footnoteDefinition', onfootnotedefinition);\n  return h; // Finalise the created `right`, a hast node, from `left`, an mdast node.\n\n  function augment(left, right) {\n    var data;\n    var ctx; // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n\n    if (left && 'data' in left) {\n      data = left.data;\n\n      if (right.type === 'element' && data.hName) {\n        right.tagName = data.hName;\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = Object.assign({}, right.properties, data.hProperties);\n      }\n\n      if (right.children && data.hChildren) {\n        right.children = data.hChildren;\n      }\n    }\n\n    ctx = left && left.position ? left : {\n      position: left\n    };\n\n    if (!generated(ctx)) {\n      right.position = {\n        start: position.start(ctx),\n        end: position.end(ctx)\n      };\n    }\n\n    return right;\n  } // Create an element for `node`.\n\n\n  function h(node, tagName, props, children) {\n    if ((children === undefined || children === null) && typeof props === 'object' && 'length' in props) {\n      children = props;\n      props = {};\n    }\n\n    return augment(node, {\n      type: 'element',\n      tagName: tagName,\n      properties: props || {},\n      children: children || []\n    });\n  }\n\n  function onfootnotedefinition(definition) {\n    var id = String(definition.identifier).toUpperCase(); // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8d48e57/index.js#L26>.\n\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition;\n    }\n  }\n} // Transform `tree`, which is an mdast node, to a hast node.\n\n\nfunction toHast(tree, options) {\n  var h = factory(tree, options);\n  var node = one(h, tree);\n  var foot = footer(h);\n\n  if (foot) {\n    node.children = node.children.concat(u('text', '\\n'), foot);\n  }\n\n  return node;\n}","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/mdast-util-to-hast/lib/index.js"],"names":["module","exports","toHast","u","require","visit","position","generated","definitions","one","footer","handlers","own","hasOwnProperty","deprecationWarningIssued","factory","tree","options","settings","allowDangerousHTML","undefined","console","warn","dangerous","allowDangerousHtml","footnoteById","h","definition","footnoteOrder","augment","Object","assign","unknownHandler","onfootnotedefinition","left","right","data","ctx","type","hName","tagName","hProperties","properties","children","hChildren","start","end","node","props","id","String","identifier","toUpperCase","call","foot","concat"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nmodule.exports = toHast\r\n\r\nvar u = require('unist-builder')\r\nvar visit = require('unist-util-visit')\r\nvar position = require('unist-util-position')\r\nvar generated = require('unist-util-generated')\r\nvar definitions = require('mdast-util-definitions')\r\nvar one = require('./one')\r\nvar footer = require('./footer')\r\nvar handlers = require('./handlers')\r\n\r\nvar own = {}.hasOwnProperty\r\n\r\nvar deprecationWarningIssued = false\r\n\r\n// Factory to transform.\r\nfunction factory(tree, options) {\r\n  var settings = options || {}\r\n\r\n  // Issue a warning if the deprecated tag 'allowDangerousHTML' is used\r\n  if (settings.allowDangerousHTML !== undefined && !deprecationWarningIssued) {\r\n    deprecationWarningIssued = true\r\n    console.warn(\r\n      'mdast-util-to-hast: deprecation: `allowDangerousHTML` is nonstandard, use `allowDangerousHtml` instead'\r\n    )\r\n  }\r\n\r\n  var dangerous = settings.allowDangerousHtml || settings.allowDangerousHTML\r\n  var footnoteById = {}\r\n\r\n  h.dangerous = dangerous\r\n  h.definition = definitions(tree, settings)\r\n  h.footnoteById = footnoteById\r\n  h.footnoteOrder = []\r\n  h.augment = augment\r\n  h.handlers = Object.assign({}, handlers, settings.handlers)\r\n  h.unknownHandler = settings.unknownHandler\r\n\r\n  visit(tree, 'footnoteDefinition', onfootnotedefinition)\r\n\r\n  return h\r\n\r\n  // Finalise the created `right`, a hast node, from `left`, an mdast node.\r\n  function augment(left, right) {\r\n    var data\r\n    var ctx\r\n\r\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\r\n    if (left && 'data' in left) {\r\n      data = left.data\r\n\r\n      if (right.type === 'element' && data.hName) {\r\n        right.tagName = data.hName\r\n      }\r\n\r\n      if (right.type === 'element' && data.hProperties) {\r\n        right.properties = Object.assign({}, right.properties, data.hProperties)\r\n      }\r\n\r\n      if (right.children && data.hChildren) {\r\n        right.children = data.hChildren\r\n      }\r\n    }\r\n\r\n    ctx = left && left.position ? left : {position: left}\r\n\r\n    if (!generated(ctx)) {\r\n      right.position = {\r\n        start: position.start(ctx),\r\n        end: position.end(ctx)\r\n      }\r\n    }\r\n\r\n    return right\r\n  }\r\n\r\n  // Create an element for `node`.\r\n  function h(node, tagName, props, children) {\r\n    if (\r\n      (children === undefined || children === null) &&\r\n      typeof props === 'object' &&\r\n      'length' in props\r\n    ) {\r\n      children = props\r\n      props = {}\r\n    }\r\n\r\n    return augment(node, {\r\n      type: 'element',\r\n      tagName: tagName,\r\n      properties: props || {},\r\n      children: children || []\r\n    })\r\n  }\r\n\r\n  function onfootnotedefinition(definition) {\r\n    var id = String(definition.identifier).toUpperCase()\r\n\r\n    // Mimick CM behavior of link definitions.\r\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8d48e57/index.js#L26>.\r\n    if (!own.call(footnoteById, id)) {\r\n      footnoteById[id] = definition\r\n    }\r\n  }\r\n}\r\n\r\n// Transform `tree`, which is an mdast node, to a hast node.\r\nfunction toHast(tree, options) {\r\n  var h = factory(tree, options)\r\n  var node = one(h, tree)\r\n  var foot = footer(h)\r\n\r\n  if (foot) {\r\n    node.children = node.children.concat(u('text', '\\n'), foot)\r\n  }\r\n\r\n  return node\r\n}\r\n"]},"metadata":{},"sourceType":"script"}