{"ast":null,"code":"var _jsxFileName = \"D:\\\\PorzotokFrontend\\\\src\\\\component\\\\login\\\\ForgotPasswordSet.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Button, Col, Container, Form, Row } from \"react-bootstrap\";\nimport Porzotok from \"../../asset/images/Porzotok.png\";\nimport { Redirect } from \"react-router-dom\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport axios from \"axios\";\nimport ApiURL from \"../../api/ApiURL\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ForgotPasswordSet extends Component {\n  constructor() {\n    super();\n\n    this.NewPasswordOnChange = event => {\n      let NewPassword = event.target.value;\n      this.setState({\n        NewPassword: NewPassword\n      });\n    };\n\n    this.NewConfirmPasswordOnChange = event => {\n      let NewConfirmPassword = event.target.value;\n      this.setState({\n        NewConfirmPassword: NewConfirmPassword\n      });\n    };\n\n    this.onPasswordSetFromSubmit = event => {\n      let UserID = this.state.UserID;\n      let NewPassword = this.state.NewPassword;\n      let NewConfirmPassword = this.state.NewConfirmPassword;\n      let PasswordBtn = document.getElementById('PasswordBtn');\n      let ConfirmPasswordForm = document.getElementById('ConfirmPasswordForm');\n\n      if (NewPassword.length === 0) {\n        toast.error('New Password is Required !', {\n          position: \"top-center\",\n          theme: \"colored\",\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined\n        });\n      } else if (NewPassword !== NewConfirmPassword) {\n        toast.error('Confirm Password Not Match !', {\n          position: \"top-center\",\n          theme: \"colored\",\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined\n        });\n      } else {\n        PasswordBtn.innerHTML = \"Verifying...\";\n        let MyFormData = new FormData(); // MyFormData.append(\"user_id\", UserID);\n\n        MyFormData.append(\"new_password\", NewPassword);\n        axios.put(ApiURL.ResetConfirmPasswordSet + UserID + '/', MyFormData).then(response => {\n          if (response.data.error === false) {\n            toast.success('New Password Set Successfully', {\n              position: \"top-center\",\n              theme: \"colored\",\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n              autoClose: 3000\n            });\n            this.setState({\n              userRedirect: true\n            });\n            ConfirmPasswordForm.reset();\n          } else {\n            toast.success(response.data.message, {\n              position: \"top-center\",\n              theme: \"colored\",\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n              autoClose: 3000\n            });\n            PasswordBtn.innerHTML = \"SET PASSWORD\";\n            this.setState({\n              userRedirect: false\n            });\n          }\n        }).catch(error => {\n          toast.error('Verification not Successfully', {\n            position: \"top-center\",\n            theme: \"colored\",\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            autoClose: 3000\n          });\n          PasswordBtn.innerHTML = \"SET PASSWORD\";\n          this.setState({\n            userRedirect: false\n          });\n        });\n      }\n\n      event.preventDefault();\n    };\n\n    this.state = {\n      UserID: sessionStorage.getItem('UserID'),\n      userRedirect: false,\n      NewPassword: \"\",\n      NewConfirmPassword: \"\"\n    };\n  }\n\n  onUserRedirect() {\n    if (this.state.userRedirect === true) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        className: \"p-5 d-flex justify-content-center\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          className: \"LoginCard shadow-sm\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            xl: 10,\n            lg: 10,\n            md: 10,\n            sm: 12,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              id: \"ConfirmPasswordForm\",\n              onSubmit: this.onPasswordSetFromSubmit,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"LoginCardPorzotokImg mt-4\",\n                src: Porzotok,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  onChange: this.NewPasswordOnChange,\n                  type: \"Password\",\n                  className: \"form-control placeholder-text\",\n                  placeholder: \"Enter new Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  onChange: this.NewConfirmPasswordOnChange,\n                  type: \"Password\",\n                  className: \"form-control placeholder-text\",\n                  placeholder: \"Enter Confirm Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                id: \"PasswordBtn\",\n                type: \"submit\",\n                className: \"btn SendBtnColorText mb-5 btn-block\",\n                children: \"SET PASSWORD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), this.onUserRedirect()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ForgotPasswordSet;","map":{"version":3,"sources":["D:/PorzotokFrontend/src/component/login/ForgotPasswordSet.js"],"names":["React","Component","Fragment","Button","Col","Container","Form","Row","Porzotok","Redirect","toast","ToastContainer","axios","ApiURL","ForgotPasswordSet","constructor","NewPasswordOnChange","event","NewPassword","target","value","setState","NewConfirmPasswordOnChange","NewConfirmPassword","onPasswordSetFromSubmit","UserID","state","PasswordBtn","document","getElementById","ConfirmPasswordForm","length","error","position","theme","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","innerHTML","MyFormData","FormData","append","put","ResetConfirmPasswordSet","then","response","data","success","userRedirect","reset","message","catch","preventDefault","sessionStorage","getItem","onUserRedirect","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,MAAR,EAAgBC,GAAhB,EAAqBC,SAArB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAgD,iBAAhD;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,KAAR,EAAeC,cAAf,QAAoC,gBAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;;AAEA,MAAMC,iBAAN,SAAgCb,SAAhC,CAA0C;AACtCc,EAAAA,WAAW,GAAG;AACV;;AADU,SAkBdC,mBAlBc,GAkBOC,KAAD,IAAS;AACzB,UAAIC,WAAW,GAACD,KAAK,CAACE,MAAN,CAAaC,KAA7B;AACA,WAAKC,QAAL,CAAe;AAACH,QAAAA,WAAW,EAACA;AAAb,OAAf;AACH,KArBa;;AAAA,SAuBdI,0BAvBc,GAuBcL,KAAD,IAAS;AAChC,UAAIM,kBAAkB,GAACN,KAAK,CAACE,MAAN,CAAaC,KAApC;AACA,WAAKC,QAAL,CAAe;AAACE,QAAAA,kBAAkB,EAACA;AAApB,OAAf;AACH,KA1Ba;;AAAA,SA4BdC,uBA5Bc,GA4BWP,KAAD,IAAU;AAC9B,UAAIQ,MAAM,GAAG,KAAKC,KAAL,CAAWD,MAAxB;AACA,UAAIP,WAAW,GAAG,KAAKQ,KAAL,CAAWR,WAA7B;AACA,UAAIK,kBAAkB,GAAG,KAAKG,KAAL,CAAWH,kBAApC;AACA,UAAII,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAlB;AACA,UAAIC,mBAAmB,GAAGF,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,CAA1B;;AAEA,UAAIX,WAAW,CAACa,MAAZ,KAAuB,CAA3B,EAA8B;AAC1BrB,QAAAA,KAAK,CAACsB,KAAN,CAAY,4BAAZ,EAA0C;AACtCC,UAAAA,QAAQ,EAAE,YAD4B;AAEtCC,UAAAA,KAAK,EAAE,SAF+B;AAGtCC,UAAAA,SAAS,EAAE,IAH2B;AAItCC,UAAAA,eAAe,EAAE,KAJqB;AAKtCC,UAAAA,YAAY,EAAE,IALwB;AAMtCC,UAAAA,YAAY,EAAE,IANwB;AAOtCC,UAAAA,SAAS,EAAE,IAP2B;AAQtCC,UAAAA,QAAQ,EAAEC;AAR4B,SAA1C;AAUH,OAXD,MAYK,IAAIvB,WAAW,KAAGK,kBAAlB,EAAsC;AACvCb,QAAAA,KAAK,CAACsB,KAAN,CAAY,8BAAZ,EAA4C;AACxCC,UAAAA,QAAQ,EAAE,YAD8B;AAExCC,UAAAA,KAAK,EAAE,SAFiC;AAGxCC,UAAAA,SAAS,EAAE,IAH6B;AAIxCC,UAAAA,eAAe,EAAE,KAJuB;AAKxCC,UAAAA,YAAY,EAAE,IAL0B;AAMxCC,UAAAA,YAAY,EAAE,IAN0B;AAOxCC,UAAAA,SAAS,EAAE,IAP6B;AAQxCC,UAAAA,QAAQ,EAAEC;AAR8B,SAA5C;AAUH,OAXI,MAYA;AACDd,QAAAA,WAAW,CAACe,SAAZ,GAAwB,cAAxB;AACA,YAAIC,UAAU,GAAG,IAAIC,QAAJ,EAAjB,CAFC,CAGD;;AACAD,QAAAA,UAAU,CAACE,MAAX,CAAkB,cAAlB,EAAkC3B,WAAlC;AAEAN,QAAAA,KAAK,CAACkC,GAAN,CAAUjC,MAAM,CAACkC,uBAAP,GAA+BtB,MAA/B,GAAsC,GAAhD,EAAoDkB,UAApD,EAAgEK,IAAhE,CAAsEC,QAAD,IAAa;AAC9E,cAAIA,QAAQ,CAACC,IAAT,CAAclB,KAAd,KAAsB,KAA1B,EAAiC;AAC7BtB,YAAAA,KAAK,CAACyC,OAAN,CAAc,+BAAd,EAA+C;AAC3ClB,cAAAA,QAAQ,EAAE,YADiC;AAE3CC,cAAAA,KAAK,EAAE,SAFoC;AAG3CE,cAAAA,eAAe,EAAE,KAH0B;AAI3CC,cAAAA,YAAY,EAAE,IAJ6B;AAK3CC,cAAAA,YAAY,EAAE,IAL6B;AAM3CC,cAAAA,SAAS,EAAE,IANgC;AAO3CC,cAAAA,QAAQ,EAAEC,SAPiC;AAQ3CN,cAAAA,SAAS,EAAE;AARgC,aAA/C;AAUA,iBAAKd,QAAL,CAAc;AAAC+B,cAAAA,YAAY,EAAC;AAAd,aAAd;AACAtB,YAAAA,mBAAmB,CAACuB,KAApB;AACH,WAbD,MAcI;AACA3C,YAAAA,KAAK,CAACyC,OAAN,CAAcF,QAAQ,CAACC,IAAT,CAAcI,OAA5B,EAAqC;AACjCrB,cAAAA,QAAQ,EAAE,YADuB;AAEjCC,cAAAA,KAAK,EAAE,SAF0B;AAGjCE,cAAAA,eAAe,EAAE,KAHgB;AAIjCC,cAAAA,YAAY,EAAE,IAJmB;AAKjCC,cAAAA,YAAY,EAAE,IALmB;AAMjCC,cAAAA,SAAS,EAAE,IANsB;AAOjCC,cAAAA,QAAQ,EAAEC,SAPuB;AAQjCN,cAAAA,SAAS,EAAE;AARsB,aAArC;AAUAR,YAAAA,WAAW,CAACe,SAAZ,GAAwB,cAAxB;AACA,iBAAKrB,QAAL,CAAc;AAAC+B,cAAAA,YAAY,EAAC;AAAd,aAAd;AACH;AACJ,SA7BD,EA6BGG,KA7BH,CA6BUvB,KAAD,IAAU;AACftB,UAAAA,KAAK,CAACsB,KAAN,CAAY,+BAAZ,EAA6C;AACzCC,YAAAA,QAAQ,EAAE,YAD+B;AAEzCC,YAAAA,KAAK,EAAE,SAFkC;AAGzCE,YAAAA,eAAe,EAAE,KAHwB;AAIzCC,YAAAA,YAAY,EAAE,IAJ2B;AAKzCC,YAAAA,YAAY,EAAE,IAL2B;AAMzCC,YAAAA,SAAS,EAAE,IAN8B;AAOzCC,YAAAA,QAAQ,EAAEC,SAP+B;AAQzCN,YAAAA,SAAS,EAAE;AAR8B,WAA7C;AAUAR,UAAAA,WAAW,CAACe,SAAZ,GAAwB,cAAxB;AACA,eAAKrB,QAAL,CAAc;AAAC+B,YAAAA,YAAY,EAAC;AAAd,WAAd;AACH,SA1CD;AA2CH;;AACDnC,MAAAA,KAAK,CAACuC,cAAN;AACH,KA9Ga;;AAEV,SAAK9B,KAAL,GAAW;AACPD,MAAAA,MAAM,EAAEgC,cAAc,CAACC,OAAf,CAAuB,QAAvB,CADD;AAEPN,MAAAA,YAAY,EAAC,KAFN;AAGPlC,MAAAA,WAAW,EAAC,EAHL;AAIPK,MAAAA,kBAAkB,EAAC;AAJZ,KAAX;AAMH;;AAEDoC,EAAAA,cAAc,GAAE;AACZ,QAAG,KAAKjC,KAAL,CAAW0B,YAAX,KAA0B,IAA7B,EAAkC;AAC9B,0BACI,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH;AACJ;;AAgGDQ,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,QAAD;AAAA,8BACI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,mCAArB;AAAA,gCACI,QAAC,GAAD;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAA,iCACI,QAAC,GAAD;AAAK,YAAA,EAAE,EAAE,EAAT;AAAa,YAAA,EAAE,EAAE,EAAjB;AAAqB,YAAA,EAAE,EAAE,EAAzB;AAA6B,YAAA,EAAE,EAAE,EAAjC;AAAqC,YAAA,EAAE,EAAE,EAAzC;AAAA,mCACI,QAAC,IAAD;AAAM,cAAA,EAAE,EAAC,qBAAT;AAA+B,cAAA,QAAQ,EAAE,KAAKpC,uBAA9C;AAAA,sCACI;AAAK,gBAAA,SAAS,EAAC,2BAAf;AAA2C,gBAAA,GAAG,EAAEhB,QAAhD;AAA0D,gBAAA,GAAG,EAAC;AAA9D;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAK,gBAAA,SAAS,EAAC,YAAf;AAAA,uCACI;AAAO,kBAAA,QAAQ,EAAE,KAAKQ,mBAAtB;AAA2C,kBAAA,IAAI,EAAC,UAAhD;AAA2D,kBAAA,SAAS,EAAC,+BAArE;AAAqG,kBAAA,WAAW,EAAC;AAAjH;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAKI;AAAK,gBAAA,SAAS,EAAC,YAAf;AAAA,uCACI;AAAO,kBAAA,QAAQ,EAAE,KAAKM,0BAAtB;AAAkD,kBAAA,IAAI,EAAC,UAAvD;AAAkE,kBAAA,SAAS,EAAC,+BAA5E;AAA4G,kBAAA,WAAW,EAAC;AAAxH;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBALJ,eAQI,QAAC,MAAD;AAAQ,gBAAA,EAAE,EAAC,aAAX;AAAyB,gBAAA,IAAI,EAAC,QAA9B;AAAuC,gBAAA,SAAS,EAAC,qCAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAeI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,gBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAkBK,KAAKqC,cAAL,EAlBL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAsBH;;AAxIqC;;AA2I1C,eAAe7C,iBAAf","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport Porzotok from \"../../asset/images/Porzotok.png\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {toast, ToastContainer} from \"react-toastify\";\r\nimport axios from \"axios\";\r\nimport ApiURL from \"../../api/ApiURL\";\r\n\r\nclass ForgotPasswordSet extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state={\r\n            UserID: sessionStorage.getItem('UserID'),\r\n            userRedirect:false,\r\n            NewPassword:\"\",\r\n            NewConfirmPassword:\"\",\r\n        }\r\n    }\r\n\r\n    onUserRedirect(){\r\n        if(this.state.userRedirect===true){\r\n            return(\r\n                <Redirect to=\"/\"/>\r\n            )\r\n        }\r\n    }\r\n\r\n    NewPasswordOnChange=(event)=>{\r\n        let NewPassword=event.target.value;\r\n        this.setState(({NewPassword:NewPassword}));\r\n    }\r\n\r\n    NewConfirmPasswordOnChange=(event)=>{\r\n        let NewConfirmPassword=event.target.value;\r\n        this.setState(({NewConfirmPassword:NewConfirmPassword}));\r\n    }\r\n\r\n    onPasswordSetFromSubmit=(event)=> {\r\n        let UserID = this.state.UserID;\r\n        let NewPassword = this.state.NewPassword;\r\n        let NewConfirmPassword = this.state.NewConfirmPassword;\r\n        let PasswordBtn = document.getElementById('PasswordBtn');\r\n        let ConfirmPasswordForm = document.getElementById('ConfirmPasswordForm');\r\n\r\n        if (NewPassword.length === 0) {\r\n            toast.error('New Password is Required !', {\r\n                position: \"top-center\",\r\n                theme: \"colored\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        }\r\n        else if (NewPassword!==NewConfirmPassword) {\r\n            toast.error('Confirm Password Not Match !', {\r\n                position: \"top-center\",\r\n                theme: \"colored\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        }\r\n        else {\r\n            PasswordBtn.innerHTML = \"Verifying...\";\r\n            let MyFormData = new FormData();\r\n            // MyFormData.append(\"user_id\", UserID);\r\n            MyFormData.append(\"new_password\", NewPassword);\r\n\r\n            axios.put(ApiURL.ResetConfirmPasswordSet+UserID+'/',MyFormData).then((response)=> {\r\n                if (response.data.error===false) {\r\n                    toast.success('New Password Set Successfully', {\r\n                        position: \"top-center\",\r\n                        theme: \"colored\",\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        autoClose: 3000,\r\n                    });\r\n                    this.setState({userRedirect:true});\r\n                    ConfirmPasswordForm.reset();\r\n                }\r\n                else{\r\n                    toast.success(response.data.message, {\r\n                        position: \"top-center\",\r\n                        theme: \"colored\",\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        autoClose: 3000,\r\n                    });\r\n                    PasswordBtn.innerHTML = \"SET PASSWORD\";\r\n                    this.setState({userRedirect:false});\r\n                }\r\n            }).catch((error)=> {\r\n                toast.error('Verification not Successfully', {\r\n                    position: \"top-center\",\r\n                    theme: \"colored\",\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    autoClose: 3000,\r\n                });\r\n                PasswordBtn.innerHTML = \"SET PASSWORD\";\r\n                this.setState({userRedirect:false});\r\n            })\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Container className=\"p-5 d-flex justify-content-center\">\r\n                    <Row className=\"LoginCard shadow-sm\">\r\n                        <Col xl={10} lg={10} md={10} sm={12} xs={12}>\r\n                            <Form id=\"ConfirmPasswordForm\" onSubmit={this.onPasswordSetFromSubmit}>\r\n                                <img className=\"LoginCardPorzotokImg mt-4\" src={Porzotok} alt=\"\"/>\r\n                                <div className=\"form-group\">\r\n                                    <input onChange={this.NewPasswordOnChange} type=\"Password\" className=\"form-control placeholder-text\" placeholder=\"Enter new Password\"/>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input onChange={this.NewConfirmPasswordOnChange} type=\"Password\" className=\"form-control placeholder-text\" placeholder=\"Enter Confirm Password\"/>\r\n                                </div>\r\n                                <Button id=\"PasswordBtn\" type=\"submit\" className=\"btn SendBtnColorText mb-5 btn-block\">SET PASSWORD</Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                    <ToastContainer/>\r\n                </Container>\r\n                {this.onUserRedirect()}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ForgotPasswordSet;"]},"metadata":{},"sourceType":"module"}