{"ast":null,"code":"/*\r\n Language: G-code (ISO 6983)\r\n Contributors: Adam Joseph Cook <adam.joseph.cook@gmail.com>\r\n Description: G-code syntax highlighter for Fanuc and other common CNC machine tool controls.\r\n Website: https://www.sis.se/api/document/preview/911952/\r\n */\nfunction gcode(hljs) {\n  const GCODE_IDENT_RE = '[A-Z_][A-Z0-9_.]*';\n  const GCODE_CLOSE_RE = '%';\n  const GCODE_KEYWORDS = {\n    $pattern: GCODE_IDENT_RE,\n    keyword: 'IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT ' + 'EQ LT GT NE GE LE OR XOR'\n  };\n  const GCODE_START = {\n    className: 'meta',\n    begin: '([O])([0-9]+)'\n  };\n  const NUMBER = hljs.inherit(hljs.C_NUMBER_MODE, {\n    begin: '([-+]?((\\\\.\\\\d+)|(\\\\d+)(\\\\.\\\\d*)?))|' + hljs.C_NUMBER_RE\n  });\n  const GCODE_CODE = [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.COMMENT(/\\(/, /\\)/), NUMBER, hljs.inherit(hljs.APOS_STRING_MODE, {\n    illegal: null\n  }), hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    illegal: null\n  }), {\n    className: 'name',\n    begin: '([G])([0-9]+\\\\.?[0-9]?)'\n  }, {\n    className: 'name',\n    begin: '([M])([0-9]+\\\\.?[0-9]?)'\n  }, {\n    className: 'attr',\n    begin: '(VC|VS|#)',\n    end: '(\\\\d+)'\n  }, {\n    className: 'attr',\n    begin: '(VZOFX|VZOFY|VZOFZ)'\n  }, {\n    className: 'built_in',\n    begin: '(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\\\[)',\n    contains: [NUMBER],\n    end: '\\\\]'\n  }, {\n    className: 'symbol',\n    variants: [{\n      begin: 'N',\n      end: '\\\\d+',\n      illegal: '\\\\W'\n    }]\n  }];\n  return {\n    name: 'G-code (ISO 6983)',\n    aliases: ['nc'],\n    // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.\n    // However, most prefer all uppercase and uppercase is customary.\n    case_insensitive: true,\n    keywords: GCODE_KEYWORDS,\n    contains: [{\n      className: 'meta',\n      begin: GCODE_CLOSE_RE\n    }, GCODE_START].concat(GCODE_CODE)\n  };\n}\n\nmodule.exports = gcode;","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/highlight.js/lib/languages/gcode.js"],"names":["gcode","hljs","GCODE_IDENT_RE","GCODE_CLOSE_RE","GCODE_KEYWORDS","$pattern","keyword","GCODE_START","className","begin","NUMBER","inherit","C_NUMBER_MODE","C_NUMBER_RE","GCODE_CODE","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","COMMENT","APOS_STRING_MODE","illegal","QUOTE_STRING_MODE","end","contains","variants","name","aliases","case_insensitive","keywords","concat","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB,QAAMC,cAAc,GAAG,mBAAvB;AACA,QAAMC,cAAc,GAAG,GAAvB;AACA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,QAAQ,EAAEH,cADW;AAErBI,IAAAA,OAAO,EAAE,sEACP;AAHmB,GAAvB;AAKA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,SAAS,EAAE,MADO;AAElBC,IAAAA,KAAK,EAAE;AAFW,GAApB;AAIA,QAAMC,MAAM,GAAGT,IAAI,CAACU,OAAL,CAAaV,IAAI,CAACW,aAAlB,EAAiC;AAC9CH,IAAAA,KAAK,EAAE,yCAAyCR,IAAI,CAACY;AADP,GAAjC,CAAf;AAGA,QAAMC,UAAU,GAAG,CACjBb,IAAI,CAACc,mBADY,EAEjBd,IAAI,CAACe,oBAFY,EAGjBf,IAAI,CAACgB,OAAL,CAAa,IAAb,EAAmB,IAAnB,CAHiB,EAIjBP,MAJiB,EAKjBT,IAAI,CAACU,OAAL,CAAaV,IAAI,CAACiB,gBAAlB,EAAoC;AAClCC,IAAAA,OAAO,EAAE;AADyB,GAApC,CALiB,EAQjBlB,IAAI,CAACU,OAAL,CAAaV,IAAI,CAACmB,iBAAlB,EAAqC;AACnCD,IAAAA,OAAO,EAAE;AAD0B,GAArC,CARiB,EAWjB;AACEX,IAAAA,SAAS,EAAE,MADb;AAEEC,IAAAA,KAAK,EAAE;AAFT,GAXiB,EAejB;AACED,IAAAA,SAAS,EAAE,MADb;AAEEC,IAAAA,KAAK,EAAE;AAFT,GAfiB,EAmBjB;AACED,IAAAA,SAAS,EAAE,MADb;AAEEC,IAAAA,KAAK,EAAE,WAFT;AAGEY,IAAAA,GAAG,EAAE;AAHP,GAnBiB,EAwBjB;AACEb,IAAAA,SAAS,EAAE,MADb;AAEEC,IAAAA,KAAK,EAAE;AAFT,GAxBiB,EA4BjB;AACED,IAAAA,SAAS,EAAE,UADb;AAEEC,IAAAA,KAAK,EAAE,4DAFT;AAGEa,IAAAA,QAAQ,EAAE,CACRZ,MADQ,CAHZ;AAMEW,IAAAA,GAAG,EAAE;AANP,GA5BiB,EAoCjB;AACEb,IAAAA,SAAS,EAAE,QADb;AAEEe,IAAAA,QAAQ,EAAE,CACR;AACEd,MAAAA,KAAK,EAAE,GADT;AAEEY,MAAAA,GAAG,EAAE,MAFP;AAGEF,MAAAA,OAAO,EAAE;AAHX,KADQ;AAFZ,GApCiB,CAAnB;AAgDA,SAAO;AACLK,IAAAA,IAAI,EAAE,mBADD;AAELC,IAAAA,OAAO,EAAE,CAAC,IAAD,CAFJ;AAGL;AACA;AACAC,IAAAA,gBAAgB,EAAE,IALb;AAMLC,IAAAA,QAAQ,EAAEvB,cANL;AAOLkB,IAAAA,QAAQ,EAAE,CACR;AACEd,MAAAA,SAAS,EAAE,MADb;AAEEC,MAAAA,KAAK,EAAEN;AAFT,KADQ,EAKRI,WALQ,EAMRqB,MANQ,CAMDd,UANC;AAPL,GAAP;AAeD;;AAEDe,MAAM,CAACC,OAAP,GAAiB9B,KAAjB","sourcesContent":["/*\r\n Language: G-code (ISO 6983)\r\n Contributors: Adam Joseph Cook <adam.joseph.cook@gmail.com>\r\n Description: G-code syntax highlighter for Fanuc and other common CNC machine tool controls.\r\n Website: https://www.sis.se/api/document/preview/911952/\r\n */\r\n\r\nfunction gcode(hljs) {\r\n  const GCODE_IDENT_RE = '[A-Z_][A-Z0-9_.]*';\r\n  const GCODE_CLOSE_RE = '%';\r\n  const GCODE_KEYWORDS = {\r\n    $pattern: GCODE_IDENT_RE,\r\n    keyword: 'IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT ' +\r\n      'EQ LT GT NE GE LE OR XOR'\r\n  };\r\n  const GCODE_START = {\r\n    className: 'meta',\r\n    begin: '([O])([0-9]+)'\r\n  };\r\n  const NUMBER = hljs.inherit(hljs.C_NUMBER_MODE, {\r\n    begin: '([-+]?((\\\\.\\\\d+)|(\\\\d+)(\\\\.\\\\d*)?))|' + hljs.C_NUMBER_RE\r\n  });\r\n  const GCODE_CODE = [\r\n    hljs.C_LINE_COMMENT_MODE,\r\n    hljs.C_BLOCK_COMMENT_MODE,\r\n    hljs.COMMENT(/\\(/, /\\)/),\r\n    NUMBER,\r\n    hljs.inherit(hljs.APOS_STRING_MODE, {\r\n      illegal: null\r\n    }),\r\n    hljs.inherit(hljs.QUOTE_STRING_MODE, {\r\n      illegal: null\r\n    }),\r\n    {\r\n      className: 'name',\r\n      begin: '([G])([0-9]+\\\\.?[0-9]?)'\r\n    },\r\n    {\r\n      className: 'name',\r\n      begin: '([M])([0-9]+\\\\.?[0-9]?)'\r\n    },\r\n    {\r\n      className: 'attr',\r\n      begin: '(VC|VS|#)',\r\n      end: '(\\\\d+)'\r\n    },\r\n    {\r\n      className: 'attr',\r\n      begin: '(VZOFX|VZOFY|VZOFZ)'\r\n    },\r\n    {\r\n      className: 'built_in',\r\n      begin: '(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\\\[)',\r\n      contains: [\r\n        NUMBER\r\n      ],\r\n      end: '\\\\]'\r\n    },\r\n    {\r\n      className: 'symbol',\r\n      variants: [\r\n        {\r\n          begin: 'N',\r\n          end: '\\\\d+',\r\n          illegal: '\\\\W'\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  return {\r\n    name: 'G-code (ISO 6983)',\r\n    aliases: ['nc'],\r\n    // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.\r\n    // However, most prefer all uppercase and uppercase is customary.\r\n    case_insensitive: true,\r\n    keywords: GCODE_KEYWORDS,\r\n    contains: [\r\n      {\r\n        className: 'meta',\r\n        begin: GCODE_CLOSE_RE\r\n      },\r\n      GCODE_START\r\n    ].concat(GCODE_CODE)\r\n  };\r\n}\r\n\r\nmodule.exports = gcode;\r\n"]},"metadata":{},"sourceType":"script"}