{"ast":null,"code":"'use strict';\n\nvar trim = require('trim');\n\nvar trimTrailingLines = require('trim-trailing-lines');\n\nvar interrupt = require('../util/interrupt');\n\nmodule.exports = paragraph;\nvar tab = '\\t';\nvar lineFeed = '\\n';\nvar space = ' ';\nvar tabSize = 4; // Tokenise paragraph.\n\nfunction paragraph(eat, value, silent) {\n  var self = this;\n  var settings = self.options;\n  var commonmark = settings.commonmark;\n  var tokenizers = self.blockTokenizers;\n  var interruptors = self.interruptParagraph;\n  var index = value.indexOf(lineFeed);\n  var length = value.length;\n  var position;\n  var subvalue;\n  var character;\n  var size;\n  var now;\n\n  while (index < length) {\n    // Eat everything if there’s no following newline.\n    if (index === -1) {\n      index = length;\n      break;\n    } // Stop if the next character is NEWLINE.\n\n\n    if (value.charAt(index + 1) === lineFeed) {\n      break;\n    } // In commonmark-mode, following indented lines are part of the paragraph.\n\n\n    if (commonmark) {\n      size = 0;\n      position = index + 1;\n\n      while (position < length) {\n        character = value.charAt(position);\n\n        if (character === tab) {\n          size = tabSize;\n          break;\n        } else if (character === space) {\n          size++;\n        } else {\n          break;\n        }\n\n        position++;\n      }\n\n      if (size >= tabSize && character !== lineFeed) {\n        index = value.indexOf(lineFeed, index + 1);\n        continue;\n      }\n    }\n\n    subvalue = value.slice(index + 1); // Check if the following code contains a possible block.\n\n    if (interrupt(interruptors, tokenizers, self, [eat, subvalue, true])) {\n      break;\n    }\n\n    position = index;\n    index = value.indexOf(lineFeed, index + 1);\n\n    if (index !== -1 && trim(value.slice(position, index)) === '') {\n      index = position;\n      break;\n    }\n  }\n\n  subvalue = value.slice(0, index);\n  /* istanbul ignore if - never used (yet) */\n\n  if (silent) {\n    return true;\n  }\n\n  now = eat.now();\n  subvalue = trimTrailingLines(subvalue);\n  return eat(subvalue)({\n    type: 'paragraph',\n    children: self.tokenizeInline(subvalue, now)\n  });\n}","map":{"version":3,"sources":["E:/Monirul AWS/PorzotokFrontend/node_modules/remark-parse/lib/tokenize/paragraph.js"],"names":["trim","require","trimTrailingLines","interrupt","module","exports","paragraph","tab","lineFeed","space","tabSize","eat","value","silent","self","settings","options","commonmark","tokenizers","blockTokenizers","interruptors","interruptParagraph","index","indexOf","length","position","subvalue","character","size","now","charAt","slice","type","children","tokenizeInline"],"mappings":"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","sourcesContent":["'use strict'\n\nvar trim = require('trim')\nvar trimTrailingLines = require('trim-trailing-lines')\nvar interrupt = require('../util/interrupt')\n\nmodule.exports = paragraph\n\nvar tab = '\\t'\nvar lineFeed = '\\n'\nvar space = ' '\n\nvar tabSize = 4\n\n// Tokenise paragraph.\nfunction paragraph(eat, value, silent) {\n  var self = this\n  var settings = self.options\n  var commonmark = settings.commonmark\n  var tokenizers = self.blockTokenizers\n  var interruptors = self.interruptParagraph\n  var index = value.indexOf(lineFeed)\n  var length = value.length\n  var position\n  var subvalue\n  var character\n  var size\n  var now\n\n  while (index < length) {\n    // Eat everything if there’s no following newline.\n    if (index === -1) {\n      index = length\n      break\n    }\n\n    // Stop if the next character is NEWLINE.\n    if (value.charAt(index + 1) === lineFeed) {\n      break\n    }\n\n    // In commonmark-mode, following indented lines are part of the paragraph.\n    if (commonmark) {\n      size = 0\n      position = index + 1\n\n      while (position < length) {\n        character = value.charAt(position)\n\n        if (character === tab) {\n          size = tabSize\n          break\n        } else if (character === space) {\n          size++\n        } else {\n          break\n        }\n\n        position++\n      }\n\n      if (size >= tabSize && character !== lineFeed) {\n        index = value.indexOf(lineFeed, index + 1)\n        continue\n      }\n    }\n\n    subvalue = value.slice(index + 1)\n\n    // Check if the following code contains a possible block.\n    if (interrupt(interruptors, tokenizers, self, [eat, subvalue, true])) {\n      break\n    }\n\n    position = index\n    index = value.indexOf(lineFeed, index + 1)\n\n    if (index !== -1 && trim(value.slice(position, index)) === '') {\n      index = position\n      break\n    }\n  }\n\n  subvalue = value.slice(0, index)\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true\n  }\n\n  now = eat.now()\n  subvalue = trimTrailingLines(subvalue)\n\n  return eat(subvalue)({\n    type: 'paragraph',\n    children: self.tokenizeInline(subvalue, now)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}