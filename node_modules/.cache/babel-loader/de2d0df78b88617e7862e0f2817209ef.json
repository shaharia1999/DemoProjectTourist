{"ast":null,"code":"/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\n\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\n\n\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\n\n\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/**\r\n * Any of the passed expresssions may match\r\n *\r\n * Creates a huge this | this | that | that match\r\n * @param {(RegExp | string)[] } args\r\n * @returns {string}\r\n */\n\n\nfunction either(...args) {\n  const joined = '(' + args.map(x => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n/*\r\nLanguage: TOML, also INI\r\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\r\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\r\nCategory: common, config\r\nWebsite: https://github.com/toml-lang/toml\r\n*/\n\n\nfunction ini(hljs) {\n  const NUMBERS = {\n    className: 'number',\n    relevance: 0,\n    variants: [{\n      begin: /([+-]+)?[\\d]+_[\\d_]+/\n    }, {\n      begin: hljs.NUMBER_RE\n    }]\n  };\n  const COMMENTS = hljs.COMMENT();\n  COMMENTS.variants = [{\n    begin: /;/,\n    end: /$/\n  }, {\n    begin: /#/,\n    end: /$/\n  }];\n  const VARIABLES = {\n    className: 'variable',\n    variants: [{\n      begin: /\\$[\\w\\d\"][\\w\\d_]*/\n    }, {\n      begin: /\\$\\{(.*?)\\}/\n    }]\n  };\n  const LITERALS = {\n    className: 'literal',\n    begin: /\\bon|off|true|false|yes|no\\b/\n  };\n  const STRINGS = {\n    className: \"string\",\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [{\n      begin: \"'''\",\n      end: \"'''\",\n      relevance: 10\n    }, {\n      begin: '\"\"\"',\n      end: '\"\"\"',\n      relevance: 10\n    }, {\n      begin: '\"',\n      end: '\"'\n    }, {\n      begin: \"'\",\n      end: \"'\"\n    }]\n  };\n  const ARRAY = {\n    begin: /\\[/,\n    end: /\\]/,\n    contains: [COMMENTS, LITERALS, VARIABLES, STRINGS, NUMBERS, 'self'],\n    relevance: 0\n  };\n  const BARE_KEY = /[A-Za-z0-9_-]+/;\n  const QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\n  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\n  const ANY_KEY = either(BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE);\n  const DOTTED_KEY = concat(ANY_KEY, '(\\\\s*\\\\.\\\\s*', ANY_KEY, ')*', lookahead(/\\s*=\\s*[^#\\s]/));\n  return {\n    name: 'TOML, also INI',\n    aliases: ['toml'],\n    case_insensitive: true,\n    illegal: /\\S/,\n    contains: [COMMENTS, {\n      className: 'section',\n      begin: /\\[+/,\n      end: /\\]+/\n    }, {\n      begin: DOTTED_KEY,\n      className: 'attr',\n      starts: {\n        end: /$/,\n        contains: [COMMENTS, ARRAY, LITERALS, VARIABLES, STRINGS, NUMBERS]\n      }\n    }]\n  };\n}\n\nmodule.exports = ini;","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/highlight.js/lib/languages/ini.js"],"names":["source","re","lookahead","concat","args","joined","map","x","join","either","ini","hljs","NUMBERS","className","relevance","variants","begin","NUMBER_RE","COMMENTS","COMMENT","end","VARIABLES","LITERALS","STRINGS","contains","BACKSLASH_ESCAPE","ARRAY","BARE_KEY","QUOTED_KEY_DOUBLE_QUOTE","QUOTED_KEY_SINGLE_QUOTE","ANY_KEY","DOTTED_KEY","name","aliases","case_insensitive","illegal","starts","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAASA,MAAT,CAAgBC,EAAhB,EAAoB;AAClB,MAAI,CAACA,EAAL,EAAS,OAAO,IAAP;AACT,MAAI,OAAOA,EAAP,KAAc,QAAlB,EAA4B,OAAOA,EAAP;AAE5B,SAAOA,EAAE,CAACD,MAAV;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASE,SAAT,CAAmBD,EAAnB,EAAuB;AACrB,SAAOE,MAAM,CAAC,KAAD,EAAQF,EAAR,EAAY,GAAZ,CAAb;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASE,MAAT,CAAgB,GAAGC,IAAnB,EAAyB;AACvB,QAAMC,MAAM,GAAGD,IAAI,CAACE,GAAL,CAAUC,CAAD,IAAOP,MAAM,CAACO,CAAD,CAAtB,EAA2BC,IAA3B,CAAgC,EAAhC,CAAf;AACA,SAAOH,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,MAAT,CAAgB,GAAGL,IAAnB,EAAyB;AACvB,QAAMC,MAAM,GAAG,MAAMD,IAAI,CAACE,GAAL,CAAUC,CAAD,IAAOP,MAAM,CAACO,CAAD,CAAtB,EAA2BC,IAA3B,CAAgC,GAAhC,CAAN,GAA6C,GAA5D;AACA,SAAOH,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASK,GAAT,CAAaC,IAAb,EAAmB;AACjB,QAAMC,OAAO,GAAG;AACdC,IAAAA,SAAS,EAAE,QADG;AAEdC,IAAAA,SAAS,EAAE,CAFG;AAGdC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE;AADT,KADQ,EAIR;AACEA,MAAAA,KAAK,EAAEL,IAAI,CAACM;AADd,KAJQ;AAHI,GAAhB;AAYA,QAAMC,QAAQ,GAAGP,IAAI,CAACQ,OAAL,EAAjB;AACAD,EAAAA,QAAQ,CAACH,QAAT,GAAoB,CAClB;AACEC,IAAAA,KAAK,EAAE,GADT;AAEEI,IAAAA,GAAG,EAAE;AAFP,GADkB,EAKlB;AACEJ,IAAAA,KAAK,EAAE,GADT;AAEEI,IAAAA,GAAG,EAAE;AAFP,GALkB,CAApB;AAUA,QAAMC,SAAS,GAAG;AAChBR,IAAAA,SAAS,EAAE,UADK;AAEhBE,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE;AADT,KADQ,EAIR;AACEA,MAAAA,KAAK,EAAE;AADT,KAJQ;AAFM,GAAlB;AAWA,QAAMM,QAAQ,GAAG;AACfT,IAAAA,SAAS,EAAE,SADI;AAEfG,IAAAA,KAAK,EAAE;AAFQ,GAAjB;AAIA,QAAMO,OAAO,GAAG;AACdV,IAAAA,SAAS,EAAE,QADG;AAEdW,IAAAA,QAAQ,EAAE,CAACb,IAAI,CAACc,gBAAN,CAFI;AAGdV,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,KADT;AAEEI,MAAAA,GAAG,EAAE,KAFP;AAGEN,MAAAA,SAAS,EAAE;AAHb,KADQ,EAMR;AACEE,MAAAA,KAAK,EAAE,KADT;AAEEI,MAAAA,GAAG,EAAE,KAFP;AAGEN,MAAAA,SAAS,EAAE;AAHb,KANQ,EAWR;AACEE,MAAAA,KAAK,EAAE,GADT;AAEEI,MAAAA,GAAG,EAAE;AAFP,KAXQ,EAeR;AACEJ,MAAAA,KAAK,EAAE,GADT;AAEEI,MAAAA,GAAG,EAAE;AAFP,KAfQ;AAHI,GAAhB;AAwBA,QAAMM,KAAK,GAAG;AACZV,IAAAA,KAAK,EAAE,IADK;AAEZI,IAAAA,GAAG,EAAE,IAFO;AAGZI,IAAAA,QAAQ,EAAE,CACRN,QADQ,EAERI,QAFQ,EAGRD,SAHQ,EAIRE,OAJQ,EAKRX,OALQ,EAMR,MANQ,CAHE;AAWZE,IAAAA,SAAS,EAAE;AAXC,GAAd;AAcA,QAAMa,QAAQ,GAAG,gBAAjB;AACA,QAAMC,uBAAuB,GAAG,eAAhC;AACA,QAAMC,uBAAuB,GAAG,SAAhC;AACA,QAAMC,OAAO,GAAGrB,MAAM,CACpBkB,QADoB,EACVC,uBADU,EACeC,uBADf,CAAtB;AAGA,QAAME,UAAU,GAAG5B,MAAM,CACvB2B,OADuB,EACd,cADc,EACEA,OADF,EACW,IADX,EAEvB5B,SAAS,CAAC,eAAD,CAFc,CAAzB;AAKA,SAAO;AACL8B,IAAAA,IAAI,EAAE,gBADD;AAELC,IAAAA,OAAO,EAAE,CAAC,MAAD,CAFJ;AAGLC,IAAAA,gBAAgB,EAAE,IAHb;AAILC,IAAAA,OAAO,EAAE,IAJJ;AAKLX,IAAAA,QAAQ,EAAE,CACRN,QADQ,EAER;AACEL,MAAAA,SAAS,EAAE,SADb;AAEEG,MAAAA,KAAK,EAAE,KAFT;AAGEI,MAAAA,GAAG,EAAE;AAHP,KAFQ,EAOR;AACEJ,MAAAA,KAAK,EAAEe,UADT;AAEElB,MAAAA,SAAS,EAAE,MAFb;AAGEuB,MAAAA,MAAM,EAAE;AACNhB,QAAAA,GAAG,EAAE,GADC;AAENI,QAAAA,QAAQ,EAAE,CACRN,QADQ,EAERQ,KAFQ,EAGRJ,QAHQ,EAIRD,SAJQ,EAKRE,OALQ,EAMRX,OANQ;AAFJ;AAHV,KAPQ;AALL,GAAP;AA6BD;;AAEDyB,MAAM,CAACC,OAAP,GAAiB5B,GAAjB","sourcesContent":["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction lookahead(re) {\r\n  return concat('(?=', re, ')');\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/**\r\n * Any of the passed expresssions may match\r\n *\r\n * Creates a huge this | this | that | that match\r\n * @param {(RegExp | string)[] } args\r\n * @returns {string}\r\n */\r\nfunction either(...args) {\r\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\r\n  return joined;\r\n}\r\n\r\n/*\r\nLanguage: TOML, also INI\r\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\r\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\r\nCategory: common, config\r\nWebsite: https://github.com/toml-lang/toml\r\n*/\r\n\r\nfunction ini(hljs) {\r\n  const NUMBERS = {\r\n    className: 'number',\r\n    relevance: 0,\r\n    variants: [\r\n      {\r\n        begin: /([+-]+)?[\\d]+_[\\d_]+/\r\n      },\r\n      {\r\n        begin: hljs.NUMBER_RE\r\n      }\r\n    ]\r\n  };\r\n  const COMMENTS = hljs.COMMENT();\r\n  COMMENTS.variants = [\r\n    {\r\n      begin: /;/,\r\n      end: /$/\r\n    },\r\n    {\r\n      begin: /#/,\r\n      end: /$/\r\n    }\r\n  ];\r\n  const VARIABLES = {\r\n    className: 'variable',\r\n    variants: [\r\n      {\r\n        begin: /\\$[\\w\\d\"][\\w\\d_]*/\r\n      },\r\n      {\r\n        begin: /\\$\\{(.*?)\\}/\r\n      }\r\n    ]\r\n  };\r\n  const LITERALS = {\r\n    className: 'literal',\r\n    begin: /\\bon|off|true|false|yes|no\\b/\r\n  };\r\n  const STRINGS = {\r\n    className: \"string\",\r\n    contains: [hljs.BACKSLASH_ESCAPE],\r\n    variants: [\r\n      {\r\n        begin: \"'''\",\r\n        end: \"'''\",\r\n        relevance: 10\r\n      },\r\n      {\r\n        begin: '\"\"\"',\r\n        end: '\"\"\"',\r\n        relevance: 10\r\n      },\r\n      {\r\n        begin: '\"',\r\n        end: '\"'\r\n      },\r\n      {\r\n        begin: \"'\",\r\n        end: \"'\"\r\n      }\r\n    ]\r\n  };\r\n  const ARRAY = {\r\n    begin: /\\[/,\r\n    end: /\\]/,\r\n    contains: [\r\n      COMMENTS,\r\n      LITERALS,\r\n      VARIABLES,\r\n      STRINGS,\r\n      NUMBERS,\r\n      'self'\r\n    ],\r\n    relevance: 0\r\n  };\r\n\r\n  const BARE_KEY = /[A-Za-z0-9_-]+/;\r\n  const QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\r\n  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\r\n  const ANY_KEY = either(\r\n    BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE\r\n  );\r\n  const DOTTED_KEY = concat(\r\n    ANY_KEY, '(\\\\s*\\\\.\\\\s*', ANY_KEY, ')*',\r\n    lookahead(/\\s*=\\s*[^#\\s]/)\r\n  );\r\n\r\n  return {\r\n    name: 'TOML, also INI',\r\n    aliases: ['toml'],\r\n    case_insensitive: true,\r\n    illegal: /\\S/,\r\n    contains: [\r\n      COMMENTS,\r\n      {\r\n        className: 'section',\r\n        begin: /\\[+/,\r\n        end: /\\]+/\r\n      },\r\n      {\r\n        begin: DOTTED_KEY,\r\n        className: 'attr',\r\n        starts: {\r\n          end: /$/,\r\n          contains: [\r\n            COMMENTS,\r\n            ARRAY,\r\n            LITERALS,\r\n            VARIABLES,\r\n            STRINGS,\r\n            NUMBERS\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = ini;\r\n"]},"metadata":{},"sourceType":"script"}