{"ast":null,"code":"'use strict';\n\nvar whitespace = require('is-whitespace-character');\n\nvar normalize = require('../util/normalize');\n\nmodule.exports = definition;\nvar quotationMark = '\"';\nvar apostrophe = \"'\";\nvar backslash = '\\\\';\nvar lineFeed = '\\n';\nvar tab = '\\t';\nvar space = ' ';\nvar leftSquareBracket = '[';\nvar rightSquareBracket = ']';\nvar leftParenthesis = '(';\nvar rightParenthesis = ')';\nvar colon = ':';\nvar lessThan = '<';\nvar greaterThan = '>';\n\nfunction definition(eat, value, silent) {\n  var self = this;\n  var commonmark = self.options.commonmark;\n  var index = 0;\n  var length = value.length;\n  var subvalue = '';\n  var beforeURL;\n  var beforeTitle;\n  var queue;\n  var character;\n  var test;\n  var identifier;\n  var url;\n  var title;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== space && character !== tab) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n\n  if (character !== leftSquareBracket) {\n    return;\n  }\n\n  index++;\n  subvalue += character;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character === rightSquareBracket) {\n      break;\n    } else if (character === backslash) {\n      queue += character;\n      index++;\n      character = value.charAt(index);\n    }\n\n    queue += character;\n    index++;\n  }\n\n  if (!queue || value.charAt(index) !== rightSquareBracket || value.charAt(index + 1) !== colon) {\n    return;\n  }\n\n  identifier = queue;\n  subvalue += queue + rightSquareBracket + colon;\n  index = subvalue.length;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== tab && character !== space && character !== lineFeed) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n  queue = '';\n  beforeURL = subvalue;\n\n  if (character === lessThan) {\n    index++;\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (!isEnclosedURLCharacter(character)) {\n        break;\n      }\n\n      queue += character;\n      index++;\n    }\n\n    character = value.charAt(index);\n\n    if (character === isEnclosedURLCharacter.delimiter) {\n      subvalue += lessThan + queue + character;\n      index++;\n    } else {\n      if (commonmark) {\n        return;\n      }\n\n      index -= queue.length + 1;\n      queue = '';\n    }\n  }\n\n  if (!queue) {\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (!isUnclosedURLCharacter(character)) {\n        break;\n      }\n\n      queue += character;\n      index++;\n    }\n\n    subvalue += queue;\n  }\n\n  if (!queue) {\n    return;\n  }\n\n  url = queue;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== tab && character !== space && character !== lineFeed) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n  test = null;\n\n  if (character === quotationMark) {\n    test = quotationMark;\n  } else if (character === apostrophe) {\n    test = apostrophe;\n  } else if (character === leftParenthesis) {\n    test = rightParenthesis;\n  }\n\n  if (!test) {\n    queue = '';\n    index = subvalue.length;\n  } else if (queue) {\n    subvalue += queue + character;\n    index = subvalue.length;\n    queue = '';\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (character === test) {\n        break;\n      }\n\n      if (character === lineFeed) {\n        index++;\n        character = value.charAt(index);\n\n        if (character === lineFeed || character === test) {\n          return;\n        }\n\n        queue += lineFeed;\n      }\n\n      queue += character;\n      index++;\n    }\n\n    character = value.charAt(index);\n\n    if (character !== test) {\n      return;\n    }\n\n    beforeTitle = subvalue;\n    subvalue += queue + character;\n    index++;\n    title = queue;\n    queue = '';\n  } else {\n    return;\n  }\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== tab && character !== space) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n\n  if (!character || character === lineFeed) {\n    if (silent) {\n      return true;\n    }\n\n    beforeURL = eat(beforeURL).test().end;\n    url = self.decode.raw(self.unescape(url), beforeURL, {\n      nonTerminated: false\n    });\n\n    if (title) {\n      beforeTitle = eat(beforeTitle).test().end;\n      title = self.decode.raw(self.unescape(title), beforeTitle);\n    }\n\n    return eat(subvalue)({\n      type: 'definition',\n      identifier: normalize(identifier),\n      label: identifier,\n      title: title || null,\n      url: url\n    });\n  }\n} // Check if `character` can be inside an enclosed URI.\n\n\nfunction isEnclosedURLCharacter(character) {\n  return character !== greaterThan && character !== leftSquareBracket && character !== rightSquareBracket;\n}\n\nisEnclosedURLCharacter.delimiter = greaterThan; // Check if `character` can be inside an unclosed URI.\n\nfunction isUnclosedURLCharacter(character) {\n  return character !== leftSquareBracket && character !== rightSquareBracket && !whitespace(character);\n}","map":{"version":3,"sources":["D:/PorzotokFrontend/node_modules/remark-parse/lib/tokenize/definition.js"],"names":["whitespace","require","normalize","module","exports","definition","quotationMark","apostrophe","backslash","lineFeed","tab","space","leftSquareBracket","rightSquareBracket","leftParenthesis","rightParenthesis","colon","lessThan","greaterThan","eat","value","silent","self","commonmark","options","index","length","subvalue","beforeURL","beforeTitle","queue","character","test","identifier","url","title","charAt","isEnclosedURLCharacter","delimiter","isUnclosedURLCharacter","end","decode","raw","unescape","nonTerminated","type","label"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAAxB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,mBAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,UAAjB;AAEA,IAAIC,aAAa,GAAG,GAApB;AACA,IAAIC,UAAU,GAAG,GAAjB;AACA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,GAAG,GAAG,IAAV;AACA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,iBAAiB,GAAG,GAAxB;AACA,IAAIC,kBAAkB,GAAG,GAAzB;AACA,IAAIC,eAAe,GAAG,GAAtB;AACA,IAAIC,gBAAgB,GAAG,GAAvB;AACA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,QAAQ,GAAG,GAAf;AACA,IAAIC,WAAW,GAAG,GAAlB;;AAEA,SAASb,UAAT,CAAoBc,GAApB,EAAyBC,KAAzB,EAAgCC,MAAhC,EAAwC;AACtC,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,UAAU,GAAGD,IAAI,CAACE,OAAL,CAAaD,UAA9B;AACA,MAAIE,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAGN,KAAK,CAACM,MAAnB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,SAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,KAAJ;;AAEA,SAAOV,KAAK,GAAGC,MAAf,EAAuB;AACrBK,IAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;;AAEA,QAAIM,SAAS,KAAKpB,KAAd,IAAuBoB,SAAS,KAAKrB,GAAzC,EAA8C;AAC5C;AACD;;AAEDiB,IAAAA,QAAQ,IAAII,SAAZ;AACAN,IAAAA,KAAK;AACN;;AAEDM,EAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;;AAEA,MAAIM,SAAS,KAAKnB,iBAAlB,EAAqC;AACnC;AACD;;AAEDa,EAAAA,KAAK;AACLE,EAAAA,QAAQ,IAAII,SAAZ;AACAD,EAAAA,KAAK,GAAG,EAAR;;AAEA,SAAOL,KAAK,GAAGC,MAAf,EAAuB;AACrBK,IAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;;AAEA,QAAIM,SAAS,KAAKlB,kBAAlB,EAAsC;AACpC;AACD,KAFD,MAEO,IAAIkB,SAAS,KAAKvB,SAAlB,EAA6B;AAClCsB,MAAAA,KAAK,IAAIC,SAAT;AACAN,MAAAA,KAAK;AACLM,MAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;AACD;;AAEDK,IAAAA,KAAK,IAAIC,SAAT;AACAN,IAAAA,KAAK;AACN;;AAED,MACE,CAACK,KAAD,IACAV,KAAK,CAACgB,MAAN,CAAaX,KAAb,MAAwBZ,kBADxB,IAEAO,KAAK,CAACgB,MAAN,CAAaX,KAAK,GAAG,CAArB,MAA4BT,KAH9B,EAIE;AACA;AACD;;AAEDiB,EAAAA,UAAU,GAAGH,KAAb;AACAH,EAAAA,QAAQ,IAAIG,KAAK,GAAGjB,kBAAR,GAA6BG,KAAzC;AACAS,EAAAA,KAAK,GAAGE,QAAQ,CAACD,MAAjB;AACAI,EAAAA,KAAK,GAAG,EAAR;;AAEA,SAAOL,KAAK,GAAGC,MAAf,EAAuB;AACrBK,IAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;;AAEA,QAAIM,SAAS,KAAKrB,GAAd,IAAqBqB,SAAS,KAAKpB,KAAnC,IAA4CoB,SAAS,KAAKtB,QAA9D,EAAwE;AACtE;AACD;;AAEDkB,IAAAA,QAAQ,IAAII,SAAZ;AACAN,IAAAA,KAAK;AACN;;AAEDM,EAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;AACAK,EAAAA,KAAK,GAAG,EAAR;AACAF,EAAAA,SAAS,GAAGD,QAAZ;;AAEA,MAAII,SAAS,KAAKd,QAAlB,EAA4B;AAC1BQ,IAAAA,KAAK;;AAEL,WAAOA,KAAK,GAAGC,MAAf,EAAuB;AACrBK,MAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;;AAEA,UAAI,CAACY,sBAAsB,CAACN,SAAD,CAA3B,EAAwC;AACtC;AACD;;AAEDD,MAAAA,KAAK,IAAIC,SAAT;AACAN,MAAAA,KAAK;AACN;;AAEDM,IAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;;AAEA,QAAIM,SAAS,KAAKM,sBAAsB,CAACC,SAAzC,EAAoD;AAClDX,MAAAA,QAAQ,IAAIV,QAAQ,GAAGa,KAAX,GAAmBC,SAA/B;AACAN,MAAAA,KAAK;AACN,KAHD,MAGO;AACL,UAAIF,UAAJ,EAAgB;AACd;AACD;;AAEDE,MAAAA,KAAK,IAAIK,KAAK,CAACJ,MAAN,GAAe,CAAxB;AACAI,MAAAA,KAAK,GAAG,EAAR;AACD;AACF;;AAED,MAAI,CAACA,KAAL,EAAY;AACV,WAAOL,KAAK,GAAGC,MAAf,EAAuB;AACrBK,MAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;;AAEA,UAAI,CAACc,sBAAsB,CAACR,SAAD,CAA3B,EAAwC;AACtC;AACD;;AAEDD,MAAAA,KAAK,IAAIC,SAAT;AACAN,MAAAA,KAAK;AACN;;AAEDE,IAAAA,QAAQ,IAAIG,KAAZ;AACD;;AAED,MAAI,CAACA,KAAL,EAAY;AACV;AACD;;AAEDI,EAAAA,GAAG,GAAGJ,KAAN;AACAA,EAAAA,KAAK,GAAG,EAAR;;AAEA,SAAOL,KAAK,GAAGC,MAAf,EAAuB;AACrBK,IAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;;AAEA,QAAIM,SAAS,KAAKrB,GAAd,IAAqBqB,SAAS,KAAKpB,KAAnC,IAA4CoB,SAAS,KAAKtB,QAA9D,EAAwE;AACtE;AACD;;AAEDqB,IAAAA,KAAK,IAAIC,SAAT;AACAN,IAAAA,KAAK;AACN;;AAEDM,EAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;AACAO,EAAAA,IAAI,GAAG,IAAP;;AAEA,MAAID,SAAS,KAAKzB,aAAlB,EAAiC;AAC/B0B,IAAAA,IAAI,GAAG1B,aAAP;AACD,GAFD,MAEO,IAAIyB,SAAS,KAAKxB,UAAlB,EAA8B;AACnCyB,IAAAA,IAAI,GAAGzB,UAAP;AACD,GAFM,MAEA,IAAIwB,SAAS,KAAKjB,eAAlB,EAAmC;AACxCkB,IAAAA,IAAI,GAAGjB,gBAAP;AACD;;AAED,MAAI,CAACiB,IAAL,EAAW;AACTF,IAAAA,KAAK,GAAG,EAAR;AACAL,IAAAA,KAAK,GAAGE,QAAQ,CAACD,MAAjB;AACD,GAHD,MAGO,IAAII,KAAJ,EAAW;AAChBH,IAAAA,QAAQ,IAAIG,KAAK,GAAGC,SAApB;AACAN,IAAAA,KAAK,GAAGE,QAAQ,CAACD,MAAjB;AACAI,IAAAA,KAAK,GAAG,EAAR;;AAEA,WAAOL,KAAK,GAAGC,MAAf,EAAuB;AACrBK,MAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;;AAEA,UAAIM,SAAS,KAAKC,IAAlB,EAAwB;AACtB;AACD;;AAED,UAAID,SAAS,KAAKtB,QAAlB,EAA4B;AAC1BgB,QAAAA,KAAK;AACLM,QAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;;AAEA,YAAIM,SAAS,KAAKtB,QAAd,IAA0BsB,SAAS,KAAKC,IAA5C,EAAkD;AAChD;AACD;;AAEDF,QAAAA,KAAK,IAAIrB,QAAT;AACD;;AAEDqB,MAAAA,KAAK,IAAIC,SAAT;AACAN,MAAAA,KAAK;AACN;;AAEDM,IAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;;AAEA,QAAIM,SAAS,KAAKC,IAAlB,EAAwB;AACtB;AACD;;AAEDH,IAAAA,WAAW,GAAGF,QAAd;AACAA,IAAAA,QAAQ,IAAIG,KAAK,GAAGC,SAApB;AACAN,IAAAA,KAAK;AACLU,IAAAA,KAAK,GAAGL,KAAR;AACAA,IAAAA,KAAK,GAAG,EAAR;AACD,GAtCM,MAsCA;AACL;AACD;;AAED,SAAOL,KAAK,GAAGC,MAAf,EAAuB;AACrBK,IAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;;AAEA,QAAIM,SAAS,KAAKrB,GAAd,IAAqBqB,SAAS,KAAKpB,KAAvC,EAA8C;AAC5C;AACD;;AAEDgB,IAAAA,QAAQ,IAAII,SAAZ;AACAN,IAAAA,KAAK;AACN;;AAEDM,EAAAA,SAAS,GAAGX,KAAK,CAACgB,MAAN,CAAaX,KAAb,CAAZ;;AAEA,MAAI,CAACM,SAAD,IAAcA,SAAS,KAAKtB,QAAhC,EAA0C;AACxC,QAAIY,MAAJ,EAAY;AACV,aAAO,IAAP;AACD;;AAEDO,IAAAA,SAAS,GAAGT,GAAG,CAACS,SAAD,CAAH,CAAeI,IAAf,GAAsBQ,GAAlC;AACAN,IAAAA,GAAG,GAAGZ,IAAI,CAACmB,MAAL,CAAYC,GAAZ,CAAgBpB,IAAI,CAACqB,QAAL,CAAcT,GAAd,CAAhB,EAAoCN,SAApC,EAA+C;AAACgB,MAAAA,aAAa,EAAE;AAAhB,KAA/C,CAAN;;AAEA,QAAIT,KAAJ,EAAW;AACTN,MAAAA,WAAW,GAAGV,GAAG,CAACU,WAAD,CAAH,CAAiBG,IAAjB,GAAwBQ,GAAtC;AACAL,MAAAA,KAAK,GAAGb,IAAI,CAACmB,MAAL,CAAYC,GAAZ,CAAgBpB,IAAI,CAACqB,QAAL,CAAcR,KAAd,CAAhB,EAAsCN,WAAtC,CAAR;AACD;;AAED,WAAOV,GAAG,CAACQ,QAAD,CAAH,CAAc;AACnBkB,MAAAA,IAAI,EAAE,YADa;AAEnBZ,MAAAA,UAAU,EAAE/B,SAAS,CAAC+B,UAAD,CAFF;AAGnBa,MAAAA,KAAK,EAAEb,UAHY;AAInBE,MAAAA,KAAK,EAAEA,KAAK,IAAI,IAJG;AAKnBD,MAAAA,GAAG,EAAEA;AALc,KAAd,CAAP;AAOD;AACF,C,CAED;;;AACA,SAASG,sBAAT,CAAgCN,SAAhC,EAA2C;AACzC,SACEA,SAAS,KAAKb,WAAd,IACAa,SAAS,KAAKnB,iBADd,IAEAmB,SAAS,KAAKlB,kBAHhB;AAKD;;AAEDwB,sBAAsB,CAACC,SAAvB,GAAmCpB,WAAnC,C,CAEA;;AACA,SAASqB,sBAAT,CAAgCR,SAAhC,EAA2C;AACzC,SACEA,SAAS,KAAKnB,iBAAd,IACAmB,SAAS,KAAKlB,kBADd,IAEA,CAACb,UAAU,CAAC+B,SAAD,CAHb;AAKD","sourcesContent":["'use strict'\n\nvar whitespace = require('is-whitespace-character')\nvar normalize = require('../util/normalize')\n\nmodule.exports = definition\n\nvar quotationMark = '\"'\nvar apostrophe = \"'\"\nvar backslash = '\\\\'\nvar lineFeed = '\\n'\nvar tab = '\\t'\nvar space = ' '\nvar leftSquareBracket = '['\nvar rightSquareBracket = ']'\nvar leftParenthesis = '('\nvar rightParenthesis = ')'\nvar colon = ':'\nvar lessThan = '<'\nvar greaterThan = '>'\n\nfunction definition(eat, value, silent) {\n  var self = this\n  var commonmark = self.options.commonmark\n  var index = 0\n  var length = value.length\n  var subvalue = ''\n  var beforeURL\n  var beforeTitle\n  var queue\n  var character\n  var test\n  var identifier\n  var url\n  var title\n\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (character !== space && character !== tab) {\n      break\n    }\n\n    subvalue += character\n    index++\n  }\n\n  character = value.charAt(index)\n\n  if (character !== leftSquareBracket) {\n    return\n  }\n\n  index++\n  subvalue += character\n  queue = ''\n\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (character === rightSquareBracket) {\n      break\n    } else if (character === backslash) {\n      queue += character\n      index++\n      character = value.charAt(index)\n    }\n\n    queue += character\n    index++\n  }\n\n  if (\n    !queue ||\n    value.charAt(index) !== rightSquareBracket ||\n    value.charAt(index + 1) !== colon\n  ) {\n    return\n  }\n\n  identifier = queue\n  subvalue += queue + rightSquareBracket + colon\n  index = subvalue.length\n  queue = ''\n\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (character !== tab && character !== space && character !== lineFeed) {\n      break\n    }\n\n    subvalue += character\n    index++\n  }\n\n  character = value.charAt(index)\n  queue = ''\n  beforeURL = subvalue\n\n  if (character === lessThan) {\n    index++\n\n    while (index < length) {\n      character = value.charAt(index)\n\n      if (!isEnclosedURLCharacter(character)) {\n        break\n      }\n\n      queue += character\n      index++\n    }\n\n    character = value.charAt(index)\n\n    if (character === isEnclosedURLCharacter.delimiter) {\n      subvalue += lessThan + queue + character\n      index++\n    } else {\n      if (commonmark) {\n        return\n      }\n\n      index -= queue.length + 1\n      queue = ''\n    }\n  }\n\n  if (!queue) {\n    while (index < length) {\n      character = value.charAt(index)\n\n      if (!isUnclosedURLCharacter(character)) {\n        break\n      }\n\n      queue += character\n      index++\n    }\n\n    subvalue += queue\n  }\n\n  if (!queue) {\n    return\n  }\n\n  url = queue\n  queue = ''\n\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (character !== tab && character !== space && character !== lineFeed) {\n      break\n    }\n\n    queue += character\n    index++\n  }\n\n  character = value.charAt(index)\n  test = null\n\n  if (character === quotationMark) {\n    test = quotationMark\n  } else if (character === apostrophe) {\n    test = apostrophe\n  } else if (character === leftParenthesis) {\n    test = rightParenthesis\n  }\n\n  if (!test) {\n    queue = ''\n    index = subvalue.length\n  } else if (queue) {\n    subvalue += queue + character\n    index = subvalue.length\n    queue = ''\n\n    while (index < length) {\n      character = value.charAt(index)\n\n      if (character === test) {\n        break\n      }\n\n      if (character === lineFeed) {\n        index++\n        character = value.charAt(index)\n\n        if (character === lineFeed || character === test) {\n          return\n        }\n\n        queue += lineFeed\n      }\n\n      queue += character\n      index++\n    }\n\n    character = value.charAt(index)\n\n    if (character !== test) {\n      return\n    }\n\n    beforeTitle = subvalue\n    subvalue += queue + character\n    index++\n    title = queue\n    queue = ''\n  } else {\n    return\n  }\n\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (character !== tab && character !== space) {\n      break\n    }\n\n    subvalue += character\n    index++\n  }\n\n  character = value.charAt(index)\n\n  if (!character || character === lineFeed) {\n    if (silent) {\n      return true\n    }\n\n    beforeURL = eat(beforeURL).test().end\n    url = self.decode.raw(self.unescape(url), beforeURL, {nonTerminated: false})\n\n    if (title) {\n      beforeTitle = eat(beforeTitle).test().end\n      title = self.decode.raw(self.unescape(title), beforeTitle)\n    }\n\n    return eat(subvalue)({\n      type: 'definition',\n      identifier: normalize(identifier),\n      label: identifier,\n      title: title || null,\n      url: url\n    })\n  }\n}\n\n// Check if `character` can be inside an enclosed URI.\nfunction isEnclosedURLCharacter(character) {\n  return (\n    character !== greaterThan &&\n    character !== leftSquareBracket &&\n    character !== rightSquareBracket\n  )\n}\n\nisEnclosedURLCharacter.delimiter = greaterThan\n\n// Check if `character` can be inside an unclosed URI.\nfunction isUnclosedURLCharacter(character) {\n  return (\n    character !== leftSquareBracket &&\n    character !== rightSquareBracket &&\n    !whitespace(character)\n  )\n}\n"]},"metadata":{},"sourceType":"script"}