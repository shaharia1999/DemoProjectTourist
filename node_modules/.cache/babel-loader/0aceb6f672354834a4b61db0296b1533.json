{"ast":null,"code":"/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\n\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\n\n\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\n\n\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\n\n\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/*\r\nLanguage: C++\r\nCategory: common, system\r\nWebsite: https://isocpp.org\r\n*/\n\n/** @type LanguageFn */\n\n\nfunction cPlusPlus(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [{\n      begin: /\\\\\\n/\n    }]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' + DECLTYPE_AUTO_RE + '|' + optional(NAMESPACE_RE) + '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) + ')';\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  }; // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [{\n      begin: '(u8?|U|L)?\"',\n      end: '\"',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n      end: '\\'',\n      illegal: '.'\n    }, hljs.END_SAME_AS_BEGIN({\n      begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n      end: /\\)([^()\\\\ ]{0,16})\"/\n    })]\n  };\n  const NUMBERS = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0b[01\\']+)'\n    }, {\n      begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n    }, {\n      begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n    }],\n    relevance: 0\n  };\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword': 'if else elif endif define undef warning error line ' + 'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, hljs.inherit(STRINGS, {\n      className: 'meta-string'\n    }), {\n      className: 'meta-string',\n      begin: /<.*?>/\n    }, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n  const COMMON_CPP_HINTS = ['asin', 'atan2', 'atan', 'calloc', 'ceil', 'cosh', 'cos', 'exit', 'exp', 'fabs', 'floor', 'fmod', 'fprintf', 'fputs', 'free', 'frexp', 'auto_ptr', 'deque', 'list', 'queue', 'stack', 'vector', 'map', 'set', 'pair', 'bitset', 'multiset', 'multimap', 'unordered_set', 'fscanf', 'future', 'isalnum', 'isalpha', 'iscntrl', 'isdigit', 'isgraph', 'islower', 'isprint', 'ispunct', 'isspace', 'isupper', 'isxdigit', 'tolower', 'toupper', 'labs', 'ldexp', 'log10', 'log', 'malloc', 'realloc', 'memchr', 'memcmp', 'memcpy', 'memset', 'modf', 'pow', 'printf', 'putchar', 'puts', 'scanf', 'sinh', 'sin', 'snprintf', 'sprintf', 'sqrt', 'sscanf', 'strcat', 'strchr', 'strcmp', 'strcpy', 'strcspn', 'strlen', 'strncat', 'strncmp', 'strncpy', 'strpbrk', 'strrchr', 'strspn', 'strstr', 'tanh', 'tan', 'unordered_map', 'unordered_multiset', 'unordered_multimap', 'priority_queue', 'make_pair', 'array', 'shared_ptr', 'abort', 'terminate', 'abs', 'acos', 'vfprintf', 'vprintf', 'vsprintf', 'endl', 'initializer_list', 'unique_ptr', 'complex', 'imaginary', 'std', 'string', 'wstring', 'cin', 'cout', 'cerr', 'clog', 'stdin', 'stdout', 'stderr', 'stringstream', 'istringstream', 'ostringstream'];\n  const CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' + 'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' + 'unsigned long volatile static protected bool template mutable if public friend ' + 'do goto auto void enum else break extern using asm case typeid wchar_t ' + 'short reinterpret_cast|10 default double register explicit signed typename try this ' + 'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' + 'concept co_await co_return co_yield requires ' + 'noexcept static_assert thread_local restrict final override ' + 'atomic_bool atomic_char atomic_schar ' + 'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' + 'atomic_ullong new throw return ' + 'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: '_Bool _Complex _Imaginary',\n    _relevance_hints: COMMON_CPP_HINTS,\n    literal: 'true false nullptr NULL'\n  };\n  const FUNCTION_DISPATCH = {\n    className: \"function.dispatch\",\n    relevance: 0,\n    keywords: CPP_KEYWORDS,\n    begin: concat(/\\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!while)/, hljs.IDENT_RE, lookahead(/\\s*\\(/))\n  };\n  const EXPRESSION_CONTAINS = [FUNCTION_DISPATCH, PREPROCESSOR, CPP_PRIMITIVE_TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [{\n      begin: /=/,\n      end: /;/\n    }, {\n      begin: /\\(/,\n      end: /\\)/\n    }, {\n      beginKeywords: 'new throw return else',\n      end: /;/\n    }],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([{\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      contains: EXPRESSION_CONTAINS.concat(['self']),\n      relevance: 0\n    }]),\n    relevance: 0\n  };\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [{\n      // to prevent it from being confused as the function title\n      begin: DECLTYPE_AUTO_RE,\n      keywords: CPP_KEYWORDS,\n      relevance: 0\n    }, {\n      begin: FUNCTION_TITLE,\n      returnBegin: true,\n      contains: [TITLE_MODE],\n      relevance: 0\n    }, // needed because we do not have look-behind on the below rule\n    // to prevent it from grabbing the final : in a :: pair\n    {\n      begin: /::/,\n      relevance: 0\n    }, // initializers\n    {\n      begin: /:/,\n      endsWithParent: true,\n      contains: [STRINGS, NUMBERS]\n    }, {\n      className: 'params',\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      relevance: 0,\n      contains: [C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES, // Count matching parentheses.\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: ['self', C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES]\n      }]\n    }, CPP_PRIMITIVE_TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]\n  };\n  return {\n    name: 'C++',\n    aliases: ['cc', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    classNameAliases: {\n      \"function.dispatch\": \"built_in\"\n    },\n    contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [PREPROCESSOR, {\n      // containers: ie, `vector <int> rooms (9);`\n      begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n      end: '>',\n      keywords: CPP_KEYWORDS,\n      contains: ['self', CPP_PRIMITIVE_TYPES]\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: CPP_KEYWORDS\n    }, {\n      className: 'class',\n      beginKeywords: 'enum class struct union',\n      end: /[{;:<>=]/,\n      contains: [{\n        beginKeywords: \"final class struct\"\n      }, hljs.TITLE_MODE]\n    }]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n/*\r\nLanguage: Arduino\r\nAuthor: Stefania Mellai <s.mellai@arduino.cc>\r\nDescription: The Arduino® Language is a superset of C++. This rules are designed to highlight the Arduino® source code. For info about language see http://www.arduino.cc.\r\nWebsite: https://www.arduino.cc\r\n*/\n\n/** @type LanguageFn */\n\n\nfunction arduino(hljs) {\n  const ARDUINO_KW = {\n    keyword: 'boolean byte word String',\n    built_in: 'KeyboardController MouseController SoftwareSerial ' + 'EthernetServer EthernetClient LiquidCrystal ' + 'RobotControl GSMVoiceCall EthernetUDP EsploraTFT ' + 'HttpClient RobotMotor WiFiClient GSMScanner ' + 'FileSystem Scheduler GSMServer YunClient YunServer ' + 'IPAddress GSMClient GSMModem Keyboard Ethernet ' + 'Console GSMBand Esplora Stepper Process ' + 'WiFiUDP GSM_SMS Mailbox USBHost Firmata PImage ' + 'Client Server GSMPIN FileIO Bridge Serial ' + 'EEPROM Stream Mouse Audio Servo File Task ' + 'GPRS WiFi Wire TFT GSM SPI SD ',\n    _: 'setup loop ' + 'runShellCommandAsynchronously analogWriteResolution ' + 'retrieveCallingNumber printFirmwareVersion ' + 'analogReadResolution sendDigitalPortPair ' + 'noListenOnLocalhost readJoystickButton setFirmwareVersion ' + 'readJoystickSwitch scrollDisplayRight getVoiceCallStatus ' + 'scrollDisplayLeft writeMicroseconds delayMicroseconds ' + 'beginTransmission getSignalStrength runAsynchronously ' + 'getAsynchronously listenOnLocalhost getCurrentCarrier ' + 'readAccelerometer messageAvailable sendDigitalPorts ' + 'lineFollowConfig countryNameWrite runShellCommand ' + 'readStringUntil rewindDirectory readTemperature ' + 'setClockDivider readLightSensor endTransmission ' + 'analogReference detachInterrupt countryNameRead ' + 'attachInterrupt encryptionType readBytesUntil ' + 'robotNameWrite readMicrophone robotNameRead cityNameWrite ' + 'userNameWrite readJoystickY readJoystickX mouseReleased ' + 'openNextFile scanNetworks noInterrupts digitalWrite ' + 'beginSpeaker mousePressed isActionDone mouseDragged ' + 'displayLogos noAutoscroll addParameter remoteNumber ' + 'getModifiers keyboardRead userNameRead waitContinue ' + 'processInput parseCommand printVersion readNetworks ' + 'writeMessage blinkVersion cityNameRead readMessage ' + 'setDataMode parsePacket isListening setBitOrder ' + 'beginPacket isDirectory motorsWrite drawCompass ' + 'digitalRead clearScreen serialEvent rightToLeft ' + 'setTextSize leftToRight requestFrom keyReleased ' + 'compassRead analogWrite interrupts WiFiServer ' + 'disconnect playMelody parseFloat autoscroll ' + 'getPINUsed setPINUsed setTimeout sendAnalog ' + 'readSlider analogRead beginWrite createChar ' + 'motorsStop keyPressed tempoWrite readButton ' + 'subnetMask debugPrint macAddress writeGreen ' + 'randomSeed attachGPRS readString sendString ' + 'remotePort releaseAll mouseMoved background ' + 'getXChange getYChange answerCall getResult ' + 'voiceCall endPacket constrain getSocket writeJSON ' + 'getButton available connected findUntil readBytes ' + 'exitValue readGreen writeBlue startLoop IPAddress ' + 'isPressed sendSysex pauseMode gatewayIP setCursor ' + 'getOemKey tuneWrite noDisplay loadImage switchPIN ' + 'onRequest onReceive changePIN playFile noBuffer ' + 'parseInt overflow checkPIN knobRead beginTFT ' + 'bitClear updateIR bitWrite position writeRGB ' + 'highByte writeRed setSpeed readBlue noStroke ' + 'remoteIP transfer shutdown hangCall beginSMS ' + 'endWrite attached maintain noCursor checkReg ' + 'checkPUK shiftOut isValid shiftIn pulseIn ' + 'connect println localIP pinMode getIMEI ' + 'display noBlink process getBand running beginSD ' + 'drawBMP lowByte setBand release bitRead prepare ' + 'pointTo readRed setMode noFill remove listen ' + 'stroke detach attach noTone exists buffer ' + 'height bitSet circle config cursor random ' + 'IRread setDNS endSMS getKey micros ' + 'millis begin print write ready flush width ' + 'isPIN blink clear press mkdir rmdir close ' + 'point yield image BSSID click delay ' + 'read text move peek beep rect line open ' + 'seek fill size turn stop home find ' + 'step tone sqrt RSSI SSID ' + 'end bit tan cos sin pow map abs max ' + 'min get run put',\n    literal: 'DIGITAL_MESSAGE FIRMATA_STRING ANALOG_MESSAGE ' + 'REPORT_DIGITAL REPORT_ANALOG INPUT_PULLUP ' + 'SET_PIN_MODE INTERNAL2V56 SYSTEM_RESET LED_BUILTIN ' + 'INTERNAL1V1 SYSEX_START INTERNAL EXTERNAL ' + 'DEFAULT OUTPUT INPUT HIGH LOW'\n  };\n  const ARDUINO = cPlusPlus(hljs);\n  const kws = ARDUINO.keywords;\n  kws.keyword += ' ' + ARDUINO_KW.keyword;\n  kws.literal += ' ' + ARDUINO_KW.literal;\n  kws.built_in += ' ' + ARDUINO_KW.built_in;\n  kws._ += ' ' + ARDUINO_KW._;\n  ARDUINO.name = 'Arduino';\n  ARDUINO.aliases = ['ino'];\n  ARDUINO.supersetOf = \"cpp\";\n  return ARDUINO;\n}\n\nmodule.exports = arduino;","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/highlight.js/lib/languages/arduino.js"],"names":["source","re","lookahead","concat","optional","args","joined","map","x","join","cPlusPlus","hljs","C_LINE_COMMENT_MODE","COMMENT","contains","begin","DECLTYPE_AUTO_RE","NAMESPACE_RE","TEMPLATE_ARGUMENT_RE","FUNCTION_TYPE_RE","CPP_PRIMITIVE_TYPES","className","CHARACTER_ESCAPES","STRINGS","variants","end","illegal","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","COMMON_CPP_HINTS","CPP_KEYWORDS","keyword","built_in","_relevance_hints","literal","FUNCTION_DISPATCH","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","FUNCTION_DECLARATION","returnBegin","excludeEnd","endsWithParent","name","aliases","classNameAliases","exports","preprocessor","strings","arduino","ARDUINO_KW","_","ARDUINO","kws","supersetOf","module"],"mappings":"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","sourcesContent":["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction lookahead(re) {\r\n  return concat('(?=', re, ')');\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction optional(re) {\r\n  return concat('(', re, ')?');\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/*\r\nLanguage: C++\r\nCategory: common, system\r\nWebsite: https://isocpp.org\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction cPlusPlus(hljs) {\r\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\r\n  // not include such support nor can we be sure all the grammars depending\r\n  // on it would desire this behavior\r\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\r\n    contains: [\r\n      {\r\n        begin: /\\\\\\n/\r\n      }\r\n    ]\r\n  });\r\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\r\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\r\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\r\n  const FUNCTION_TYPE_RE = '(' +\r\n    DECLTYPE_AUTO_RE + '|' +\r\n    optional(NAMESPACE_RE) +\r\n    '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\r\n  ')';\r\n  const CPP_PRIMITIVE_TYPES = {\r\n    className: 'keyword',\r\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\r\n  };\r\n\r\n  // https://en.cppreference.com/w/cpp/language/escape\r\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\r\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\r\n  const STRINGS = {\r\n    className: 'string',\r\n    variants: [\r\n      {\r\n        begin: '(u8?|U|L)?\"',\r\n        end: '\"',\r\n        illegal: '\\\\n',\r\n        contains: [ hljs.BACKSLASH_ESCAPE ]\r\n      },\r\n      {\r\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\r\n        end: '\\'',\r\n        illegal: '.'\r\n      },\r\n      hljs.END_SAME_AS_BEGIN({\r\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\r\n        end: /\\)([^()\\\\ ]{0,16})\"/\r\n      })\r\n    ]\r\n  };\r\n\r\n  const NUMBERS = {\r\n    className: 'number',\r\n    variants: [\r\n      {\r\n        begin: '\\\\b(0b[01\\']+)'\r\n      },\r\n      {\r\n        begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\r\n      },\r\n      {\r\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\r\n      }\r\n    ],\r\n    relevance: 0\r\n  };\r\n\r\n  const PREPROCESSOR = {\r\n    className: 'meta',\r\n    begin: /#\\s*[a-z]+\\b/,\r\n    end: /$/,\r\n    keywords: {\r\n      'meta-keyword':\r\n        'if else elif endif define undef warning error line ' +\r\n        'pragma _Pragma ifdef ifndef include'\r\n    },\r\n    contains: [\r\n      {\r\n        begin: /\\\\\\n/,\r\n        relevance: 0\r\n      },\r\n      hljs.inherit(STRINGS, {\r\n        className: 'meta-string'\r\n      }),\r\n      {\r\n        className: 'meta-string',\r\n        begin: /<.*?>/\r\n      },\r\n      C_LINE_COMMENT_MODE,\r\n      hljs.C_BLOCK_COMMENT_MODE\r\n    ]\r\n  };\r\n\r\n  const TITLE_MODE = {\r\n    className: 'title',\r\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\r\n    relevance: 0\r\n  };\r\n\r\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\r\n\r\n  const COMMON_CPP_HINTS = [\r\n    'asin',\r\n    'atan2',\r\n    'atan',\r\n    'calloc',\r\n    'ceil',\r\n    'cosh',\r\n    'cos',\r\n    'exit',\r\n    'exp',\r\n    'fabs',\r\n    'floor',\r\n    'fmod',\r\n    'fprintf',\r\n    'fputs',\r\n    'free',\r\n    'frexp',\r\n    'auto_ptr',\r\n    'deque',\r\n    'list',\r\n    'queue',\r\n    'stack',\r\n    'vector',\r\n    'map',\r\n    'set',\r\n    'pair',\r\n    'bitset',\r\n    'multiset',\r\n    'multimap',\r\n    'unordered_set',\r\n    'fscanf',\r\n    'future',\r\n    'isalnum',\r\n    'isalpha',\r\n    'iscntrl',\r\n    'isdigit',\r\n    'isgraph',\r\n    'islower',\r\n    'isprint',\r\n    'ispunct',\r\n    'isspace',\r\n    'isupper',\r\n    'isxdigit',\r\n    'tolower',\r\n    'toupper',\r\n    'labs',\r\n    'ldexp',\r\n    'log10',\r\n    'log',\r\n    'malloc',\r\n    'realloc',\r\n    'memchr',\r\n    'memcmp',\r\n    'memcpy',\r\n    'memset',\r\n    'modf',\r\n    'pow',\r\n    'printf',\r\n    'putchar',\r\n    'puts',\r\n    'scanf',\r\n    'sinh',\r\n    'sin',\r\n    'snprintf',\r\n    'sprintf',\r\n    'sqrt',\r\n    'sscanf',\r\n    'strcat',\r\n    'strchr',\r\n    'strcmp',\r\n    'strcpy',\r\n    'strcspn',\r\n    'strlen',\r\n    'strncat',\r\n    'strncmp',\r\n    'strncpy',\r\n    'strpbrk',\r\n    'strrchr',\r\n    'strspn',\r\n    'strstr',\r\n    'tanh',\r\n    'tan',\r\n    'unordered_map',\r\n    'unordered_multiset',\r\n    'unordered_multimap',\r\n    'priority_queue',\r\n    'make_pair',\r\n    'array',\r\n    'shared_ptr',\r\n    'abort',\r\n    'terminate',\r\n    'abs',\r\n    'acos',\r\n    'vfprintf',\r\n    'vprintf',\r\n    'vsprintf',\r\n    'endl',\r\n    'initializer_list',\r\n    'unique_ptr',\r\n    'complex',\r\n    'imaginary',\r\n    'std',\r\n    'string',\r\n    'wstring',\r\n    'cin',\r\n    'cout',\r\n    'cerr',\r\n    'clog',\r\n    'stdin',\r\n    'stdout',\r\n    'stderr',\r\n    'stringstream',\r\n    'istringstream',\r\n    'ostringstream'\r\n  ];\r\n\r\n  const CPP_KEYWORDS = {\r\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\r\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\r\n      'unsigned long volatile static protected bool template mutable if public friend ' +\r\n      'do goto auto void enum else break extern using asm case typeid wchar_t ' +\r\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\r\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\r\n      'concept co_await co_return co_yield requires ' +\r\n      'noexcept static_assert thread_local restrict final override ' +\r\n      'atomic_bool atomic_char atomic_schar ' +\r\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\r\n      'atomic_ullong new throw return ' +\r\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\r\n    built_in: '_Bool _Complex _Imaginary',\r\n    _relevance_hints: COMMON_CPP_HINTS,\r\n    literal: 'true false nullptr NULL'\r\n  };\r\n\r\n  const FUNCTION_DISPATCH = {\r\n    className: \"function.dispatch\",\r\n    relevance: 0,\r\n    keywords: CPP_KEYWORDS,\r\n    begin: concat(\r\n      /\\b/,\r\n      /(?!decltype)/,\r\n      /(?!if)/,\r\n      /(?!for)/,\r\n      /(?!while)/,\r\n      hljs.IDENT_RE,\r\n      lookahead(/\\s*\\(/))\r\n  };\r\n\r\n  const EXPRESSION_CONTAINS = [\r\n    FUNCTION_DISPATCH,\r\n    PREPROCESSOR,\r\n    CPP_PRIMITIVE_TYPES,\r\n    C_LINE_COMMENT_MODE,\r\n    hljs.C_BLOCK_COMMENT_MODE,\r\n    NUMBERS,\r\n    STRINGS\r\n  ];\r\n\r\n\r\n  const EXPRESSION_CONTEXT = {\r\n    // This mode covers expression context where we can't expect a function\r\n    // definition and shouldn't highlight anything that looks like one:\r\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\r\n    variants: [\r\n      {\r\n        begin: /=/,\r\n        end: /;/\r\n      },\r\n      {\r\n        begin: /\\(/,\r\n        end: /\\)/\r\n      },\r\n      {\r\n        beginKeywords: 'new throw return else',\r\n        end: /;/\r\n      }\r\n    ],\r\n    keywords: CPP_KEYWORDS,\r\n    contains: EXPRESSION_CONTAINS.concat([\r\n      {\r\n        begin: /\\(/,\r\n        end: /\\)/,\r\n        keywords: CPP_KEYWORDS,\r\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\r\n        relevance: 0\r\n      }\r\n    ]),\r\n    relevance: 0\r\n  };\r\n\r\n  const FUNCTION_DECLARATION = {\r\n    className: 'function',\r\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\r\n    returnBegin: true,\r\n    end: /[{;=]/,\r\n    excludeEnd: true,\r\n    keywords: CPP_KEYWORDS,\r\n    illegal: /[^\\w\\s\\*&:<>.]/,\r\n    contains: [\r\n      { // to prevent it from being confused as the function title\r\n        begin: DECLTYPE_AUTO_RE,\r\n        keywords: CPP_KEYWORDS,\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: FUNCTION_TITLE,\r\n        returnBegin: true,\r\n        contains: [ TITLE_MODE ],\r\n        relevance: 0\r\n      },\r\n      // needed because we do not have look-behind on the below rule\r\n      // to prevent it from grabbing the final : in a :: pair\r\n      {\r\n        begin: /::/,\r\n        relevance: 0\r\n      },\r\n      // initializers\r\n      {\r\n        begin: /:/,\r\n        endsWithParent: true,\r\n        contains: [\r\n          STRINGS,\r\n          NUMBERS\r\n        ]\r\n      },\r\n      {\r\n        className: 'params',\r\n        begin: /\\(/,\r\n        end: /\\)/,\r\n        keywords: CPP_KEYWORDS,\r\n        relevance: 0,\r\n        contains: [\r\n          C_LINE_COMMENT_MODE,\r\n          hljs.C_BLOCK_COMMENT_MODE,\r\n          STRINGS,\r\n          NUMBERS,\r\n          CPP_PRIMITIVE_TYPES,\r\n          // Count matching parentheses.\r\n          {\r\n            begin: /\\(/,\r\n            end: /\\)/,\r\n            keywords: CPP_KEYWORDS,\r\n            relevance: 0,\r\n            contains: [\r\n              'self',\r\n              C_LINE_COMMENT_MODE,\r\n              hljs.C_BLOCK_COMMENT_MODE,\r\n              STRINGS,\r\n              NUMBERS,\r\n              CPP_PRIMITIVE_TYPES\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      CPP_PRIMITIVE_TYPES,\r\n      C_LINE_COMMENT_MODE,\r\n      hljs.C_BLOCK_COMMENT_MODE,\r\n      PREPROCESSOR\r\n    ]\r\n  };\r\n\r\n  return {\r\n    name: 'C++',\r\n    aliases: [\r\n      'cc',\r\n      'c++',\r\n      'h++',\r\n      'hpp',\r\n      'hh',\r\n      'hxx',\r\n      'cxx'\r\n    ],\r\n    keywords: CPP_KEYWORDS,\r\n    illegal: '</',\r\n    classNameAliases: {\r\n      \"function.dispatch\": \"built_in\"\r\n    },\r\n    contains: [].concat(\r\n      EXPRESSION_CONTEXT,\r\n      FUNCTION_DECLARATION,\r\n      FUNCTION_DISPATCH,\r\n      EXPRESSION_CONTAINS,\r\n      [\r\n        PREPROCESSOR,\r\n        { // containers: ie, `vector <int> rooms (9);`\r\n          begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\r\n          end: '>',\r\n          keywords: CPP_KEYWORDS,\r\n          contains: [\r\n            'self',\r\n            CPP_PRIMITIVE_TYPES\r\n          ]\r\n        },\r\n        {\r\n          begin: hljs.IDENT_RE + '::',\r\n          keywords: CPP_KEYWORDS\r\n        },\r\n        {\r\n          className: 'class',\r\n          beginKeywords: 'enum class struct union',\r\n          end: /[{;:<>=]/,\r\n          contains: [\r\n            {\r\n              beginKeywords: \"final class struct\"\r\n            },\r\n            hljs.TITLE_MODE\r\n          ]\r\n        }\r\n      ]),\r\n    exports: {\r\n      preprocessor: PREPROCESSOR,\r\n      strings: STRINGS,\r\n      keywords: CPP_KEYWORDS\r\n    }\r\n  };\r\n}\r\n\r\n/*\r\nLanguage: Arduino\r\nAuthor: Stefania Mellai <s.mellai@arduino.cc>\r\nDescription: The Arduino® Language is a superset of C++. This rules are designed to highlight the Arduino® source code. For info about language see http://www.arduino.cc.\r\nWebsite: https://www.arduino.cc\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction arduino(hljs) {\r\n  const ARDUINO_KW = {\r\n    keyword:\r\n      'boolean byte word String',\r\n    built_in:\r\n      'KeyboardController MouseController SoftwareSerial ' +\r\n      'EthernetServer EthernetClient LiquidCrystal ' +\r\n      'RobotControl GSMVoiceCall EthernetUDP EsploraTFT ' +\r\n      'HttpClient RobotMotor WiFiClient GSMScanner ' +\r\n      'FileSystem Scheduler GSMServer YunClient YunServer ' +\r\n      'IPAddress GSMClient GSMModem Keyboard Ethernet ' +\r\n      'Console GSMBand Esplora Stepper Process ' +\r\n      'WiFiUDP GSM_SMS Mailbox USBHost Firmata PImage ' +\r\n      'Client Server GSMPIN FileIO Bridge Serial ' +\r\n      'EEPROM Stream Mouse Audio Servo File Task ' +\r\n      'GPRS WiFi Wire TFT GSM SPI SD ',\r\n    _:\r\n      'setup loop ' +\r\n      'runShellCommandAsynchronously analogWriteResolution ' +\r\n      'retrieveCallingNumber printFirmwareVersion ' +\r\n      'analogReadResolution sendDigitalPortPair ' +\r\n      'noListenOnLocalhost readJoystickButton setFirmwareVersion ' +\r\n      'readJoystickSwitch scrollDisplayRight getVoiceCallStatus ' +\r\n      'scrollDisplayLeft writeMicroseconds delayMicroseconds ' +\r\n      'beginTransmission getSignalStrength runAsynchronously ' +\r\n      'getAsynchronously listenOnLocalhost getCurrentCarrier ' +\r\n      'readAccelerometer messageAvailable sendDigitalPorts ' +\r\n      'lineFollowConfig countryNameWrite runShellCommand ' +\r\n      'readStringUntil rewindDirectory readTemperature ' +\r\n      'setClockDivider readLightSensor endTransmission ' +\r\n      'analogReference detachInterrupt countryNameRead ' +\r\n      'attachInterrupt encryptionType readBytesUntil ' +\r\n      'robotNameWrite readMicrophone robotNameRead cityNameWrite ' +\r\n      'userNameWrite readJoystickY readJoystickX mouseReleased ' +\r\n      'openNextFile scanNetworks noInterrupts digitalWrite ' +\r\n      'beginSpeaker mousePressed isActionDone mouseDragged ' +\r\n      'displayLogos noAutoscroll addParameter remoteNumber ' +\r\n      'getModifiers keyboardRead userNameRead waitContinue ' +\r\n      'processInput parseCommand printVersion readNetworks ' +\r\n      'writeMessage blinkVersion cityNameRead readMessage ' +\r\n      'setDataMode parsePacket isListening setBitOrder ' +\r\n      'beginPacket isDirectory motorsWrite drawCompass ' +\r\n      'digitalRead clearScreen serialEvent rightToLeft ' +\r\n      'setTextSize leftToRight requestFrom keyReleased ' +\r\n      'compassRead analogWrite interrupts WiFiServer ' +\r\n      'disconnect playMelody parseFloat autoscroll ' +\r\n      'getPINUsed setPINUsed setTimeout sendAnalog ' +\r\n      'readSlider analogRead beginWrite createChar ' +\r\n      'motorsStop keyPressed tempoWrite readButton ' +\r\n      'subnetMask debugPrint macAddress writeGreen ' +\r\n      'randomSeed attachGPRS readString sendString ' +\r\n      'remotePort releaseAll mouseMoved background ' +\r\n      'getXChange getYChange answerCall getResult ' +\r\n      'voiceCall endPacket constrain getSocket writeJSON ' +\r\n      'getButton available connected findUntil readBytes ' +\r\n      'exitValue readGreen writeBlue startLoop IPAddress ' +\r\n      'isPressed sendSysex pauseMode gatewayIP setCursor ' +\r\n      'getOemKey tuneWrite noDisplay loadImage switchPIN ' +\r\n      'onRequest onReceive changePIN playFile noBuffer ' +\r\n      'parseInt overflow checkPIN knobRead beginTFT ' +\r\n      'bitClear updateIR bitWrite position writeRGB ' +\r\n      'highByte writeRed setSpeed readBlue noStroke ' +\r\n      'remoteIP transfer shutdown hangCall beginSMS ' +\r\n      'endWrite attached maintain noCursor checkReg ' +\r\n      'checkPUK shiftOut isValid shiftIn pulseIn ' +\r\n      'connect println localIP pinMode getIMEI ' +\r\n      'display noBlink process getBand running beginSD ' +\r\n      'drawBMP lowByte setBand release bitRead prepare ' +\r\n      'pointTo readRed setMode noFill remove listen ' +\r\n      'stroke detach attach noTone exists buffer ' +\r\n      'height bitSet circle config cursor random ' +\r\n      'IRread setDNS endSMS getKey micros ' +\r\n      'millis begin print write ready flush width ' +\r\n      'isPIN blink clear press mkdir rmdir close ' +\r\n      'point yield image BSSID click delay ' +\r\n      'read text move peek beep rect line open ' +\r\n      'seek fill size turn stop home find ' +\r\n      'step tone sqrt RSSI SSID ' +\r\n      'end bit tan cos sin pow map abs max ' +\r\n      'min get run put',\r\n    literal:\r\n      'DIGITAL_MESSAGE FIRMATA_STRING ANALOG_MESSAGE ' +\r\n      'REPORT_DIGITAL REPORT_ANALOG INPUT_PULLUP ' +\r\n      'SET_PIN_MODE INTERNAL2V56 SYSTEM_RESET LED_BUILTIN ' +\r\n      'INTERNAL1V1 SYSEX_START INTERNAL EXTERNAL ' +\r\n      'DEFAULT OUTPUT INPUT HIGH LOW'\r\n  };\r\n\r\n  const ARDUINO = cPlusPlus(hljs);\r\n\r\n  const kws = /** @type {Record<string,any>} */ (ARDUINO.keywords);\r\n\r\n  kws.keyword += ' ' + ARDUINO_KW.keyword;\r\n  kws.literal += ' ' + ARDUINO_KW.literal;\r\n  kws.built_in += ' ' + ARDUINO_KW.built_in;\r\n  kws._ += ' ' + ARDUINO_KW._;\r\n\r\n  ARDUINO.name = 'Arduino';\r\n  ARDUINO.aliases = ['ino'];\r\n  ARDUINO.supersetOf = \"cpp\";\r\n\r\n  return ARDUINO;\r\n}\r\n\r\nmodule.exports = arduino;\r\n"]},"metadata":{},"sourceType":"script"}