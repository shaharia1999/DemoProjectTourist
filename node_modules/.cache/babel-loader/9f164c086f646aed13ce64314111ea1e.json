{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = useFocusedIndexState;\n\nvar _react = require(\"react\");\n\nfunction useFocusedIndexState(value, length, disabled, readOnly) {\n  return (0, _react.useMemo)(function () {\n    var canBeFocused = !disabled && !readOnly;\n\n    if (canBeFocused) {\n      var currentLength = value.join('').trim('').length;\n      var newFocusedIndex = currentLength < length ? currentLength : length - 1;\n      return newFocusedIndex;\n    }\n\n    return undefined;\n  }, [value, length, disabled, readOnly]);\n}","map":{"version":3,"sources":["E:/Monirul AWS/PorzotokFrontend/node_modules/react-rainbow-components/components/CodeInput/hooks/useFocusedIndexState.js"],"names":["Object","defineProperty","exports","value","useFocusedIndexState","_react","require","length","disabled","readOnly","useMemo","canBeFocused","currentLength","join","trim","newFocusedIndex","undefined"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,oBAArB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,SAASF,oBAAT,CAA8BD,KAA9B,EAAqCI,MAArC,EAA6CC,QAA7C,EAAuDC,QAAvD,EAAiE;AAC/D,SAAO,CAAC,GAAGJ,MAAM,CAACK,OAAX,EAAoB,YAAY;AACrC,QAAIC,YAAY,GAAG,CAACH,QAAD,IAAa,CAACC,QAAjC;;AAEA,QAAIE,YAAJ,EAAkB;AAChB,UAAIC,aAAa,GAAGT,KAAK,CAACU,IAAN,CAAW,EAAX,EAAeC,IAAf,CAAoB,EAApB,EAAwBP,MAA5C;AACA,UAAIQ,eAAe,GAAGH,aAAa,GAAGL,MAAhB,GAAyBK,aAAzB,GAAyCL,MAAM,GAAG,CAAxE;AACA,aAAOQ,eAAP;AACD;;AAED,WAAOC,SAAP;AACD,GAVM,EAUJ,CAACb,KAAD,EAAQI,MAAR,EAAgBC,QAAhB,EAA0BC,QAA1B,CAVI,CAAP;AAWD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = useFocusedIndexState;\n\nvar _react = require(\"react\");\n\nfunction useFocusedIndexState(value, length, disabled, readOnly) {\n  return (0, _react.useMemo)(function () {\n    var canBeFocused = !disabled && !readOnly;\n\n    if (canBeFocused) {\n      var currentLength = value.join('').trim('').length;\n      var newFocusedIndex = currentLength < length ? currentLength : length - 1;\n      return newFocusedIndex;\n    }\n\n    return undefined;\n  }, [value, length, disabled, readOnly]);\n}"]},"metadata":{},"sourceType":"script"}