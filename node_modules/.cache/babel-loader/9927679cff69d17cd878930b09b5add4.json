{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = BadgeOverlay;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _container = _interopRequireDefault(require(\"./styled/container\"));\n\nvar _badge = _interopRequireDefault(require(\"./styled/badge\"));\n\nvar _utils = require(\"../../libs/utils\");\n/**\n * BadgeOverlay is used to show small numerical value or status\n * descriptors for UI elements. Normally appears in proximity to\n * notifications or user avatars with eye-catching appeal, typically\n * displaying unread messages count.\n */\n\n\nfunction BadgeOverlay(props) {\n  var className = props.className,\n      style = props.style,\n      value = props.value,\n      overlap = props.overlap,\n      children = props.children,\n      variant = props.variant,\n      isHidden = props.isHidden,\n      position = props.position;\n\n  if (children === null) {\n    return null;\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_container[\"default\"], {\n    className: className,\n    style: style,\n    overlap: overlap\n  }, children, /*#__PURE__*/_react[\"default\"].createElement(_badge[\"default\"], {\n    variant: variant,\n    position: position,\n    overlap: overlap,\n    value: value,\n    isHidden: isHidden\n  }, (0, _utils.getSuffixSI)(value)));\n}\n\nBadgeOverlay.propTypes = {\n  /** The content rendered within the badge. If the value is not passed a dot is rendered instead of the badge. */\n  value: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].number]),\n\n  /** Wrapped shape the badge should overlap. This property is used\n   * to place the badge relative to the corner of the wrapped element. */\n  overlap: _propTypes[\"default\"].oneOf(['circle', 'rectangle']),\n\n  /** Object that will have the BadgeOverlay. */\n  children: _propTypes[\"default\"].node,\n\n  /** The variant changes the appearance of the badge. Accepted variants include brand, success, error and warning. The default value is error. */\n  variant: _propTypes[\"default\"].oneOf(['brand', 'success', 'error', 'warning']),\n\n  /** If true, the badge will be hidden. The default value is false. */\n  isHidden: _propTypes[\"default\"].bool,\n\n  /** Describes the position of the badge respect to container.\n   * Options include top-left, top-right, bottom-left and bottom-right.\n   * This value defaults to top-right. */\n  position: _propTypes[\"default\"].oneOf(['top-left', 'top-right', 'bottom-left', 'bottom-right']),\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object\n};\nBadgeOverlay.defaultProps = {\n  value: undefined,\n  overlap: 'rectangle',\n  children: null,\n  variant: 'error',\n  isHidden: false,\n  position: 'top-right',\n  className: undefined,\n  style: undefined\n};","map":{"version":3,"sources":["D:/PorzotokFrontend/node_modules/react-rainbow-components/components/BadgeOverlay/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","BadgeOverlay","_react","_propTypes","_container","_badge","_utils","props","className","style","overlap","children","variant","isHidden","position","createElement","getSuffixSI","propTypes","oneOfType","string","number","oneOf","node","bool","object","defaultProps","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = BadgeOverlay;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _container = _interopRequireDefault(require(\"./styled/container\"));\n\nvar _badge = _interopRequireDefault(require(\"./styled/badge\"));\n\nvar _utils = require(\"../../libs/utils\");\n\n/**\n * BadgeOverlay is used to show small numerical value or status\n * descriptors for UI elements. Normally appears in proximity to\n * notifications or user avatars with eye-catching appeal, typically\n * displaying unread messages count.\n */\nfunction BadgeOverlay(props) {\n  var className = props.className,\n      style = props.style,\n      value = props.value,\n      overlap = props.overlap,\n      children = props.children,\n      variant = props.variant,\n      isHidden = props.isHidden,\n      position = props.position;\n\n  if (children === null) {\n    return null;\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_container[\"default\"], {\n    className: className,\n    style: style,\n    overlap: overlap\n  }, children, /*#__PURE__*/_react[\"default\"].createElement(_badge[\"default\"], {\n    variant: variant,\n    position: position,\n    overlap: overlap,\n    value: value,\n    isHidden: isHidden\n  }, (0, _utils.getSuffixSI)(value)));\n}\n\nBadgeOverlay.propTypes = {\n  /** The content rendered within the badge. If the value is not passed a dot is rendered instead of the badge. */\n  value: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].number]),\n\n  /** Wrapped shape the badge should overlap. This property is used\n   * to place the badge relative to the corner of the wrapped element. */\n  overlap: _propTypes[\"default\"].oneOf(['circle', 'rectangle']),\n\n  /** Object that will have the BadgeOverlay. */\n  children: _propTypes[\"default\"].node,\n\n  /** The variant changes the appearance of the badge. Accepted variants include brand, success, error and warning. The default value is error. */\n  variant: _propTypes[\"default\"].oneOf(['brand', 'success', 'error', 'warning']),\n\n  /** If true, the badge will be hidden. The default value is false. */\n  isHidden: _propTypes[\"default\"].bool,\n\n  /** Describes the position of the badge respect to container.\n   * Options include top-left, top-right, bottom-left and bottom-right.\n   * This value defaults to top-right. */\n  position: _propTypes[\"default\"].oneOf(['top-left', 'top-right', 'bottom-left', 'bottom-right']),\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object\n};\nBadgeOverlay.defaultProps = {\n  value: undefined,\n  overlap: 'rectangle',\n  children: null,\n  variant: 'error',\n  isHidden: false,\n  position: 'top-right',\n  className: undefined,\n  style: undefined\n};"]},"metadata":{},"sourceType":"script"}