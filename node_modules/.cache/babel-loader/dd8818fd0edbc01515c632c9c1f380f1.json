{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _styledComponents = require(\"styled-components\");\n\nvar _body = _interopRequireDefault(require(\"./body\"));\n\nvar _head = _interopRequireDefault(require(\"./head\"));\n\nvar _sort = require(\"./helpers/sort\");\n\nvar _columns = require(\"./helpers/columns\");\n\nvar _resizer = require(\"./helpers/resizer\");\n\nvar _rows = require(\"./helpers/rows\");\n\nvar _selector = require(\"./helpers/selector\");\n\nvar _data = require(\"./helpers/data\");\n\nvar _ResizeSensor = _interopRequireDefault(require(\"../../libs/ResizeSensor\"));\n\nvar _debounce = _interopRequireDefault(require(\"../../libs/debounce\"));\n\nvar _utils = require(\"../../libs/utils\");\n\nvar _empty = _interopRequireDefault(require(\"./body/icons/empty\"));\n\nvar _container = _interopRequireDefault(require(\"./styled/container\"));\n\nvar _scrollableX = _interopRequireDefault(require(\"./styled/scrollableX\"));\n\nvar _scrollableY = _interopRequireDefault(require(\"./styled/scrollableY\"));\n\nvar _table = _interopRequireDefault(require(\"./styled/table\"));\n\nvar _tableBody = _interopRequireDefault(require(\"./styled/tableBody\"));\n\nvar _thead = _interopRequireDefault(require(\"./styled/thead\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * A table lists a collection of data that makes sense when displays them in rows and columns.\n * The data contained in a table is easier to read due to the format, so it can be useful to sort,\n * search, and filter your data.\n * @category DataView\n */\n\n\nvar Table = /*#__PURE__*/function (_Component) {\n  (0, _inherits2[\"default\"])(Table, _Component);\n\n  var _super = _createSuper(Table);\n\n  function Table(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Table);\n    _this = _super.call(this, props);\n    var children = props.children,\n        showCheckboxColumn = props.showCheckboxColumn,\n        keyField = props.keyField,\n        data = props.data,\n        showRowNumberColumn = props.showRowNumberColumn,\n        rowNumberOffset = props.rowNumberOffset,\n        maxRowSelection = props.maxRowSelection,\n        minColumnWidth = props.minColumnWidth,\n        maxColumnWidth = props.maxColumnWidth,\n        selectedRows = props.selectedRows,\n        variant = props.variant;\n    _this.state = {\n      columns: (0, _columns.getColumns)({\n        children: children,\n        showCheckboxColumn: showCheckboxColumn,\n        showRowNumberColumn: showRowNumberColumn,\n        rowNumberOffset: rowNumberOffset,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth,\n        variant: variant\n      }),\n      tableWidth: undefined,\n      rows: (0, _rows.getRows)({\n        keyField: keyField,\n        rows: (0, _data.normalizeData)(data),\n        maxRowSelection: maxRowSelection && Number(maxRowSelection),\n        selectedRowsKeys: {}\n      }),\n      bulkSelection: 'none'\n    };\n    var rows = _this.state.rows;\n    _this.indexes = (0, _rows.getIndexes)(rows);\n    _this.selectedRowsKeys = (0, _selector.getSelectedRowKeysFromSelectedRows)(selectedRows, _this.indexes);\n    _this.tableId = (0, _utils.uniqueId)('table');\n    _this.tableContainerRef = /*#__PURE__*/_react[\"default\"].createRef();\n    _this.resizeTarget = /*#__PURE__*/_react[\"default\"].createRef();\n    _this.handleSort = _this.handleSort.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleResize = _this.handleResize.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.updateColumnsAndTableWidth = _this.updateColumnsAndTableWidth.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleSelectRow = _this.handleSelectRow.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleDeselectRow = _this.handleDeselectRow.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleSelectAllRows = _this.handleSelectAllRows.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleDeselectAllRows = _this.handleDeselectAllRows.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.scrollableY = /*#__PURE__*/_react[\"default\"].createRef();\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Table, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.widthObserver = new _ResizeSensor[\"default\"](this.resizeTarget.current, (0, _debounce[\"default\"])(this.updateColumnsAndTableWidth, 200));\n      this.updateRows();\n      this.updateColumnsAndTableWidth();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevChildren = prevProps.children,\n          prevShowCheckboxColumn = prevProps.showCheckboxColumn,\n          prevMaxRowSelection = prevProps.maxRowSelection,\n          prevSelectedRows = prevProps.selectedRows,\n          prevData = prevProps.data,\n          prevMinColumnWidth = prevProps.minColumnWidth,\n          prevMaxColumnWidth = prevProps.maxColumnWidth;\n      var _this$props = this.props,\n          children = _this$props.children,\n          showCheckboxColumn = _this$props.showCheckboxColumn,\n          showRowNumberColumn = _this$props.showRowNumberColumn,\n          rowNumberOffset = _this$props.rowNumberOffset,\n          maxRowSelection = _this$props.maxRowSelection,\n          selectedRows = _this$props.selectedRows,\n          data = _this$props.data,\n          keyField = _this$props.keyField,\n          minColumnWidth = _this$props.minColumnWidth,\n          maxColumnWidth = _this$props.maxColumnWidth,\n          onRowSelection = _this$props.onRowSelection,\n          variant = _this$props.variant;\n      var prevColumns = (0, _columns.getColumns)({\n        children: prevChildren,\n        showCheckboxColumn: prevShowCheckboxColumn,\n        showRowNumberColumn: showRowNumberColumn,\n        rowNumberOffset: rowNumberOffset,\n        minColumnWidth: prevMinColumnWidth,\n        maxColumnWidth: prevMaxColumnWidth,\n        variant: variant\n      });\n      var currentColumns = (0, _columns.getColumns)({\n        children: children,\n        showCheckboxColumn: showCheckboxColumn,\n        showRowNumberColumn: showRowNumberColumn,\n        rowNumberOffset: rowNumberOffset,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth,\n        variant: variant\n      });\n      var isNotSameMaxRowSelection = prevMaxRowSelection !== maxRowSelection;\n      var isNotSameData = data !== prevData;\n\n      if (isNotSameMaxRowSelection || isNotSameData) {\n        this.updateRows();\n      }\n\n      if ((0, _columns.isNotSameColumns)(prevColumns, currentColumns)) {\n        this.updateColumnsAndTableWidth(currentColumns);\n      }\n\n      var isNotSameSelectedRows = prevSelectedRows !== selectedRows;\n\n      if (isNotSameSelectedRows) {\n        var selectedRowsKeysLength = Object.keys(this.selectedRowsKeys).length;\n\n        if (selectedRowsKeysLength !== selectedRows.length) {\n          this.selectedRowsKeys = (0, _selector.getSelectedRowKeysFromSelectedRows)(selectedRows, this.indexes);\n          var updatedRows = (0, _rows.getRows)({\n            keyField: keyField,\n            rows: (0, _data.normalizeData)(data),\n            maxRowSelection: maxRowSelection,\n            selectedRowsKeys: this.selectedRowsKeys\n          });\n          onRowSelection(this.getSelectedRows(updatedRows));\n          this.updateRows();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.widthObserver.detach();\n    }\n  }, {\n    key: \"getTableWidthFromDom\",\n    value: function getTableWidthFromDom() {\n      var containerElement = this.tableContainerRef.current;\n\n      if (containerElement) {\n        return containerElement.offsetWidth;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"getSelectedRows\",\n    value: function getSelectedRows(rows) {\n      var data = this.props.data;\n      return (0, _data.normalizeData)(data).filter(function (item, index) {\n        return rows[index].isSelected;\n      });\n    }\n  }, {\n    key: \"getMaxRowSelection\",\n    value: function getMaxRowSelection() {\n      var _this$props2 = this.props,\n          maxRowSelection = _this$props2.maxRowSelection,\n          data = _this$props2.data;\n      var rowsLength = (0, _data.normalizeData)(data).length;\n      var maxRowSelectionNumber = Number(maxRowSelection);\n\n      if (!(0, _selector.isValidMaxRowSelection)(maxRowSelection, rowsLength)) {\n        return rowsLength;\n      }\n\n      return maxRowSelectionNumber;\n    }\n    /**\n     * It will scroll to the top of the Y scrollable container.\n     * @public\n     */\n\n  }, {\n    key: \"scrollTop\",\n    value: function scrollTop() {\n      this.scrollableY.current.scrollTop = 0;\n    }\n  }, {\n    key: \"updateRows\",\n    value: function updateRows() {\n      var _this$props3 = this.props,\n          keyField = _this$props3.keyField,\n          selectedRows = _this$props3.selectedRows,\n          onRowSelection = _this$props3.onRowSelection,\n          data = _this$props3.data;\n      var maxRowSelection = this.getMaxRowSelection();\n      var newRows = (0, _rows.getRows)({\n        keyField: keyField,\n        rows: (0, _data.normalizeData)(data),\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.indexes = (0, _rows.getIndexes)(newRows);\n      var selectedRowsKeysLength = Object.keys(this.selectedRowsKeys).length;\n      var currentSelectedRows = this.getSelectedRows(newRows);\n      var isNotSameSelectedRowsWithNewData = selectedRowsKeysLength !== currentSelectedRows.length;\n\n      if (isNotSameSelectedRowsWithNewData) {\n        onRowSelection(currentSelectedRows);\n        this.selectedRowsKeys = (0, _selector.getSelectedRowKeys)(currentSelectedRows, keyField);\n      }\n\n      this.setState({\n        rows: (0, _selector.getRowsWithInitalSelectedRows)({\n          rows: newRows,\n          selectedRows: selectedRows,\n          maxRowSelection: maxRowSelection,\n          indexes: this.indexes,\n          selectedRowsKeys: this.selectedRowsKeys\n        }),\n        bulkSelection: (0, _selector.getBulkSelectionState)({\n          maxRowSelection: maxRowSelection,\n          selectedRowsKeys: this.selectedRowsKeys\n        })\n      });\n    }\n  }, {\n    key: \"updateColumnsAndTableWidth\",\n    value: function updateColumnsAndTableWidth(newColumns) {\n      var columns = this.state.columns;\n      var _this$props4 = this.props,\n          minColumnWidth = _this$props4.minColumnWidth,\n          maxColumnWidth = _this$props4.maxColumnWidth;\n      var domTableWidth = this.getTableWidthFromDom();\n      var minColWidth = Number(minColumnWidth) || 50;\n      var maxColWidth = Number(maxColumnWidth) || Infinity;\n      var updatedColumns = (0, _resizer.getUpdatedColumns)({\n        columns: newColumns || columns,\n        domTableWidth: domTableWidth,\n        minColumnWidth: minColWidth,\n        maxColumnWidth: maxColWidth\n      });\n      this.setState({\n        columns: updatedColumns\n      });\n\n      if (this.hasFlexibleColumns()) {\n        this.setState({\n          tableWidth: (0, _resizer.getTableWidth)(updatedColumns)\n        });\n      }\n    }\n  }, {\n    key: \"handleSelectAllRows\",\n    value: function handleSelectAllRows() {\n      var onRowSelection = this.props.onRowSelection;\n      var rows = this.state.rows;\n      var maxRowSelection = this.getMaxRowSelection();\n      this.selectedRowsKeys = {};\n      var updatedRows = (0, _selector.getUpdatedRowsWhenSelectAll)({\n        rows: rows,\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      var bulkSelection = (0, _selector.getBulkSelectionState)({\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.setState({\n        rows: updatedRows,\n        bulkSelection: bulkSelection\n      });\n      onRowSelection(this.getSelectedRows(updatedRows));\n    }\n  }, {\n    key: \"handleDeselectAllRows\",\n    value: function handleDeselectAllRows() {\n      var onRowSelection = this.props.onRowSelection;\n      var rows = this.state.rows;\n      this.selectedRowsKeys = {};\n      var updatedRows = (0, _selector.getUpdatedRowsWhenDeselectAll)(rows);\n      var bulkSelection = (0, _selector.getBulkSelectionState)({\n        maxRowSelection: this.getMaxRowSelection(),\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.setState({\n        rows: updatedRows,\n        bulkSelection: bulkSelection\n      });\n      onRowSelection(this.getSelectedRows(updatedRows));\n    }\n  }, {\n    key: \"handleSelectRow\",\n    value: function handleSelectRow(event, isMultiple, rowKeyValue) {\n      var onRowSelection = this.props.onRowSelection;\n      var indexes = this.indexes;\n      var rows = this.state.rows;\n      var maxRowSelection = this.getMaxRowSelection();\n\n      if (maxRowSelection > 1) {\n        var updatedRows = (0, _selector.getUpdatedRowsWhenSelect)({\n          maxRowSelection: maxRowSelection,\n          rows: rows,\n          indexes: indexes,\n          isMultiple: isMultiple,\n          rowKeyValue: rowKeyValue,\n          lastSelectedRowKey: this.lastSelectedRowKey,\n          selectedRowsKeys: this.selectedRowsKeys\n        });\n        var bulkSelection = (0, _selector.getBulkSelectionState)({\n          maxRowSelection: maxRowSelection,\n          selectedRowsKeys: this.selectedRowsKeys\n        });\n        this.setState({\n          rows: updatedRows,\n          bulkSelection: bulkSelection\n        });\n        onRowSelection(this.getSelectedRows(updatedRows));\n      } else {\n        this.selectedRowsKeys = {};\n        this.selectedRowsKeys[rowKeyValue] = true;\n\n        var _updatedRows = (0, _selector.getUpdatedRowsWhenSelect)({\n          maxRowSelection: maxRowSelection,\n          rows: rows,\n          rowKeyValue: rowKeyValue,\n          selectedRowsKeys: this.selectedRowsKeys\n        });\n\n        this.setState({\n          rows: _updatedRows\n        });\n        onRowSelection(this.getSelectedRows(_updatedRows));\n      }\n\n      this.lastSelectedRowKey = rowKeyValue;\n    }\n  }, {\n    key: \"handleDeselectRow\",\n    value: function handleDeselectRow(event, isMultiple, rowKeyValue) {\n      var onRowSelection = this.props.onRowSelection;\n      var indexes = this.indexes;\n      var rows = this.state.rows;\n      var maxRowSelection = this.getMaxRowSelection();\n      var updatedRows = (0, _selector.getUpdatedRowsWhenDeselect)({\n        maxRowSelection: maxRowSelection,\n        rows: rows,\n        indexes: indexes,\n        isMultiple: isMultiple,\n        rowKeyValue: rowKeyValue,\n        lastSelectedRowKey: this.lastSelectedRowKey,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      var bulkSelection = (0, _selector.getBulkSelectionState)({\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.setState({\n        rows: updatedRows,\n        bulkSelection: bulkSelection\n      });\n      this.lastSelectedRowKey = rowKeyValue;\n      onRowSelection(this.getSelectedRows(updatedRows));\n    }\n  }, {\n    key: \"hasFlexibleColumns\",\n    value: function hasFlexibleColumns() {\n      var columns = this.state.columns;\n      return columns.some(function (column) {\n        return column.isResized !== true;\n      });\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize(widthDelta, colIndex) {\n      var _this$state = this.state,\n          columns = _this$state.columns,\n          tableWidth = _this$state.tableWidth;\n\n      if (widthDelta !== 0) {\n        this.setState({\n          columns: (0, _resizer.getResizedColumns)({\n            columns: columns,\n            colIndex: colIndex,\n            widthDelta: widthDelta\n          }),\n          tableWidth: tableWidth + widthDelta\n        });\n      }\n    }\n  }, {\n    key: \"handleSort\",\n    value: function handleSort(event, field, sortDirection) {\n      var _this$props5 = this.props,\n          onSort = _this$props5.onSort,\n          sortedBy = _this$props5.sortedBy;\n      var nextSortDirection = (0, _sort.getNextSortDirection)(field, sortedBy, sortDirection);\n      onSort(event, field, nextSortDirection);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          id = _this$props6.id,\n          data = _this$props6.data,\n          sortedBy = _this$props6.sortedBy,\n          sortDirection = _this$props6.sortDirection,\n          defaultSortDirection = _this$props6.defaultSortDirection,\n          resizeColumnDisabled = _this$props6.resizeColumnDisabled,\n          rowNumberOffset = _this$props6.rowNumberOffset,\n          minColumnWidth = _this$props6.minColumnWidth,\n          maxColumnWidth = _this$props6.maxColumnWidth,\n          style = _this$props6.style,\n          className = _this$props6.className,\n          isLoading = _this$props6.isLoading,\n          emptyIcon = _this$props6.emptyIcon,\n          emptyTitle = _this$props6.emptyTitle,\n          emptyDescription = _this$props6.emptyDescription,\n          keyField = _this$props6.keyField,\n          hideTableHeader = _this$props6.hideTableHeader,\n          variant = _this$props6.variant;\n      var _this$state2 = this.state,\n          columns = _this$state2.columns,\n          tableWidth = _this$state2.tableWidth,\n          rows = _this$state2.rows,\n          bulkSelection = _this$state2.bulkSelection;\n      var tableStyles = {\n        width: tableWidth\n      };\n      var maxRowSelection = this.getMaxRowSelection();\n      var minColWidth = Number(minColumnWidth) || 50;\n      var maxColWidth = Number(maxColumnWidth) || 5000;\n      var isEmpty = data.length === 0;\n      var theme = {\n        variant: variant,\n        hideTableHeader: hideTableHeader,\n        isEmpty: isEmpty\n      };\n\n      if (keyField && typeof keyField === 'string') {\n        return /*#__PURE__*/_react[\"default\"].createElement(_container[\"default\"], {\n          id: id,\n          className: className,\n          style: style\n        }, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n          ref: this.resizeTarget\n        }), /*#__PURE__*/_react[\"default\"].createElement(_styledComponents.ThemeProvider, {\n          theme: theme\n        }, /*#__PURE__*/_react[\"default\"].createElement(_container[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(_scrollableX[\"default\"], {\n          ref: this.tableContainerRef\n        }, /*#__PURE__*/_react[\"default\"].createElement(_scrollableY[\"default\"], {\n          isEmpty: isEmpty,\n          isLoading: isLoading,\n          ref: this.scrollableY,\n          style: tableStyles\n        }, /*#__PURE__*/_react[\"default\"].createElement(_table[\"default\"], {\n          style: tableStyles\n        }, /*#__PURE__*/_react[\"default\"].createElement(_thead[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(\"tr\", null, /*#__PURE__*/_react[\"default\"].createElement(_head[\"default\"], {\n          columns: columns,\n          sortedBy: sortedBy,\n          sortDirection: sortDirection,\n          defaultSortDirection: defaultSortDirection,\n          resizeColumnDisabled: resizeColumnDisabled,\n          minColumnWidth: minColWidth,\n          maxColumnWidth: maxColWidth,\n          onSort: this.handleSort,\n          onResize: this.handleResize,\n          onSelectAllRows: this.handleSelectAllRows,\n          onDeselectAllRows: this.handleDeselectAllRows,\n          tableId: this.tableId,\n          maxRowSelection: maxRowSelection,\n          bulkSelection: bulkSelection\n        }))), /*#__PURE__*/_react[\"default\"].createElement(_tableBody[\"default\"], {\n          rowNumberOffset: rowNumberOffset\n        }, /*#__PURE__*/_react[\"default\"].createElement(_body[\"default\"], {\n          data: (0, _data.normalizeData)(data),\n          columns: columns,\n          rows: rows,\n          tableId: this.tableId,\n          isLoading: isLoading,\n          emptyIcon: emptyIcon,\n          emptyTitle: emptyTitle,\n          emptyDescription: emptyDescription,\n          onSelectRow: this.handleSelectRow,\n          onDeselectRow: this.handleDeselectRow\n        }))))))));\n      }\n\n      console.error('The \"keyField\" is a required prop of the Table component.');\n      return null;\n    }\n  }]);\n  return Table;\n}(_react.Component);\n\nexports[\"default\"] = Table;\nTable.propTypes = {\n  /** An array containing the objects(rows) to be displayed. */\n  data: _propTypes[\"default\"].arrayOf(Object),\n\n  /** The column fieldName that controls the sorting order.\n   * Sorts the data using the onsort event handler. */\n  sortedBy: _propTypes[\"default\"].string,\n\n  /**\n   * Specifies the sorting direction. Valid options are 'asc' or 'desc'.\n   */\n  sortDirection: _propTypes[\"default\"].oneOf(['asc', 'desc']),\n\n  /** Specifies the default sorting direction on an unsorted column.\n   * Valid options include 'asc' and 'desc'.\n   * The default is 'asc' for sorting in ascending order. */\n  defaultSortDirection: _propTypes[\"default\"].oneOf(['asc', 'desc']),\n\n  /** Action triggered when a column is sorted.\n   * Receives the event object, field and sortDirection. */\n  onSort: _propTypes[\"default\"].func,\n\n  /** Specifies whether column resizing is disabled. The default is false. */\n  resizeColumnDisabled: _propTypes[\"default\"].bool,\n\n  /** The minimum width for all columns. The default value is 50px. */\n  minColumnWidth: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** The maximum width for all columns. The default value is Infinity. */\n  maxColumnWidth: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** Shows or hide the checkbox column for row selection. To show set\n   * showCheckboxColumn to true. The default value is false. */\n  showCheckboxColumn: _propTypes[\"default\"].bool,\n\n  /** Shows or hides the row number column. Set to true to show the row number column. The default is false. */\n  showRowNumberColumn: _propTypes[\"default\"].bool,\n\n  /** Determines where to start counting the row number. The default is 0. */\n  rowNumberOffset: _propTypes[\"default\"].number,\n\n  /** The action triggered when a row is selected. Receives the selectedRows array. */\n  onRowSelection: _propTypes[\"default\"].func,\n\n  /** The maximum number of rows that can be selected. When the value is\n   * 1 the selection is made by radio buttons, otherwise with checkboxes. */\n  maxRowSelection: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** An array with a list of keyField values of the selected rows. */\n  selectedRows: _propTypes[\"default\"].array,\n\n  /** It is required to associate each row with a unique ID. Must be one of the data key.\n   * If it is not passed the component will not render.\n   */\n  keyField: _propTypes[\"default\"].string.isRequired,\n\n  /** Specifies whether data is being loaded. The default is false. */\n  isLoading: _propTypes[\"default\"].bool,\n\n  /** The icon that appears in the message of the Table when is empty.\n   * If not passed a fallback icon will be shown. */\n  emptyIcon: _propTypes[\"default\"].node,\n\n  /** The title that appears in the message of the Table when is empty.\n   *  If not passed a fallback title will be shown.\n   */\n  emptyTitle: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The description that appears in the message of the Table when is empty.\n   *  If not passed a fallback description will be shown.\n   */\n  emptyDescription: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The variant changes the appearance of the button. Accepted variants include default and listview. */\n  variant: _propTypes[\"default\"].oneOf(['default', 'listview']),\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** Shows or hides the header column. The default is false */\n  hideTableHeader: _propTypes[\"default\"].bool,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied for the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /**\n   * This prop that should not be visible in the documentation.\n   * @ignore\n   */\n  children: _propTypes[\"default\"].node\n};\nTable.defaultProps = {\n  data: [],\n  sortedBy: undefined,\n  sortDirection: undefined,\n  defaultSortDirection: 'asc',\n  onSort: function onSort() {},\n  resizeColumnDisabled: false,\n  minColumnWidth: 50,\n  maxColumnWidth: Infinity,\n  showCheckboxColumn: false,\n  showRowNumberColumn: false,\n  rowNumberOffset: 0,\n  onRowSelection: function onRowSelection() {},\n  maxRowSelection: undefined,\n  selectedRows: [],\n  isLoading: false,\n  emptyIcon: /*#__PURE__*/_react[\"default\"].createElement(_empty[\"default\"], null),\n  emptyTitle: 'It’s empty here',\n  emptyDescription: 'Our robots did not find any match...',\n  variant: 'default',\n  id: undefined,\n  hideTableHeader: false,\n  className: undefined,\n  style: undefined,\n  children: undefined\n};","map":{"version":3,"sources":["E:/Monirul AWS/PorzotokFrontend/node_modules/react-rainbow-components/components/Table/index.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","_classCallCheck2","_createClass2","_assertThisInitialized2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_react","_propTypes","_styledComponents","_body","_head","_sort","_columns","_resizer","_rows","_selector","_data","_ResizeSensor","_debounce","_utils","_empty","_container","_scrollableX","_scrollableY","_table","_tableBody","_thead","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Date","prototype","toString","call","e","Table","_Component","_super","props","_this","children","showCheckboxColumn","keyField","data","showRowNumberColumn","rowNumberOffset","maxRowSelection","minColumnWidth","maxColumnWidth","selectedRows","variant","state","columns","getColumns","tableWidth","undefined","rows","getRows","normalizeData","Number","selectedRowsKeys","bulkSelection","indexes","getIndexes","getSelectedRowKeysFromSelectedRows","tableId","uniqueId","tableContainerRef","createRef","resizeTarget","handleSort","bind","handleResize","updateColumnsAndTableWidth","handleSelectRow","handleDeselectRow","handleSelectAllRows","handleDeselectAllRows","scrollableY","key","componentDidMount","widthObserver","current","updateRows","componentDidUpdate","prevProps","prevChildren","prevShowCheckboxColumn","prevMaxRowSelection","prevSelectedRows","prevData","prevMinColumnWidth","prevMaxColumnWidth","_this$props","onRowSelection","prevColumns","currentColumns","isNotSameMaxRowSelection","isNotSameData","isNotSameColumns","isNotSameSelectedRows","selectedRowsKeysLength","keys","length","updatedRows","getSelectedRows","componentWillUnmount","detach","getTableWidthFromDom","containerElement","offsetWidth","filter","item","index","isSelected","getMaxRowSelection","_this$props2","rowsLength","maxRowSelectionNumber","isValidMaxRowSelection","scrollTop","_this$props3","newRows","currentSelectedRows","isNotSameSelectedRowsWithNewData","getSelectedRowKeys","setState","getRowsWithInitalSelectedRows","getBulkSelectionState","newColumns","_this$props4","domTableWidth","minColWidth","maxColWidth","Infinity","updatedColumns","getUpdatedColumns","hasFlexibleColumns","getTableWidth","getUpdatedRowsWhenSelectAll","getUpdatedRowsWhenDeselectAll","event","isMultiple","rowKeyValue","getUpdatedRowsWhenSelect","lastSelectedRowKey","_updatedRows","getUpdatedRowsWhenDeselect","some","column","isResized","widthDelta","colIndex","_this$state","getResizedColumns","field","sortDirection","_this$props5","onSort","sortedBy","nextSortDirection","getNextSortDirection","render","_this$props6","id","defaultSortDirection","resizeColumnDisabled","style","className","isLoading","emptyIcon","emptyTitle","emptyDescription","hideTableHeader","_this$state2","tableStyles","width","isEmpty","theme","createElement","ref","ThemeProvider","onResize","onSelectAllRows","onDeselectAllRows","onSelectRow","onDeselectRow","console","error","Component","propTypes","arrayOf","string","oneOf","func","bool","oneOfType","number","array","isRequired","node","object","defaultProps"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _styledComponents = require(\"styled-components\");\n\nvar _body = _interopRequireDefault(require(\"./body\"));\n\nvar _head = _interopRequireDefault(require(\"./head\"));\n\nvar _sort = require(\"./helpers/sort\");\n\nvar _columns = require(\"./helpers/columns\");\n\nvar _resizer = require(\"./helpers/resizer\");\n\nvar _rows = require(\"./helpers/rows\");\n\nvar _selector = require(\"./helpers/selector\");\n\nvar _data = require(\"./helpers/data\");\n\nvar _ResizeSensor = _interopRequireDefault(require(\"../../libs/ResizeSensor\"));\n\nvar _debounce = _interopRequireDefault(require(\"../../libs/debounce\"));\n\nvar _utils = require(\"../../libs/utils\");\n\nvar _empty = _interopRequireDefault(require(\"./body/icons/empty\"));\n\nvar _container = _interopRequireDefault(require(\"./styled/container\"));\n\nvar _scrollableX = _interopRequireDefault(require(\"./styled/scrollableX\"));\n\nvar _scrollableY = _interopRequireDefault(require(\"./styled/scrollableY\"));\n\nvar _table = _interopRequireDefault(require(\"./styled/table\"));\n\nvar _tableBody = _interopRequireDefault(require(\"./styled/tableBody\"));\n\nvar _thead = _interopRequireDefault(require(\"./styled/thead\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A table lists a collection of data that makes sense when displays them in rows and columns.\n * The data contained in a table is easier to read due to the format, so it can be useful to sort,\n * search, and filter your data.\n * @category DataView\n */\nvar Table = /*#__PURE__*/function (_Component) {\n  (0, _inherits2[\"default\"])(Table, _Component);\n\n  var _super = _createSuper(Table);\n\n  function Table(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Table);\n    _this = _super.call(this, props);\n    var children = props.children,\n        showCheckboxColumn = props.showCheckboxColumn,\n        keyField = props.keyField,\n        data = props.data,\n        showRowNumberColumn = props.showRowNumberColumn,\n        rowNumberOffset = props.rowNumberOffset,\n        maxRowSelection = props.maxRowSelection,\n        minColumnWidth = props.minColumnWidth,\n        maxColumnWidth = props.maxColumnWidth,\n        selectedRows = props.selectedRows,\n        variant = props.variant;\n    _this.state = {\n      columns: (0, _columns.getColumns)({\n        children: children,\n        showCheckboxColumn: showCheckboxColumn,\n        showRowNumberColumn: showRowNumberColumn,\n        rowNumberOffset: rowNumberOffset,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth,\n        variant: variant\n      }),\n      tableWidth: undefined,\n      rows: (0, _rows.getRows)({\n        keyField: keyField,\n        rows: (0, _data.normalizeData)(data),\n        maxRowSelection: maxRowSelection && Number(maxRowSelection),\n        selectedRowsKeys: {}\n      }),\n      bulkSelection: 'none'\n    };\n    var rows = _this.state.rows;\n    _this.indexes = (0, _rows.getIndexes)(rows);\n    _this.selectedRowsKeys = (0, _selector.getSelectedRowKeysFromSelectedRows)(selectedRows, _this.indexes);\n    _this.tableId = (0, _utils.uniqueId)('table');\n    _this.tableContainerRef = /*#__PURE__*/_react[\"default\"].createRef();\n    _this.resizeTarget = /*#__PURE__*/_react[\"default\"].createRef();\n    _this.handleSort = _this.handleSort.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleResize = _this.handleResize.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.updateColumnsAndTableWidth = _this.updateColumnsAndTableWidth.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleSelectRow = _this.handleSelectRow.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleDeselectRow = _this.handleDeselectRow.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleSelectAllRows = _this.handleSelectAllRows.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleDeselectAllRows = _this.handleDeselectAllRows.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.scrollableY = /*#__PURE__*/_react[\"default\"].createRef();\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Table, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.widthObserver = new _ResizeSensor[\"default\"](this.resizeTarget.current, (0, _debounce[\"default\"])(this.updateColumnsAndTableWidth, 200));\n      this.updateRows();\n      this.updateColumnsAndTableWidth();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevChildren = prevProps.children,\n          prevShowCheckboxColumn = prevProps.showCheckboxColumn,\n          prevMaxRowSelection = prevProps.maxRowSelection,\n          prevSelectedRows = prevProps.selectedRows,\n          prevData = prevProps.data,\n          prevMinColumnWidth = prevProps.minColumnWidth,\n          prevMaxColumnWidth = prevProps.maxColumnWidth;\n      var _this$props = this.props,\n          children = _this$props.children,\n          showCheckboxColumn = _this$props.showCheckboxColumn,\n          showRowNumberColumn = _this$props.showRowNumberColumn,\n          rowNumberOffset = _this$props.rowNumberOffset,\n          maxRowSelection = _this$props.maxRowSelection,\n          selectedRows = _this$props.selectedRows,\n          data = _this$props.data,\n          keyField = _this$props.keyField,\n          minColumnWidth = _this$props.minColumnWidth,\n          maxColumnWidth = _this$props.maxColumnWidth,\n          onRowSelection = _this$props.onRowSelection,\n          variant = _this$props.variant;\n      var prevColumns = (0, _columns.getColumns)({\n        children: prevChildren,\n        showCheckboxColumn: prevShowCheckboxColumn,\n        showRowNumberColumn: showRowNumberColumn,\n        rowNumberOffset: rowNumberOffset,\n        minColumnWidth: prevMinColumnWidth,\n        maxColumnWidth: prevMaxColumnWidth,\n        variant: variant\n      });\n      var currentColumns = (0, _columns.getColumns)({\n        children: children,\n        showCheckboxColumn: showCheckboxColumn,\n        showRowNumberColumn: showRowNumberColumn,\n        rowNumberOffset: rowNumberOffset,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth,\n        variant: variant\n      });\n      var isNotSameMaxRowSelection = prevMaxRowSelection !== maxRowSelection;\n      var isNotSameData = data !== prevData;\n\n      if (isNotSameMaxRowSelection || isNotSameData) {\n        this.updateRows();\n      }\n\n      if ((0, _columns.isNotSameColumns)(prevColumns, currentColumns)) {\n        this.updateColumnsAndTableWidth(currentColumns);\n      }\n\n      var isNotSameSelectedRows = prevSelectedRows !== selectedRows;\n\n      if (isNotSameSelectedRows) {\n        var selectedRowsKeysLength = Object.keys(this.selectedRowsKeys).length;\n\n        if (selectedRowsKeysLength !== selectedRows.length) {\n          this.selectedRowsKeys = (0, _selector.getSelectedRowKeysFromSelectedRows)(selectedRows, this.indexes);\n          var updatedRows = (0, _rows.getRows)({\n            keyField: keyField,\n            rows: (0, _data.normalizeData)(data),\n            maxRowSelection: maxRowSelection,\n            selectedRowsKeys: this.selectedRowsKeys\n          });\n          onRowSelection(this.getSelectedRows(updatedRows));\n          this.updateRows();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.widthObserver.detach();\n    }\n  }, {\n    key: \"getTableWidthFromDom\",\n    value: function getTableWidthFromDom() {\n      var containerElement = this.tableContainerRef.current;\n\n      if (containerElement) {\n        return containerElement.offsetWidth;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"getSelectedRows\",\n    value: function getSelectedRows(rows) {\n      var data = this.props.data;\n      return (0, _data.normalizeData)(data).filter(function (item, index) {\n        return rows[index].isSelected;\n      });\n    }\n  }, {\n    key: \"getMaxRowSelection\",\n    value: function getMaxRowSelection() {\n      var _this$props2 = this.props,\n          maxRowSelection = _this$props2.maxRowSelection,\n          data = _this$props2.data;\n      var rowsLength = (0, _data.normalizeData)(data).length;\n      var maxRowSelectionNumber = Number(maxRowSelection);\n\n      if (!(0, _selector.isValidMaxRowSelection)(maxRowSelection, rowsLength)) {\n        return rowsLength;\n      }\n\n      return maxRowSelectionNumber;\n    }\n    /**\n     * It will scroll to the top of the Y scrollable container.\n     * @public\n     */\n\n  }, {\n    key: \"scrollTop\",\n    value: function scrollTop() {\n      this.scrollableY.current.scrollTop = 0;\n    }\n  }, {\n    key: \"updateRows\",\n    value: function updateRows() {\n      var _this$props3 = this.props,\n          keyField = _this$props3.keyField,\n          selectedRows = _this$props3.selectedRows,\n          onRowSelection = _this$props3.onRowSelection,\n          data = _this$props3.data;\n      var maxRowSelection = this.getMaxRowSelection();\n      var newRows = (0, _rows.getRows)({\n        keyField: keyField,\n        rows: (0, _data.normalizeData)(data),\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.indexes = (0, _rows.getIndexes)(newRows);\n      var selectedRowsKeysLength = Object.keys(this.selectedRowsKeys).length;\n      var currentSelectedRows = this.getSelectedRows(newRows);\n      var isNotSameSelectedRowsWithNewData = selectedRowsKeysLength !== currentSelectedRows.length;\n\n      if (isNotSameSelectedRowsWithNewData) {\n        onRowSelection(currentSelectedRows);\n        this.selectedRowsKeys = (0, _selector.getSelectedRowKeys)(currentSelectedRows, keyField);\n      }\n\n      this.setState({\n        rows: (0, _selector.getRowsWithInitalSelectedRows)({\n          rows: newRows,\n          selectedRows: selectedRows,\n          maxRowSelection: maxRowSelection,\n          indexes: this.indexes,\n          selectedRowsKeys: this.selectedRowsKeys\n        }),\n        bulkSelection: (0, _selector.getBulkSelectionState)({\n          maxRowSelection: maxRowSelection,\n          selectedRowsKeys: this.selectedRowsKeys\n        })\n      });\n    }\n  }, {\n    key: \"updateColumnsAndTableWidth\",\n    value: function updateColumnsAndTableWidth(newColumns) {\n      var columns = this.state.columns;\n      var _this$props4 = this.props,\n          minColumnWidth = _this$props4.minColumnWidth,\n          maxColumnWidth = _this$props4.maxColumnWidth;\n      var domTableWidth = this.getTableWidthFromDom();\n      var minColWidth = Number(minColumnWidth) || 50;\n      var maxColWidth = Number(maxColumnWidth) || Infinity;\n      var updatedColumns = (0, _resizer.getUpdatedColumns)({\n        columns: newColumns || columns,\n        domTableWidth: domTableWidth,\n        minColumnWidth: minColWidth,\n        maxColumnWidth: maxColWidth\n      });\n      this.setState({\n        columns: updatedColumns\n      });\n\n      if (this.hasFlexibleColumns()) {\n        this.setState({\n          tableWidth: (0, _resizer.getTableWidth)(updatedColumns)\n        });\n      }\n    }\n  }, {\n    key: \"handleSelectAllRows\",\n    value: function handleSelectAllRows() {\n      var onRowSelection = this.props.onRowSelection;\n      var rows = this.state.rows;\n      var maxRowSelection = this.getMaxRowSelection();\n      this.selectedRowsKeys = {};\n      var updatedRows = (0, _selector.getUpdatedRowsWhenSelectAll)({\n        rows: rows,\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      var bulkSelection = (0, _selector.getBulkSelectionState)({\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.setState({\n        rows: updatedRows,\n        bulkSelection: bulkSelection\n      });\n      onRowSelection(this.getSelectedRows(updatedRows));\n    }\n  }, {\n    key: \"handleDeselectAllRows\",\n    value: function handleDeselectAllRows() {\n      var onRowSelection = this.props.onRowSelection;\n      var rows = this.state.rows;\n      this.selectedRowsKeys = {};\n      var updatedRows = (0, _selector.getUpdatedRowsWhenDeselectAll)(rows);\n      var bulkSelection = (0, _selector.getBulkSelectionState)({\n        maxRowSelection: this.getMaxRowSelection(),\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.setState({\n        rows: updatedRows,\n        bulkSelection: bulkSelection\n      });\n      onRowSelection(this.getSelectedRows(updatedRows));\n    }\n  }, {\n    key: \"handleSelectRow\",\n    value: function handleSelectRow(event, isMultiple, rowKeyValue) {\n      var onRowSelection = this.props.onRowSelection;\n      var indexes = this.indexes;\n      var rows = this.state.rows;\n      var maxRowSelection = this.getMaxRowSelection();\n\n      if (maxRowSelection > 1) {\n        var updatedRows = (0, _selector.getUpdatedRowsWhenSelect)({\n          maxRowSelection: maxRowSelection,\n          rows: rows,\n          indexes: indexes,\n          isMultiple: isMultiple,\n          rowKeyValue: rowKeyValue,\n          lastSelectedRowKey: this.lastSelectedRowKey,\n          selectedRowsKeys: this.selectedRowsKeys\n        });\n        var bulkSelection = (0, _selector.getBulkSelectionState)({\n          maxRowSelection: maxRowSelection,\n          selectedRowsKeys: this.selectedRowsKeys\n        });\n        this.setState({\n          rows: updatedRows,\n          bulkSelection: bulkSelection\n        });\n        onRowSelection(this.getSelectedRows(updatedRows));\n      } else {\n        this.selectedRowsKeys = {};\n        this.selectedRowsKeys[rowKeyValue] = true;\n\n        var _updatedRows = (0, _selector.getUpdatedRowsWhenSelect)({\n          maxRowSelection: maxRowSelection,\n          rows: rows,\n          rowKeyValue: rowKeyValue,\n          selectedRowsKeys: this.selectedRowsKeys\n        });\n\n        this.setState({\n          rows: _updatedRows\n        });\n        onRowSelection(this.getSelectedRows(_updatedRows));\n      }\n\n      this.lastSelectedRowKey = rowKeyValue;\n    }\n  }, {\n    key: \"handleDeselectRow\",\n    value: function handleDeselectRow(event, isMultiple, rowKeyValue) {\n      var onRowSelection = this.props.onRowSelection;\n      var indexes = this.indexes;\n      var rows = this.state.rows;\n      var maxRowSelection = this.getMaxRowSelection();\n      var updatedRows = (0, _selector.getUpdatedRowsWhenDeselect)({\n        maxRowSelection: maxRowSelection,\n        rows: rows,\n        indexes: indexes,\n        isMultiple: isMultiple,\n        rowKeyValue: rowKeyValue,\n        lastSelectedRowKey: this.lastSelectedRowKey,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      var bulkSelection = (0, _selector.getBulkSelectionState)({\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.setState({\n        rows: updatedRows,\n        bulkSelection: bulkSelection\n      });\n      this.lastSelectedRowKey = rowKeyValue;\n      onRowSelection(this.getSelectedRows(updatedRows));\n    }\n  }, {\n    key: \"hasFlexibleColumns\",\n    value: function hasFlexibleColumns() {\n      var columns = this.state.columns;\n      return columns.some(function (column) {\n        return column.isResized !== true;\n      });\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize(widthDelta, colIndex) {\n      var _this$state = this.state,\n          columns = _this$state.columns,\n          tableWidth = _this$state.tableWidth;\n\n      if (widthDelta !== 0) {\n        this.setState({\n          columns: (0, _resizer.getResizedColumns)({\n            columns: columns,\n            colIndex: colIndex,\n            widthDelta: widthDelta\n          }),\n          tableWidth: tableWidth + widthDelta\n        });\n      }\n    }\n  }, {\n    key: \"handleSort\",\n    value: function handleSort(event, field, sortDirection) {\n      var _this$props5 = this.props,\n          onSort = _this$props5.onSort,\n          sortedBy = _this$props5.sortedBy;\n      var nextSortDirection = (0, _sort.getNextSortDirection)(field, sortedBy, sortDirection);\n      onSort(event, field, nextSortDirection);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          id = _this$props6.id,\n          data = _this$props6.data,\n          sortedBy = _this$props6.sortedBy,\n          sortDirection = _this$props6.sortDirection,\n          defaultSortDirection = _this$props6.defaultSortDirection,\n          resizeColumnDisabled = _this$props6.resizeColumnDisabled,\n          rowNumberOffset = _this$props6.rowNumberOffset,\n          minColumnWidth = _this$props6.minColumnWidth,\n          maxColumnWidth = _this$props6.maxColumnWidth,\n          style = _this$props6.style,\n          className = _this$props6.className,\n          isLoading = _this$props6.isLoading,\n          emptyIcon = _this$props6.emptyIcon,\n          emptyTitle = _this$props6.emptyTitle,\n          emptyDescription = _this$props6.emptyDescription,\n          keyField = _this$props6.keyField,\n          hideTableHeader = _this$props6.hideTableHeader,\n          variant = _this$props6.variant;\n      var _this$state2 = this.state,\n          columns = _this$state2.columns,\n          tableWidth = _this$state2.tableWidth,\n          rows = _this$state2.rows,\n          bulkSelection = _this$state2.bulkSelection;\n      var tableStyles = {\n        width: tableWidth\n      };\n      var maxRowSelection = this.getMaxRowSelection();\n      var minColWidth = Number(minColumnWidth) || 50;\n      var maxColWidth = Number(maxColumnWidth) || 5000;\n      var isEmpty = data.length === 0;\n      var theme = {\n        variant: variant,\n        hideTableHeader: hideTableHeader,\n        isEmpty: isEmpty\n      };\n\n      if (keyField && typeof keyField === 'string') {\n        return /*#__PURE__*/_react[\"default\"].createElement(_container[\"default\"], {\n          id: id,\n          className: className,\n          style: style\n        }, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n          ref: this.resizeTarget\n        }), /*#__PURE__*/_react[\"default\"].createElement(_styledComponents.ThemeProvider, {\n          theme: theme\n        }, /*#__PURE__*/_react[\"default\"].createElement(_container[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(_scrollableX[\"default\"], {\n          ref: this.tableContainerRef\n        }, /*#__PURE__*/_react[\"default\"].createElement(_scrollableY[\"default\"], {\n          isEmpty: isEmpty,\n          isLoading: isLoading,\n          ref: this.scrollableY,\n          style: tableStyles\n        }, /*#__PURE__*/_react[\"default\"].createElement(_table[\"default\"], {\n          style: tableStyles\n        }, /*#__PURE__*/_react[\"default\"].createElement(_thead[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(\"tr\", null, /*#__PURE__*/_react[\"default\"].createElement(_head[\"default\"], {\n          columns: columns,\n          sortedBy: sortedBy,\n          sortDirection: sortDirection,\n          defaultSortDirection: defaultSortDirection,\n          resizeColumnDisabled: resizeColumnDisabled,\n          minColumnWidth: minColWidth,\n          maxColumnWidth: maxColWidth,\n          onSort: this.handleSort,\n          onResize: this.handleResize,\n          onSelectAllRows: this.handleSelectAllRows,\n          onDeselectAllRows: this.handleDeselectAllRows,\n          tableId: this.tableId,\n          maxRowSelection: maxRowSelection,\n          bulkSelection: bulkSelection\n        }))), /*#__PURE__*/_react[\"default\"].createElement(_tableBody[\"default\"], {\n          rowNumberOffset: rowNumberOffset\n        }, /*#__PURE__*/_react[\"default\"].createElement(_body[\"default\"], {\n          data: (0, _data.normalizeData)(data),\n          columns: columns,\n          rows: rows,\n          tableId: this.tableId,\n          isLoading: isLoading,\n          emptyIcon: emptyIcon,\n          emptyTitle: emptyTitle,\n          emptyDescription: emptyDescription,\n          onSelectRow: this.handleSelectRow,\n          onDeselectRow: this.handleDeselectRow\n        }))))))));\n      }\n\n      console.error('The \"keyField\" is a required prop of the Table component.');\n      return null;\n    }\n  }]);\n  return Table;\n}(_react.Component);\n\nexports[\"default\"] = Table;\nTable.propTypes = {\n  /** An array containing the objects(rows) to be displayed. */\n  data: _propTypes[\"default\"].arrayOf(Object),\n\n  /** The column fieldName that controls the sorting order.\n   * Sorts the data using the onsort event handler. */\n  sortedBy: _propTypes[\"default\"].string,\n\n  /**\n   * Specifies the sorting direction. Valid options are 'asc' or 'desc'.\n   */\n  sortDirection: _propTypes[\"default\"].oneOf(['asc', 'desc']),\n\n  /** Specifies the default sorting direction on an unsorted column.\n   * Valid options include 'asc' and 'desc'.\n   * The default is 'asc' for sorting in ascending order. */\n  defaultSortDirection: _propTypes[\"default\"].oneOf(['asc', 'desc']),\n\n  /** Action triggered when a column is sorted.\n   * Receives the event object, field and sortDirection. */\n  onSort: _propTypes[\"default\"].func,\n\n  /** Specifies whether column resizing is disabled. The default is false. */\n  resizeColumnDisabled: _propTypes[\"default\"].bool,\n\n  /** The minimum width for all columns. The default value is 50px. */\n  minColumnWidth: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** The maximum width for all columns. The default value is Infinity. */\n  maxColumnWidth: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** Shows or hide the checkbox column for row selection. To show set\n   * showCheckboxColumn to true. The default value is false. */\n  showCheckboxColumn: _propTypes[\"default\"].bool,\n\n  /** Shows or hides the row number column. Set to true to show the row number column. The default is false. */\n  showRowNumberColumn: _propTypes[\"default\"].bool,\n\n  /** Determines where to start counting the row number. The default is 0. */\n  rowNumberOffset: _propTypes[\"default\"].number,\n\n  /** The action triggered when a row is selected. Receives the selectedRows array. */\n  onRowSelection: _propTypes[\"default\"].func,\n\n  /** The maximum number of rows that can be selected. When the value is\n   * 1 the selection is made by radio buttons, otherwise with checkboxes. */\n  maxRowSelection: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** An array with a list of keyField values of the selected rows. */\n  selectedRows: _propTypes[\"default\"].array,\n\n  /** It is required to associate each row with a unique ID. Must be one of the data key.\n   * If it is not passed the component will not render.\n   */\n  keyField: _propTypes[\"default\"].string.isRequired,\n\n  /** Specifies whether data is being loaded. The default is false. */\n  isLoading: _propTypes[\"default\"].bool,\n\n  /** The icon that appears in the message of the Table when is empty.\n   * If not passed a fallback icon will be shown. */\n  emptyIcon: _propTypes[\"default\"].node,\n\n  /** The title that appears in the message of the Table when is empty.\n   *  If not passed a fallback title will be shown.\n   */\n  emptyTitle: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The description that appears in the message of the Table when is empty.\n   *  If not passed a fallback description will be shown.\n   */\n  emptyDescription: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The variant changes the appearance of the button. Accepted variants include default and listview. */\n  variant: _propTypes[\"default\"].oneOf(['default', 'listview']),\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** Shows or hides the header column. The default is false */\n  hideTableHeader: _propTypes[\"default\"].bool,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied for the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /**\n   * This prop that should not be visible in the documentation.\n   * @ignore\n   */\n  children: _propTypes[\"default\"].node\n};\nTable.defaultProps = {\n  data: [],\n  sortedBy: undefined,\n  sortDirection: undefined,\n  defaultSortDirection: 'asc',\n  onSort: function onSort() {},\n  resizeColumnDisabled: false,\n  minColumnWidth: 50,\n  maxColumnWidth: Infinity,\n  showCheckboxColumn: false,\n  showRowNumberColumn: false,\n  rowNumberOffset: 0,\n  onRowSelection: function onRowSelection() {},\n  maxRowSelection: undefined,\n  selectedRows: [],\n  isLoading: false,\n  emptyIcon: /*#__PURE__*/_react[\"default\"].createElement(_empty[\"default\"], null),\n  emptyTitle: 'It’s empty here',\n  emptyDescription: 'Our robots did not find any match...',\n  variant: 'default',\n  id: undefined,\n  hideTableHeader: false,\n  className: undefined,\n  style: undefined,\n  children: undefined\n};"]},"metadata":{},"sourceType":"script"}