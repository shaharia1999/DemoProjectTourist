{"ast":null,"code":"/*\r\nLanguage: AVR Assembly\r\nAuthor: Vladimir Ermakov <vooon341@gmail.com>\r\nCategory: assembler\r\nWebsite: https://www.microchip.com/webdoc/avrassembler/avrassembler.wb_instruction_list.html\r\n*/\n\n/** @type LanguageFn */\nfunction avrasm(hljs) {\n  return {\n    name: 'AVR Assembly',\n    case_insensitive: true,\n    keywords: {\n      $pattern: '\\\\.?' + hljs.IDENT_RE,\n      keyword:\n      /* mnemonic */\n      'adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs ' + 'brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr ' + 'clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor ' + 'fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul ' + 'muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs ' + 'sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub ' + 'subi swap tst wdr',\n      built_in:\n      /* general purpose registers */\n      'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 ' + 'r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ' +\n      /* IO Registers (ATMega128) */\n      'ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h ' + 'tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ' + 'ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ' + 'ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk ' + 'tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ' + 'ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr ' + 'porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ' + 'ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf',\n      meta: '.byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list ' + '.listmac .macro .nolist .org .set'\n    },\n    contains: [hljs.C_BLOCK_COMMENT_MODE, hljs.COMMENT(';', '$', {\n      relevance: 0\n    }), hljs.C_NUMBER_MODE, // 0x..., decimal, float\n    hljs.BINARY_NUMBER_MODE, // 0b...\n    {\n      className: 'number',\n      begin: '\\\\b(\\\\$[a-zA-Z0-9]+|0o[0-7]+)' // $..., 0o...\n\n    }, hljs.QUOTE_STRING_MODE, {\n      className: 'string',\n      begin: '\\'',\n      end: '[^\\\\\\\\]\\'',\n      illegal: '[^\\\\\\\\][^\\']'\n    }, {\n      className: 'symbol',\n      begin: '^[A-Za-z0-9_.$]+:'\n    }, {\n      className: 'meta',\n      begin: '#',\n      end: '$'\n    }, {\n      // substitution within a macro\n      className: 'subst',\n      begin: '@[0-9]+'\n    }]\n  };\n}\n\nmodule.exports = avrasm;","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/highlight.js/lib/languages/avrasm.js"],"names":["avrasm","hljs","name","case_insensitive","keywords","$pattern","IDENT_RE","keyword","built_in","meta","contains","C_BLOCK_COMMENT_MODE","COMMENT","relevance","C_NUMBER_MODE","BINARY_NUMBER_MODE","className","begin","QUOTE_STRING_MODE","end","illegal","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,SAAO;AACLC,IAAAA,IAAI,EAAE,cADD;AAELC,IAAAA,gBAAgB,EAAE,IAFb;AAGLC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,QAAQ,EAAE,SAASJ,IAAI,CAACK,QADhB;AAERC,MAAAA,OAAO;AACL;AACA,4FACA,oFADA,GAEA,oFAFA,GAGA,kFAHA,GAIA,uFAJA,GAKA,uFALA,GAMA,mBAVM;AAWRC,MAAAA,QAAQ;AACN;AACA,6FACA,oEADA;AAEA;AACA,0FAHA,GAIA,mFAJA,GAKA,qFALA,GAMA,sFANA,GAOA,oFAPA,GAQA,oFARA,GASA,sFATA,GAUA,sEAvBM;AAwBRC,MAAAA,IAAI,EACF,sFACA;AA1BM,KAHL;AA+BLC,IAAAA,QAAQ,EAAE,CACRT,IAAI,CAACU,oBADG,EAERV,IAAI,CAACW,OAAL,CACE,GADF,EAEE,GAFF,EAGE;AACEC,MAAAA,SAAS,EAAE;AADb,KAHF,CAFQ,EASRZ,IAAI,CAACa,aATG,EASY;AACpBb,IAAAA,IAAI,CAACc,kBAVG,EAUiB;AACzB;AACEC,MAAAA,SAAS,EAAE,QADb;AAEEC,MAAAA,KAAK,EAAE,+BAFT,CAEyC;;AAFzC,KAXQ,EAeRhB,IAAI,CAACiB,iBAfG,EAgBR;AACEF,MAAAA,SAAS,EAAE,QADb;AAEEC,MAAAA,KAAK,EAAE,IAFT;AAGEE,MAAAA,GAAG,EAAE,WAHP;AAIEC,MAAAA,OAAO,EAAE;AAJX,KAhBQ,EAsBR;AACEJ,MAAAA,SAAS,EAAE,QADb;AAEEC,MAAAA,KAAK,EAAE;AAFT,KAtBQ,EA0BR;AACED,MAAAA,SAAS,EAAE,MADb;AAEEC,MAAAA,KAAK,EAAE,GAFT;AAGEE,MAAAA,GAAG,EAAE;AAHP,KA1BQ,EA+BR;AAAE;AACAH,MAAAA,SAAS,EAAE,OADb;AAEEC,MAAAA,KAAK,EAAE;AAFT,KA/BQ;AA/BL,GAAP;AAoED;;AAEDI,MAAM,CAACC,OAAP,GAAiBtB,MAAjB","sourcesContent":["/*\r\nLanguage: AVR Assembly\r\nAuthor: Vladimir Ermakov <vooon341@gmail.com>\r\nCategory: assembler\r\nWebsite: https://www.microchip.com/webdoc/avrassembler/avrassembler.wb_instruction_list.html\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction avrasm(hljs) {\r\n  return {\r\n    name: 'AVR Assembly',\r\n    case_insensitive: true,\r\n    keywords: {\r\n      $pattern: '\\\\.?' + hljs.IDENT_RE,\r\n      keyword:\r\n        /* mnemonic */\r\n        'adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs ' +\r\n        'brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr ' +\r\n        'clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor ' +\r\n        'fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul ' +\r\n        'muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs ' +\r\n        'sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub ' +\r\n        'subi swap tst wdr',\r\n      built_in:\r\n        /* general purpose registers */\r\n        'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 ' +\r\n        'r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ' +\r\n        /* IO Registers (ATMega128) */\r\n        'ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h ' +\r\n        'tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ' +\r\n        'ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ' +\r\n        'ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk ' +\r\n        'tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ' +\r\n        'ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr ' +\r\n        'porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ' +\r\n        'ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf',\r\n      meta:\r\n        '.byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list ' +\r\n        '.listmac .macro .nolist .org .set'\r\n    },\r\n    contains: [\r\n      hljs.C_BLOCK_COMMENT_MODE,\r\n      hljs.COMMENT(\r\n        ';',\r\n        '$',\r\n        {\r\n          relevance: 0\r\n        }\r\n      ),\r\n      hljs.C_NUMBER_MODE, // 0x..., decimal, float\r\n      hljs.BINARY_NUMBER_MODE, // 0b...\r\n      {\r\n        className: 'number',\r\n        begin: '\\\\b(\\\\$[a-zA-Z0-9]+|0o[0-7]+)' // $..., 0o...\r\n      },\r\n      hljs.QUOTE_STRING_MODE,\r\n      {\r\n        className: 'string',\r\n        begin: '\\'',\r\n        end: '[^\\\\\\\\]\\'',\r\n        illegal: '[^\\\\\\\\][^\\']'\r\n      },\r\n      {\r\n        className: 'symbol',\r\n        begin: '^[A-Za-z0-9_.$]+:'\r\n      },\r\n      {\r\n        className: 'meta',\r\n        begin: '#',\r\n        end: '$'\r\n      },\r\n      { // substitution within a macro\r\n        className: 'subst',\r\n        begin: '@[0-9]+'\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = avrasm;\r\n"]},"metadata":{},"sourceType":"script"}