{"ast":null,"code":"'use strict';\n\nvar whitespace = require('is-whitespace-character');\n\nvar decode = require('parse-entities');\n\nvar locate = require('../locate/tag');\n\nmodule.exports = autoLink;\nautoLink.locator = locate;\nautoLink.notInLink = true;\nvar lessThan = '<';\nvar greaterThan = '>';\nvar atSign = '@';\nvar slash = '/';\nvar mailto = 'mailto:';\nvar mailtoLength = mailto.length;\n\nfunction autoLink(eat, value, silent) {\n  var self = this;\n  var subvalue = '';\n  var length = value.length;\n  var index = 0;\n  var queue = '';\n  var hasAtCharacter = false;\n  var link = '';\n  var character;\n  var now;\n  var content;\n  var tokenizers;\n  var exit;\n\n  if (value.charAt(0) !== lessThan) {\n    return;\n  }\n\n  index++;\n  subvalue = lessThan;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (whitespace(character) || character === greaterThan || character === atSign || character === ':' && value.charAt(index + 1) === slash) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  if (!queue) {\n    return;\n  }\n\n  link += queue;\n  queue = '';\n  character = value.charAt(index);\n  link += character;\n  index++;\n\n  if (character === atSign) {\n    hasAtCharacter = true;\n  } else {\n    if (character !== ':' || value.charAt(index + 1) !== slash) {\n      return;\n    }\n\n    link += slash;\n    index++;\n  }\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (whitespace(character) || character === greaterThan) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n\n  if (!queue || character !== greaterThan) {\n    return;\n  }\n  /* istanbul ignore if - never used (yet) */\n\n\n  if (silent) {\n    return true;\n  }\n\n  link += queue;\n  content = link;\n  subvalue += link + character;\n  now = eat.now();\n  now.column++;\n  now.offset++;\n\n  if (hasAtCharacter) {\n    if (link.slice(0, mailtoLength).toLowerCase() === mailto) {\n      content = content.slice(mailtoLength);\n      now.column += mailtoLength;\n      now.offset += mailtoLength;\n    } else {\n      link = mailto + link;\n    }\n  } // Temporarily remove all tokenizers except text in autolinks.\n\n\n  tokenizers = self.inlineTokenizers;\n  self.inlineTokenizers = {\n    text: tokenizers.text\n  };\n  exit = self.enterLink();\n  content = self.tokenizeInline(content, now);\n  self.inlineTokenizers = tokenizers;\n  exit();\n  return eat(subvalue)({\n    type: 'link',\n    title: null,\n    url: decode(link, {\n      nonTerminated: false\n    }),\n    children: content\n  });\n}","map":{"version":3,"sources":["E:/Monirul AWS/PorzotokFrontend/node_modules/remark-parse/lib/tokenize/auto-link.js"],"names":["whitespace","require","decode","locate","module","exports","autoLink","locator","notInLink","lessThan","greaterThan","atSign","slash","mailto","mailtoLength","length","eat","value","silent","self","subvalue","index","queue","hasAtCharacter","link","character","now","content","tokenizers","exit","charAt","column","offset","slice","toLowerCase","inlineTokenizers","text","enterLink","tokenizeInline","type","title","url","nonTerminated","children"],"mappings":"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","sourcesContent":["'use strict'\n\nvar whitespace = require('is-whitespace-character')\nvar decode = require('parse-entities')\nvar locate = require('../locate/tag')\n\nmodule.exports = autoLink\nautoLink.locator = locate\nautoLink.notInLink = true\n\nvar lessThan = '<'\nvar greaterThan = '>'\nvar atSign = '@'\nvar slash = '/'\nvar mailto = 'mailto:'\nvar mailtoLength = mailto.length\n\nfunction autoLink(eat, value, silent) {\n  var self = this\n  var subvalue = ''\n  var length = value.length\n  var index = 0\n  var queue = ''\n  var hasAtCharacter = false\n  var link = ''\n  var character\n  var now\n  var content\n  var tokenizers\n  var exit\n\n  if (value.charAt(0) !== lessThan) {\n    return\n  }\n\n  index++\n  subvalue = lessThan\n\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (\n      whitespace(character) ||\n      character === greaterThan ||\n      character === atSign ||\n      (character === ':' && value.charAt(index + 1) === slash)\n    ) {\n      break\n    }\n\n    queue += character\n    index++\n  }\n\n  if (!queue) {\n    return\n  }\n\n  link += queue\n  queue = ''\n\n  character = value.charAt(index)\n  link += character\n  index++\n\n  if (character === atSign) {\n    hasAtCharacter = true\n  } else {\n    if (character !== ':' || value.charAt(index + 1) !== slash) {\n      return\n    }\n\n    link += slash\n    index++\n  }\n\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (whitespace(character) || character === greaterThan) {\n      break\n    }\n\n    queue += character\n    index++\n  }\n\n  character = value.charAt(index)\n\n  if (!queue || character !== greaterThan) {\n    return\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true\n  }\n\n  link += queue\n  content = link\n  subvalue += link + character\n  now = eat.now()\n  now.column++\n  now.offset++\n\n  if (hasAtCharacter) {\n    if (link.slice(0, mailtoLength).toLowerCase() === mailto) {\n      content = content.slice(mailtoLength)\n      now.column += mailtoLength\n      now.offset += mailtoLength\n    } else {\n      link = mailto + link\n    }\n  }\n\n  // Temporarily remove all tokenizers except text in autolinks.\n  tokenizers = self.inlineTokenizers\n  self.inlineTokenizers = {text: tokenizers.text}\n\n  exit = self.enterLink()\n\n  content = self.tokenizeInline(content, now)\n\n  self.inlineTokenizers = tokenizers\n  exit()\n\n  return eat(subvalue)({\n    type: 'link',\n    title: null,\n    url: decode(link, {nonTerminated: false}),\n    children: content\n  })\n}\n"]},"metadata":{},"sourceType":"script"}