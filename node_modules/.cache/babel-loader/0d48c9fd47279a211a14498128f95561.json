{"ast":null,"code":"'use strict';\n\nmodule.exports = convert;\n\nfunction convert(test) {\n  if (test == null) {\n    return ok;\n  }\n\n  if (typeof test === 'string') {\n    return typeFactory(test);\n  }\n\n  if (typeof test === 'object') {\n    return 'length' in test ? anyFactory(test) : allFactory(test);\n  }\n\n  if (typeof test === 'function') {\n    return test;\n  }\n\n  throw new Error('Expected function, string, or object as test');\n} // Utility assert each property in `test` is represented in `node`, and each\n// values are strictly equal.\n\n\nfunction allFactory(test) {\n  return all;\n\n  function all(node) {\n    var key;\n\n    for (key in test) {\n      if (node[key] !== test[key]) return false;\n    }\n\n    return true;\n  }\n}\n\nfunction anyFactory(tests) {\n  var checks = [];\n  var index = -1;\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index]);\n  }\n\n  return any;\n\n  function any() {\n    var index = -1;\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, arguments)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n} // Utility to convert a string into a function which checks a given node’s type\n// for said string.\n\n\nfunction typeFactory(test) {\n  return type;\n\n  function type(node) {\n    return Boolean(node && node.type === test);\n  }\n} // Utility to return true.\n\n\nfunction ok() {\n  return true;\n}","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/unist-util-is/convert.js"],"names":["module","exports","convert","test","ok","typeFactory","anyFactory","allFactory","Error","all","node","key","tests","checks","index","length","any","apply","arguments","type","Boolean"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;;AAEA,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,MAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,WAAOC,EAAP;AACD;;AAED,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOE,WAAW,CAACF,IAAD,CAAlB;AACD;;AAED,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO,YAAYA,IAAZ,GAAmBG,UAAU,CAACH,IAAD,CAA7B,GAAsCI,UAAU,CAACJ,IAAD,CAAvD;AACD;;AAED,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAOA,IAAP;AACD;;AAED,QAAM,IAAIK,KAAJ,CAAU,8CAAV,CAAN;AACD,C,CAED;AACA;;;AACA,SAASD,UAAT,CAAoBJ,IAApB,EAA0B;AACxB,SAAOM,GAAP;;AAEA,WAASA,GAAT,CAAaC,IAAb,EAAmB;AACjB,QAAIC,GAAJ;;AAEA,SAAKA,GAAL,IAAYR,IAAZ,EAAkB;AAChB,UAAIO,IAAI,CAACC,GAAD,CAAJ,KAAcR,IAAI,CAACQ,GAAD,CAAtB,EAA6B,OAAO,KAAP;AAC9B;;AAED,WAAO,IAAP;AACD;AACF;;AAED,SAASL,UAAT,CAAoBM,KAApB,EAA2B;AACzB,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;;AAEA,SAAO,EAAEA,KAAF,GAAUF,KAAK,CAACG,MAAvB,EAA+B;AAC7BF,IAAAA,MAAM,CAACC,KAAD,CAAN,GAAgBZ,OAAO,CAACU,KAAK,CAACE,KAAD,CAAN,CAAvB;AACD;;AAED,SAAOE,GAAP;;AAEA,WAASA,GAAT,GAAe;AACb,QAAIF,KAAK,GAAG,CAAC,CAAb;;AAEA,WAAO,EAAEA,KAAF,GAAUD,MAAM,CAACE,MAAxB,EAAgC;AAC9B,UAAIF,MAAM,CAACC,KAAD,CAAN,CAAcG,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAJ,EAA0C;AACxC,eAAO,IAAP;AACD;AACF;;AAED,WAAO,KAAP;AACD;AACF,C,CAED;AACA;;;AACA,SAASb,WAAT,CAAqBF,IAArB,EAA2B;AACzB,SAAOgB,IAAP;;AAEA,WAASA,IAAT,CAAcT,IAAd,EAAoB;AAClB,WAAOU,OAAO,CAACV,IAAI,IAAIA,IAAI,CAACS,IAAL,KAAchB,IAAvB,CAAd;AACD;AACF,C,CAED;;;AACA,SAASC,EAAT,GAAc;AACZ,SAAO,IAAP;AACD","sourcesContent":["'use strict'\r\n\r\nmodule.exports = convert\r\n\r\nfunction convert(test) {\r\n  if (test == null) {\r\n    return ok\r\n  }\r\n\r\n  if (typeof test === 'string') {\r\n    return typeFactory(test)\r\n  }\r\n\r\n  if (typeof test === 'object') {\r\n    return 'length' in test ? anyFactory(test) : allFactory(test)\r\n  }\r\n\r\n  if (typeof test === 'function') {\r\n    return test\r\n  }\r\n\r\n  throw new Error('Expected function, string, or object as test')\r\n}\r\n\r\n// Utility assert each property in `test` is represented in `node`, and each\r\n// values are strictly equal.\r\nfunction allFactory(test) {\r\n  return all\r\n\r\n  function all(node) {\r\n    var key\r\n\r\n    for (key in test) {\r\n      if (node[key] !== test[key]) return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nfunction anyFactory(tests) {\r\n  var checks = []\r\n  var index = -1\r\n\r\n  while (++index < tests.length) {\r\n    checks[index] = convert(tests[index])\r\n  }\r\n\r\n  return any\r\n\r\n  function any() {\r\n    var index = -1\r\n\r\n    while (++index < checks.length) {\r\n      if (checks[index].apply(this, arguments)) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n// Utility to convert a string into a function which checks a given node’s type\r\n// for said string.\r\nfunction typeFactory(test) {\r\n  return type\r\n\r\n  function type(node) {\r\n    return Boolean(node && node.type === test)\r\n  }\r\n}\r\n\r\n// Utility to return true.\r\nfunction ok() {\r\n  return true\r\n}\r\n"]},"metadata":{},"sourceType":"script"}