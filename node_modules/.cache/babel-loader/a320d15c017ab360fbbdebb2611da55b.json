{"ast":null,"code":"/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\n\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\n\n\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\n\n\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/*\r\nLanguage: Ruby\r\nDescription: Ruby is a dynamic, open source programming language with a focus on simplicity and productivity.\r\nWebsite: https://www.ruby-lang.org/\r\nAuthor: Anton Kovalyov <anton@kovalyov.net>\r\nContributors: Peter Leonov <gojpeg@yandex.ru>, Vasily Polovnyov <vast@whiteants.net>, Loren Segal <lsegal@soen.ca>, Pascal Hurni <phi@ruby-reactive.org>, Cedric Sohrauer <sohrauer@googlemail.com>\r\nCategory: common\r\n*/\n\n\nfunction ruby(hljs) {\n  const RUBY_METHOD_RE = '([a-zA-Z_]\\\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?)';\n  const RUBY_KEYWORDS = {\n    keyword: 'and then defined module in return redo if BEGIN retry end for self when ' + 'next until do begin unless END rescue else break undef not super class case ' + 'require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor ' + '__FILE__',\n    built_in: 'proc lambda',\n    literal: 'true false nil'\n  };\n  const YARDOCTAG = {\n    className: 'doctag',\n    begin: '@[A-Za-z]+'\n  };\n  const IRB_OBJECT = {\n    begin: '#<',\n    end: '>'\n  };\n  const COMMENT_MODES = [hljs.COMMENT('#', '$', {\n    contains: [YARDOCTAG]\n  }), hljs.COMMENT('^=begin', '^=end', {\n    contains: [YARDOCTAG],\n    relevance: 10\n  }), hljs.COMMENT('^__END__', '\\\\n$')];\n  const SUBST = {\n    className: 'subst',\n    begin: /#\\{/,\n    end: /\\}/,\n    keywords: RUBY_KEYWORDS\n  };\n  const STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n    variants: [{\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\"/,\n      end: /\"/\n    }, {\n      begin: /`/,\n      end: /`/\n    }, {\n      begin: /%[qQwWx]?\\(/,\n      end: /\\)/\n    }, {\n      begin: /%[qQwWx]?\\[/,\n      end: /\\]/\n    }, {\n      begin: /%[qQwWx]?\\{/,\n      end: /\\}/\n    }, {\n      begin: /%[qQwWx]?</,\n      end: />/\n    }, {\n      begin: /%[qQwWx]?\\//,\n      end: /\\//\n    }, {\n      begin: /%[qQwWx]?%/,\n      end: /%/\n    }, {\n      begin: /%[qQwWx]?-/,\n      end: /-/\n    }, {\n      begin: /%[qQwWx]?\\|/,\n      end: /\\|/\n    }, // in the following expressions, \\B in the beginning suppresses recognition of ?-sequences\n    // where ? is the last character of a preceding identifier, as in: `func?4`\n    {\n      begin: /\\B\\?(\\\\\\d{1,3})/\n    }, {\n      begin: /\\B\\?(\\\\x[A-Fa-f0-9]{1,2})/\n    }, {\n      begin: /\\B\\?(\\\\u\\{?[A-Fa-f0-9]{1,6}\\}?)/\n    }, {\n      begin: /\\B\\?(\\\\M-\\\\C-|\\\\M-\\\\c|\\\\c\\\\M-|\\\\M-|\\\\C-\\\\M-)[\\x20-\\x7e]/\n    }, {\n      begin: /\\B\\?\\\\(c|C-)[\\x20-\\x7e]/\n    }, {\n      begin: /\\B\\?\\\\?\\S/\n    }, {\n      // heredocs\n      begin: /<<[-~]?'?(\\w+)\\n(?:[^\\n]*\\n)*?\\s*\\1\\b/,\n      returnBegin: true,\n      contains: [{\n        begin: /<<[-~]?'?/\n      }, hljs.END_SAME_AS_BEGIN({\n        begin: /(\\w+)/,\n        end: /(\\w+)/,\n        contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n      })]\n    }]\n  }; // Ruby syntax is underdocumented, but this grammar seems to be accurate\n  // as of version 2.7.2 (confirmed with (irb and `Ripper.sexp(...)`)\n  // https://docs.ruby-lang.org/en/2.7.0/doc/syntax/literals_rdoc.html#label-Numbers\n\n  const decimal = '[1-9](_?[0-9])*|0';\n  const digits = '[0-9](_?[0-9])*';\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [// decimal integer/float, optionally exponential or rational, optionally imaginary\n    {\n      begin: `\\\\b(${decimal})(\\\\.(${digits}))?([eE][+-]?(${digits})|r)?i?\\\\b`\n    }, // explicit decimal/binary/octal/hexadecimal integer,\n    // optionally rational and/or imaginary\n    {\n      begin: \"\\\\b0[dD][0-9](_?[0-9])*r?i?\\\\b\"\n    }, {\n      begin: \"\\\\b0[bB][0-1](_?[0-1])*r?i?\\\\b\"\n    }, {\n      begin: \"\\\\b0[oO][0-7](_?[0-7])*r?i?\\\\b\"\n    }, {\n      begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\\\b\"\n    }, // 0-prefixed implicit octal integer, optionally rational and/or imaginary\n    {\n      begin: \"\\\\b0(_?[0-7])+r?i?\\\\b\"\n    }]\n  };\n  const PARAMS = {\n    className: 'params',\n    begin: '\\\\(',\n    end: '\\\\)',\n    endsParent: true,\n    keywords: RUBY_KEYWORDS\n  };\n  const RUBY_DEFAULT_CONTAINS = [STRING, {\n    className: 'class',\n    beginKeywords: 'class module',\n    end: '$|;',\n    illegal: /=/,\n    contains: [hljs.inherit(hljs.TITLE_MODE, {\n      begin: '[A-Za-z_]\\\\w*(::\\\\w+)*(\\\\?|!)?'\n    }), {\n      begin: '<\\\\s*',\n      contains: [{\n        begin: '(' + hljs.IDENT_RE + '::)?' + hljs.IDENT_RE,\n        // we already get points for <, we don't need poitns\n        // for the name also\n        relevance: 0\n      }]\n    }].concat(COMMENT_MODES)\n  }, {\n    className: 'function',\n    // def method_name(\n    // def method_name;\n    // def method_name (end of line)\n    begin: concat(/def\\s+/, lookahead(RUBY_METHOD_RE + \"\\\\s*(\\\\(|;|$)\")),\n    relevance: 0,\n    // relevance comes from kewords\n    keywords: \"def\",\n    end: '$|;',\n    contains: [hljs.inherit(hljs.TITLE_MODE, {\n      begin: RUBY_METHOD_RE\n    }), PARAMS].concat(COMMENT_MODES)\n  }, {\n    // swallow namespace qualifiers before symbols\n    begin: hljs.IDENT_RE + '::'\n  }, {\n    className: 'symbol',\n    begin: hljs.UNDERSCORE_IDENT_RE + '(!|\\\\?)?:',\n    relevance: 0\n  }, {\n    className: 'symbol',\n    begin: ':(?!\\\\s)',\n    contains: [STRING, {\n      begin: RUBY_METHOD_RE\n    }],\n    relevance: 0\n  }, NUMBER, {\n    // negative-look forward attemps to prevent false matches like:\n    // @ident@ or $ident$ that might indicate this is not ruby at all\n    className: \"variable\",\n    begin: '(\\\\$\\\\W)|((\\\\$|@@?)(\\\\w+))(?=[^@$?])' + `(?![A-Za-z])(?![@$?'])`\n  }, {\n    className: 'params',\n    begin: /\\|/,\n    end: /\\|/,\n    relevance: 0,\n    // this could be a lot of things (in other languages) other than params\n    keywords: RUBY_KEYWORDS\n  }, {\n    // regexp container\n    begin: '(' + hljs.RE_STARTERS_RE + '|unless)\\\\s*',\n    keywords: 'unless',\n    contains: [{\n      className: 'regexp',\n      contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n      illegal: /\\n/,\n      variants: [{\n        begin: '/',\n        end: '/[a-z]*'\n      }, {\n        begin: /%r\\{/,\n        end: /\\}[a-z]*/\n      }, {\n        begin: '%r\\\\(',\n        end: '\\\\)[a-z]*'\n      }, {\n        begin: '%r!',\n        end: '![a-z]*'\n      }, {\n        begin: '%r\\\\[',\n        end: '\\\\][a-z]*'\n      }]\n    }].concat(IRB_OBJECT, COMMENT_MODES),\n    relevance: 0\n  }].concat(IRB_OBJECT, COMMENT_MODES);\n  SUBST.contains = RUBY_DEFAULT_CONTAINS;\n  PARAMS.contains = RUBY_DEFAULT_CONTAINS; // >>\n  // ?>\n\n  const SIMPLE_PROMPT = \"[>?]>\"; // irb(main):001:0>\n\n  const DEFAULT_PROMPT = \"[\\\\w#]+\\\\(\\\\w+\\\\):\\\\d+:\\\\d+>\";\n  const RVM_PROMPT = \"(\\\\w+-)?\\\\d+\\\\.\\\\d+\\\\.\\\\d+(p\\\\d+)?[^\\\\d][^>]+>\";\n  const IRB_DEFAULT = [{\n    begin: /^\\s*=>/,\n    starts: {\n      end: '$',\n      contains: RUBY_DEFAULT_CONTAINS\n    }\n  }, {\n    className: 'meta',\n    begin: '^(' + SIMPLE_PROMPT + \"|\" + DEFAULT_PROMPT + '|' + RVM_PROMPT + ')(?=[ ])',\n    starts: {\n      end: '$',\n      contains: RUBY_DEFAULT_CONTAINS\n    }\n  }];\n  COMMENT_MODES.unshift(IRB_OBJECT);\n  return {\n    name: 'Ruby',\n    aliases: ['rb', 'gemspec', 'podspec', 'thor', 'irb'],\n    keywords: RUBY_KEYWORDS,\n    illegal: /\\/\\*/,\n    contains: [hljs.SHEBANG({\n      binary: \"ruby\"\n    })].concat(IRB_DEFAULT).concat(COMMENT_MODES).concat(RUBY_DEFAULT_CONTAINS)\n  };\n}\n\nmodule.exports = ruby;","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/highlight.js/lib/languages/ruby.js"],"names":["source","re","lookahead","concat","args","joined","map","x","join","ruby","hljs","RUBY_METHOD_RE","RUBY_KEYWORDS","keyword","built_in","literal","YARDOCTAG","className","begin","IRB_OBJECT","end","COMMENT_MODES","COMMENT","contains","relevance","SUBST","keywords","STRING","BACKSLASH_ESCAPE","variants","returnBegin","END_SAME_AS_BEGIN","decimal","digits","NUMBER","PARAMS","endsParent","RUBY_DEFAULT_CONTAINS","beginKeywords","illegal","inherit","TITLE_MODE","IDENT_RE","UNDERSCORE_IDENT_RE","RE_STARTERS_RE","SIMPLE_PROMPT","DEFAULT_PROMPT","RVM_PROMPT","IRB_DEFAULT","starts","unshift","name","aliases","SHEBANG","binary","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAASA,MAAT,CAAgBC,EAAhB,EAAoB;AAClB,MAAI,CAACA,EAAL,EAAS,OAAO,IAAP;AACT,MAAI,OAAOA,EAAP,KAAc,QAAlB,EAA4B,OAAOA,EAAP;AAE5B,SAAOA,EAAE,CAACD,MAAV;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASE,SAAT,CAAmBD,EAAnB,EAAuB;AACrB,SAAOE,MAAM,CAAC,KAAD,EAAQF,EAAR,EAAY,GAAZ,CAAb;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASE,MAAT,CAAgB,GAAGC,IAAnB,EAAyB;AACvB,QAAMC,MAAM,GAAGD,IAAI,CAACE,GAAL,CAAUC,CAAD,IAAOP,MAAM,CAACO,CAAD,CAAtB,EAA2BC,IAA3B,CAAgC,EAAhC,CAAf;AACA,SAAOH,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASI,IAAT,CAAcC,IAAd,EAAoB;AAClB,QAAMC,cAAc,GAAG,oFAAvB;AACA,QAAMC,aAAa,GAAG;AACpBC,IAAAA,OAAO,EACL,6EACA,8EADA,GAEA,0FAFA,GAGA,UALkB;AAMpBC,IAAAA,QAAQ,EAAE,aANU;AAOpBC,IAAAA,OAAO,EACL;AARkB,GAAtB;AAUA,QAAMC,SAAS,GAAG;AAChBC,IAAAA,SAAS,EAAE,QADK;AAEhBC,IAAAA,KAAK,EAAE;AAFS,GAAlB;AAIA,QAAMC,UAAU,GAAG;AACjBD,IAAAA,KAAK,EAAE,IADU;AAEjBE,IAAAA,GAAG,EAAE;AAFY,GAAnB;AAIA,QAAMC,aAAa,GAAG,CACpBX,IAAI,CAACY,OAAL,CACE,GADF,EAEE,GAFF,EAGE;AACEC,IAAAA,QAAQ,EAAE,CAAEP,SAAF;AADZ,GAHF,CADoB,EAQpBN,IAAI,CAACY,OAAL,CACE,SADF,EAEE,OAFF,EAGE;AACEC,IAAAA,QAAQ,EAAE,CAAEP,SAAF,CADZ;AAEEQ,IAAAA,SAAS,EAAE;AAFb,GAHF,CARoB,EAgBpBd,IAAI,CAACY,OAAL,CAAa,UAAb,EAAyB,MAAzB,CAhBoB,CAAtB;AAkBA,QAAMG,KAAK,GAAG;AACZR,IAAAA,SAAS,EAAE,OADC;AAEZC,IAAAA,KAAK,EAAE,KAFK;AAGZE,IAAAA,GAAG,EAAE,IAHO;AAIZM,IAAAA,QAAQ,EAAEd;AAJE,GAAd;AAMA,QAAMe,MAAM,GAAG;AACbV,IAAAA,SAAS,EAAE,QADE;AAEbM,IAAAA,QAAQ,EAAE,CACRb,IAAI,CAACkB,gBADG,EAERH,KAFQ,CAFG;AAMbI,IAAAA,QAAQ,EAAE,CACR;AACEX,MAAAA,KAAK,EAAE,GADT;AAEEE,MAAAA,GAAG,EAAE;AAFP,KADQ,EAKR;AACEF,MAAAA,KAAK,EAAE,GADT;AAEEE,MAAAA,GAAG,EAAE;AAFP,KALQ,EASR;AACEF,MAAAA,KAAK,EAAE,GADT;AAEEE,MAAAA,GAAG,EAAE;AAFP,KATQ,EAaR;AACEF,MAAAA,KAAK,EAAE,aADT;AAEEE,MAAAA,GAAG,EAAE;AAFP,KAbQ,EAiBR;AACEF,MAAAA,KAAK,EAAE,aADT;AAEEE,MAAAA,GAAG,EAAE;AAFP,KAjBQ,EAqBR;AACEF,MAAAA,KAAK,EAAE,aADT;AAEEE,MAAAA,GAAG,EAAE;AAFP,KArBQ,EAyBR;AACEF,MAAAA,KAAK,EAAE,YADT;AAEEE,MAAAA,GAAG,EAAE;AAFP,KAzBQ,EA6BR;AACEF,MAAAA,KAAK,EAAE,aADT;AAEEE,MAAAA,GAAG,EAAE;AAFP,KA7BQ,EAiCR;AACEF,MAAAA,KAAK,EAAE,YADT;AAEEE,MAAAA,GAAG,EAAE;AAFP,KAjCQ,EAqCR;AACEF,MAAAA,KAAK,EAAE,YADT;AAEEE,MAAAA,GAAG,EAAE;AAFP,KArCQ,EAyCR;AACEF,MAAAA,KAAK,EAAE,aADT;AAEEE,MAAAA,GAAG,EAAE;AAFP,KAzCQ,EA6CR;AACA;AACA;AACEF,MAAAA,KAAK,EAAE;AADT,KA/CQ,EAkDR;AACEA,MAAAA,KAAK,EAAE;AADT,KAlDQ,EAqDR;AACEA,MAAAA,KAAK,EAAE;AADT,KArDQ,EAwDR;AACEA,MAAAA,KAAK,EAAE;AADT,KAxDQ,EA2DR;AACEA,MAAAA,KAAK,EAAE;AADT,KA3DQ,EA8DR;AACEA,MAAAA,KAAK,EAAE;AADT,KA9DQ,EAiER;AAAE;AACAA,MAAAA,KAAK,EAAE,uCADT;AAEEY,MAAAA,WAAW,EAAE,IAFf;AAGEP,MAAAA,QAAQ,EAAE,CACR;AACEL,QAAAA,KAAK,EAAE;AADT,OADQ,EAIRR,IAAI,CAACqB,iBAAL,CAAuB;AACrBb,QAAAA,KAAK,EAAE,OADc;AAErBE,QAAAA,GAAG,EAAE,OAFgB;AAGrBG,QAAAA,QAAQ,EAAE,CACRb,IAAI,CAACkB,gBADG,EAERH,KAFQ;AAHW,OAAvB,CAJQ;AAHZ,KAjEQ;AANG,GAAf,CA5CkB,CAuIlB;AACA;AACA;;AACA,QAAMO,OAAO,GAAG,mBAAhB;AACA,QAAMC,MAAM,GAAG,iBAAf;AACA,QAAMC,MAAM,GAAG;AACbjB,IAAAA,SAAS,EAAE,QADE;AAEbO,IAAAA,SAAS,EAAE,CAFE;AAGbK,IAAAA,QAAQ,EAAE,CACR;AACA;AACEX,MAAAA,KAAK,EAAG,OAAMc,OAAQ,SAAQC,MAAO,iBAAgBA,MAAO;AAD9D,KAFQ,EAMR;AACA;AACA;AACEf,MAAAA,KAAK,EAAE;AADT,KARQ,EAWR;AACEA,MAAAA,KAAK,EAAE;AADT,KAXQ,EAcR;AACEA,MAAAA,KAAK,EAAE;AADT,KAdQ,EAiBR;AACEA,MAAAA,KAAK,EAAE;AADT,KAjBQ,EAqBR;AACA;AACEA,MAAAA,KAAK,EAAE;AADT,KAtBQ;AAHG,GAAf;AA+BA,QAAMiB,MAAM,GAAG;AACblB,IAAAA,SAAS,EAAE,QADE;AAEbC,IAAAA,KAAK,EAAE,KAFM;AAGbE,IAAAA,GAAG,EAAE,KAHQ;AAIbgB,IAAAA,UAAU,EAAE,IAJC;AAKbV,IAAAA,QAAQ,EAAEd;AALG,GAAf;AAQA,QAAMyB,qBAAqB,GAAG,CAC5BV,MAD4B,EAE5B;AACEV,IAAAA,SAAS,EAAE,OADb;AAEEqB,IAAAA,aAAa,EAAE,cAFjB;AAGElB,IAAAA,GAAG,EAAE,KAHP;AAIEmB,IAAAA,OAAO,EAAE,GAJX;AAKEhB,IAAAA,QAAQ,EAAE,CACRb,IAAI,CAAC8B,OAAL,CAAa9B,IAAI,CAAC+B,UAAlB,EAA8B;AAC5BvB,MAAAA,KAAK,EAAE;AADqB,KAA9B,CADQ,EAIR;AACEA,MAAAA,KAAK,EAAE,OADT;AAEEK,MAAAA,QAAQ,EAAE,CACR;AACEL,QAAAA,KAAK,EAAE,MAAMR,IAAI,CAACgC,QAAX,GAAsB,MAAtB,GAA+BhC,IAAI,CAACgC,QAD7C;AAEE;AACA;AACAlB,QAAAA,SAAS,EAAE;AAJb,OADQ;AAFZ,KAJQ,EAeRrB,MAfQ,CAeDkB,aAfC;AALZ,GAF4B,EAwB5B;AACEJ,IAAAA,SAAS,EAAE,UADb;AAEE;AACA;AACA;AACAC,IAAAA,KAAK,EAAEf,MAAM,CAAC,QAAD,EAAWD,SAAS,CAACS,cAAc,GAAG,eAAlB,CAApB,CALf;AAMEa,IAAAA,SAAS,EAAE,CANb;AAMgB;AACdE,IAAAA,QAAQ,EAAE,KAPZ;AAQEN,IAAAA,GAAG,EAAE,KARP;AASEG,IAAAA,QAAQ,EAAE,CACRb,IAAI,CAAC8B,OAAL,CAAa9B,IAAI,CAAC+B,UAAlB,EAA8B;AAC5BvB,MAAAA,KAAK,EAAEP;AADqB,KAA9B,CADQ,EAIRwB,MAJQ,EAKRhC,MALQ,CAKDkB,aALC;AATZ,GAxB4B,EAwC5B;AACE;AACAH,IAAAA,KAAK,EAAER,IAAI,CAACgC,QAAL,GAAgB;AAFzB,GAxC4B,EA4C5B;AACEzB,IAAAA,SAAS,EAAE,QADb;AAEEC,IAAAA,KAAK,EAAER,IAAI,CAACiC,mBAAL,GAA2B,WAFpC;AAGEnB,IAAAA,SAAS,EAAE;AAHb,GA5C4B,EAiD5B;AACEP,IAAAA,SAAS,EAAE,QADb;AAEEC,IAAAA,KAAK,EAAE,UAFT;AAGEK,IAAAA,QAAQ,EAAE,CACRI,MADQ,EAER;AACET,MAAAA,KAAK,EAAEP;AADT,KAFQ,CAHZ;AASEa,IAAAA,SAAS,EAAE;AATb,GAjD4B,EA4D5BU,MA5D4B,EA6D5B;AACE;AACA;AACAjB,IAAAA,SAAS,EAAE,UAHb;AAIEC,IAAAA,KAAK,EAAE,yCAA0C;AAJnD,GA7D4B,EAmE5B;AACED,IAAAA,SAAS,EAAE,QADb;AAEEC,IAAAA,KAAK,EAAE,IAFT;AAGEE,IAAAA,GAAG,EAAE,IAHP;AAIEI,IAAAA,SAAS,EAAE,CAJb;AAIgB;AACdE,IAAAA,QAAQ,EAAEd;AALZ,GAnE4B,EA0E5B;AAAE;AACAM,IAAAA,KAAK,EAAE,MAAMR,IAAI,CAACkC,cAAX,GAA4B,cADrC;AAEElB,IAAAA,QAAQ,EAAE,QAFZ;AAGEH,IAAAA,QAAQ,EAAE,CACR;AACEN,MAAAA,SAAS,EAAE,QADb;AAEEM,MAAAA,QAAQ,EAAE,CACRb,IAAI,CAACkB,gBADG,EAERH,KAFQ,CAFZ;AAMEc,MAAAA,OAAO,EAAE,IANX;AAOEV,MAAAA,QAAQ,EAAE,CACR;AACEX,QAAAA,KAAK,EAAE,GADT;AAEEE,QAAAA,GAAG,EAAE;AAFP,OADQ,EAKR;AACEF,QAAAA,KAAK,EAAE,MADT;AAEEE,QAAAA,GAAG,EAAE;AAFP,OALQ,EASR;AACEF,QAAAA,KAAK,EAAE,OADT;AAEEE,QAAAA,GAAG,EAAE;AAFP,OATQ,EAaR;AACEF,QAAAA,KAAK,EAAE,KADT;AAEEE,QAAAA,GAAG,EAAE;AAFP,OAbQ,EAiBR;AACEF,QAAAA,KAAK,EAAE,OADT;AAEEE,QAAAA,GAAG,EAAE;AAFP,OAjBQ;AAPZ,KADQ,EA+BRjB,MA/BQ,CA+BDgB,UA/BC,EA+BWE,aA/BX,CAHZ;AAmCEG,IAAAA,SAAS,EAAE;AAnCb,GA1E4B,EA+G5BrB,MA/G4B,CA+GrBgB,UA/GqB,EA+GTE,aA/GS,CAA9B;AAiHAI,EAAAA,KAAK,CAACF,QAAN,GAAiBc,qBAAjB;AACAF,EAAAA,MAAM,CAACZ,QAAP,GAAkBc,qBAAlB,CArSkB,CAuSlB;AACA;;AACA,QAAMQ,aAAa,GAAG,OAAtB,CAzSkB,CA0SlB;;AACA,QAAMC,cAAc,GAAG,8BAAvB;AACA,QAAMC,UAAU,GAAG,gDAAnB;AAEA,QAAMC,WAAW,GAAG,CAClB;AACE9B,IAAAA,KAAK,EAAE,QADT;AAEE+B,IAAAA,MAAM,EAAE;AACN7B,MAAAA,GAAG,EAAE,GADC;AAENG,MAAAA,QAAQ,EAAEc;AAFJ;AAFV,GADkB,EAQlB;AACEpB,IAAAA,SAAS,EAAE,MADb;AAEEC,IAAAA,KAAK,EAAE,OAAO2B,aAAP,GAAuB,GAAvB,GAA6BC,cAA7B,GAA8C,GAA9C,GAAoDC,UAApD,GAAiE,UAF1E;AAGEE,IAAAA,MAAM,EAAE;AACN7B,MAAAA,GAAG,EAAE,GADC;AAENG,MAAAA,QAAQ,EAAEc;AAFJ;AAHV,GARkB,CAApB;AAkBAhB,EAAAA,aAAa,CAAC6B,OAAd,CAAsB/B,UAAtB;AAEA,SAAO;AACLgC,IAAAA,IAAI,EAAE,MADD;AAELC,IAAAA,OAAO,EAAE,CACP,IADO,EAEP,SAFO,EAGP,SAHO,EAIP,MAJO,EAKP,KALO,CAFJ;AASL1B,IAAAA,QAAQ,EAAEd,aATL;AAUL2B,IAAAA,OAAO,EAAE,MAVJ;AAWLhB,IAAAA,QAAQ,EAAE,CACRb,IAAI,CAAC2C,OAAL,CAAa;AACXC,MAAAA,MAAM,EAAE;AADG,KAAb,CADQ,EAKPnD,MALO,CAKA6C,WALA,EAMP7C,MANO,CAMAkB,aANA,EAOPlB,MAPO,CAOAkC,qBAPA;AAXL,GAAP;AAoBD;;AAEDkB,MAAM,CAACC,OAAP,GAAiB/C,IAAjB","sourcesContent":["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction lookahead(re) {\r\n  return concat('(?=', re, ')');\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/*\r\nLanguage: Ruby\r\nDescription: Ruby is a dynamic, open source programming language with a focus on simplicity and productivity.\r\nWebsite: https://www.ruby-lang.org/\r\nAuthor: Anton Kovalyov <anton@kovalyov.net>\r\nContributors: Peter Leonov <gojpeg@yandex.ru>, Vasily Polovnyov <vast@whiteants.net>, Loren Segal <lsegal@soen.ca>, Pascal Hurni <phi@ruby-reactive.org>, Cedric Sohrauer <sohrauer@googlemail.com>\r\nCategory: common\r\n*/\r\n\r\nfunction ruby(hljs) {\r\n  const RUBY_METHOD_RE = '([a-zA-Z_]\\\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?)';\r\n  const RUBY_KEYWORDS = {\r\n    keyword:\r\n      'and then defined module in return redo if BEGIN retry end for self when ' +\r\n      'next until do begin unless END rescue else break undef not super class case ' +\r\n      'require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor ' +\r\n      '__FILE__',\r\n    built_in: 'proc lambda',\r\n    literal:\r\n      'true false nil'\r\n  };\r\n  const YARDOCTAG = {\r\n    className: 'doctag',\r\n    begin: '@[A-Za-z]+'\r\n  };\r\n  const IRB_OBJECT = {\r\n    begin: '#<',\r\n    end: '>'\r\n  };\r\n  const COMMENT_MODES = [\r\n    hljs.COMMENT(\r\n      '#',\r\n      '$',\r\n      {\r\n        contains: [ YARDOCTAG ]\r\n      }\r\n    ),\r\n    hljs.COMMENT(\r\n      '^=begin',\r\n      '^=end',\r\n      {\r\n        contains: [ YARDOCTAG ],\r\n        relevance: 10\r\n      }\r\n    ),\r\n    hljs.COMMENT('^__END__', '\\\\n$')\r\n  ];\r\n  const SUBST = {\r\n    className: 'subst',\r\n    begin: /#\\{/,\r\n    end: /\\}/,\r\n    keywords: RUBY_KEYWORDS\r\n  };\r\n  const STRING = {\r\n    className: 'string',\r\n    contains: [\r\n      hljs.BACKSLASH_ESCAPE,\r\n      SUBST\r\n    ],\r\n    variants: [\r\n      {\r\n        begin: /'/,\r\n        end: /'/\r\n      },\r\n      {\r\n        begin: /\"/,\r\n        end: /\"/\r\n      },\r\n      {\r\n        begin: /`/,\r\n        end: /`/\r\n      },\r\n      {\r\n        begin: /%[qQwWx]?\\(/,\r\n        end: /\\)/\r\n      },\r\n      {\r\n        begin: /%[qQwWx]?\\[/,\r\n        end: /\\]/\r\n      },\r\n      {\r\n        begin: /%[qQwWx]?\\{/,\r\n        end: /\\}/\r\n      },\r\n      {\r\n        begin: /%[qQwWx]?</,\r\n        end: />/\r\n      },\r\n      {\r\n        begin: /%[qQwWx]?\\//,\r\n        end: /\\//\r\n      },\r\n      {\r\n        begin: /%[qQwWx]?%/,\r\n        end: /%/\r\n      },\r\n      {\r\n        begin: /%[qQwWx]?-/,\r\n        end: /-/\r\n      },\r\n      {\r\n        begin: /%[qQwWx]?\\|/,\r\n        end: /\\|/\r\n      },\r\n      // in the following expressions, \\B in the beginning suppresses recognition of ?-sequences\r\n      // where ? is the last character of a preceding identifier, as in: `func?4`\r\n      {\r\n        begin: /\\B\\?(\\\\\\d{1,3})/\r\n      },\r\n      {\r\n        begin: /\\B\\?(\\\\x[A-Fa-f0-9]{1,2})/\r\n      },\r\n      {\r\n        begin: /\\B\\?(\\\\u\\{?[A-Fa-f0-9]{1,6}\\}?)/\r\n      },\r\n      {\r\n        begin: /\\B\\?(\\\\M-\\\\C-|\\\\M-\\\\c|\\\\c\\\\M-|\\\\M-|\\\\C-\\\\M-)[\\x20-\\x7e]/\r\n      },\r\n      {\r\n        begin: /\\B\\?\\\\(c|C-)[\\x20-\\x7e]/\r\n      },\r\n      {\r\n        begin: /\\B\\?\\\\?\\S/\r\n      },\r\n      { // heredocs\r\n        begin: /<<[-~]?'?(\\w+)\\n(?:[^\\n]*\\n)*?\\s*\\1\\b/,\r\n        returnBegin: true,\r\n        contains: [\r\n          {\r\n            begin: /<<[-~]?'?/\r\n          },\r\n          hljs.END_SAME_AS_BEGIN({\r\n            begin: /(\\w+)/,\r\n            end: /(\\w+)/,\r\n            contains: [\r\n              hljs.BACKSLASH_ESCAPE,\r\n              SUBST\r\n            ]\r\n          })\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  // Ruby syntax is underdocumented, but this grammar seems to be accurate\r\n  // as of version 2.7.2 (confirmed with (irb and `Ripper.sexp(...)`)\r\n  // https://docs.ruby-lang.org/en/2.7.0/doc/syntax/literals_rdoc.html#label-Numbers\r\n  const decimal = '[1-9](_?[0-9])*|0';\r\n  const digits = '[0-9](_?[0-9])*';\r\n  const NUMBER = {\r\n    className: 'number',\r\n    relevance: 0,\r\n    variants: [\r\n      // decimal integer/float, optionally exponential or rational, optionally imaginary\r\n      {\r\n        begin: `\\\\b(${decimal})(\\\\.(${digits}))?([eE][+-]?(${digits})|r)?i?\\\\b`\r\n      },\r\n\r\n      // explicit decimal/binary/octal/hexadecimal integer,\r\n      // optionally rational and/or imaginary\r\n      {\r\n        begin: \"\\\\b0[dD][0-9](_?[0-9])*r?i?\\\\b\"\r\n      },\r\n      {\r\n        begin: \"\\\\b0[bB][0-1](_?[0-1])*r?i?\\\\b\"\r\n      },\r\n      {\r\n        begin: \"\\\\b0[oO][0-7](_?[0-7])*r?i?\\\\b\"\r\n      },\r\n      {\r\n        begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\\\b\"\r\n      },\r\n\r\n      // 0-prefixed implicit octal integer, optionally rational and/or imaginary\r\n      {\r\n        begin: \"\\\\b0(_?[0-7])+r?i?\\\\b\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  const PARAMS = {\r\n    className: 'params',\r\n    begin: '\\\\(',\r\n    end: '\\\\)',\r\n    endsParent: true,\r\n    keywords: RUBY_KEYWORDS\r\n  };\r\n\r\n  const RUBY_DEFAULT_CONTAINS = [\r\n    STRING,\r\n    {\r\n      className: 'class',\r\n      beginKeywords: 'class module',\r\n      end: '$|;',\r\n      illegal: /=/,\r\n      contains: [\r\n        hljs.inherit(hljs.TITLE_MODE, {\r\n          begin: '[A-Za-z_]\\\\w*(::\\\\w+)*(\\\\?|!)?'\r\n        }),\r\n        {\r\n          begin: '<\\\\s*',\r\n          contains: [\r\n            {\r\n              begin: '(' + hljs.IDENT_RE + '::)?' + hljs.IDENT_RE,\r\n              // we already get points for <, we don't need poitns\r\n              // for the name also\r\n              relevance: 0\r\n            }\r\n          ]\r\n        }\r\n      ].concat(COMMENT_MODES)\r\n    },\r\n    {\r\n      className: 'function',\r\n      // def method_name(\r\n      // def method_name;\r\n      // def method_name (end of line)\r\n      begin: concat(/def\\s+/, lookahead(RUBY_METHOD_RE + \"\\\\s*(\\\\(|;|$)\")),\r\n      relevance: 0, // relevance comes from kewords\r\n      keywords: \"def\",\r\n      end: '$|;',\r\n      contains: [\r\n        hljs.inherit(hljs.TITLE_MODE, {\r\n          begin: RUBY_METHOD_RE\r\n        }),\r\n        PARAMS\r\n      ].concat(COMMENT_MODES)\r\n    },\r\n    {\r\n      // swallow namespace qualifiers before symbols\r\n      begin: hljs.IDENT_RE + '::'\r\n    },\r\n    {\r\n      className: 'symbol',\r\n      begin: hljs.UNDERSCORE_IDENT_RE + '(!|\\\\?)?:',\r\n      relevance: 0\r\n    },\r\n    {\r\n      className: 'symbol',\r\n      begin: ':(?!\\\\s)',\r\n      contains: [\r\n        STRING,\r\n        {\r\n          begin: RUBY_METHOD_RE\r\n        }\r\n      ],\r\n      relevance: 0\r\n    },\r\n    NUMBER,\r\n    {\r\n      // negative-look forward attemps to prevent false matches like:\r\n      // @ident@ or $ident$ that might indicate this is not ruby at all\r\n      className: \"variable\",\r\n      begin: '(\\\\$\\\\W)|((\\\\$|@@?)(\\\\w+))(?=[^@$?])' + `(?![A-Za-z])(?![@$?'])`\r\n    },\r\n    {\r\n      className: 'params',\r\n      begin: /\\|/,\r\n      end: /\\|/,\r\n      relevance: 0, // this could be a lot of things (in other languages) other than params\r\n      keywords: RUBY_KEYWORDS\r\n    },\r\n    { // regexp container\r\n      begin: '(' + hljs.RE_STARTERS_RE + '|unless)\\\\s*',\r\n      keywords: 'unless',\r\n      contains: [\r\n        {\r\n          className: 'regexp',\r\n          contains: [\r\n            hljs.BACKSLASH_ESCAPE,\r\n            SUBST\r\n          ],\r\n          illegal: /\\n/,\r\n          variants: [\r\n            {\r\n              begin: '/',\r\n              end: '/[a-z]*'\r\n            },\r\n            {\r\n              begin: /%r\\{/,\r\n              end: /\\}[a-z]*/\r\n            },\r\n            {\r\n              begin: '%r\\\\(',\r\n              end: '\\\\)[a-z]*'\r\n            },\r\n            {\r\n              begin: '%r!',\r\n              end: '![a-z]*'\r\n            },\r\n            {\r\n              begin: '%r\\\\[',\r\n              end: '\\\\][a-z]*'\r\n            }\r\n          ]\r\n        }\r\n      ].concat(IRB_OBJECT, COMMENT_MODES),\r\n      relevance: 0\r\n    }\r\n  ].concat(IRB_OBJECT, COMMENT_MODES);\r\n\r\n  SUBST.contains = RUBY_DEFAULT_CONTAINS;\r\n  PARAMS.contains = RUBY_DEFAULT_CONTAINS;\r\n\r\n  // >>\r\n  // ?>\r\n  const SIMPLE_PROMPT = \"[>?]>\";\r\n  // irb(main):001:0>\r\n  const DEFAULT_PROMPT = \"[\\\\w#]+\\\\(\\\\w+\\\\):\\\\d+:\\\\d+>\";\r\n  const RVM_PROMPT = \"(\\\\w+-)?\\\\d+\\\\.\\\\d+\\\\.\\\\d+(p\\\\d+)?[^\\\\d][^>]+>\";\r\n\r\n  const IRB_DEFAULT = [\r\n    {\r\n      begin: /^\\s*=>/,\r\n      starts: {\r\n        end: '$',\r\n        contains: RUBY_DEFAULT_CONTAINS\r\n      }\r\n    },\r\n    {\r\n      className: 'meta',\r\n      begin: '^(' + SIMPLE_PROMPT + \"|\" + DEFAULT_PROMPT + '|' + RVM_PROMPT + ')(?=[ ])',\r\n      starts: {\r\n        end: '$',\r\n        contains: RUBY_DEFAULT_CONTAINS\r\n      }\r\n    }\r\n  ];\r\n\r\n  COMMENT_MODES.unshift(IRB_OBJECT);\r\n\r\n  return {\r\n    name: 'Ruby',\r\n    aliases: [\r\n      'rb',\r\n      'gemspec',\r\n      'podspec',\r\n      'thor',\r\n      'irb'\r\n    ],\r\n    keywords: RUBY_KEYWORDS,\r\n    illegal: /\\/\\*/,\r\n    contains: [\r\n      hljs.SHEBANG({\r\n        binary: \"ruby\"\r\n      })\r\n    ]\r\n      .concat(IRB_DEFAULT)\r\n      .concat(COMMENT_MODES)\r\n      .concat(RUBY_DEFAULT_CONTAINS)\r\n  };\r\n}\r\n\r\nmodule.exports = ruby;\r\n"]},"metadata":{},"sourceType":"script"}