{"ast":null,"code":"/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\n\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\n\n\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/*\r\nLanguage: Bash\r\nAuthor: vah <vahtenberg@gmail.com>\r\nContributrors: Benjamin Pannell <contact@sierrasoftworks.com>\r\nWebsite: https://www.gnu.org/software/bash/\r\nCategory: common\r\n*/\n\n/** @type LanguageFn */\n\n\nfunction bash(hljs) {\n  const VAR = {};\n  const BRACED_VAR = {\n    begin: /\\$\\{/,\n    end: /\\}/,\n    contains: [\"self\", {\n      begin: /:-/,\n      contains: [VAR]\n    } // default values\n    ]\n  };\n  Object.assign(VAR, {\n    className: 'variable',\n    variants: [{\n      begin: concat(/\\$[\\w\\d#@][\\w\\d_]*/, // negative look-ahead tries to avoid matching patterns that are not\n      // Perl at all like $ident$, @ident@, etc.\n      `(?![\\\\w\\\\d])(?![$])`)\n    }, BRACED_VAR]\n  });\n  const SUBST = {\n    className: 'subst',\n    begin: /\\$\\(/,\n    end: /\\)/,\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  const HERE_DOC = {\n    begin: /<<-?\\s*(?=\\w+)/,\n    starts: {\n      contains: [hljs.END_SAME_AS_BEGIN({\n        begin: /(\\w+)/,\n        end: /(\\w+)/,\n        className: 'string'\n      })]\n    }\n  };\n  const QUOTE_STRING = {\n    className: 'string',\n    begin: /\"/,\n    end: /\"/,\n    contains: [hljs.BACKSLASH_ESCAPE, VAR, SUBST]\n  };\n  SUBST.contains.push(QUOTE_STRING);\n  const ESCAPED_QUOTE = {\n    className: '',\n    begin: /\\\\\"/\n  };\n  const APOS_STRING = {\n    className: 'string',\n    begin: /'/,\n    end: /'/\n  };\n  const ARITHMETIC = {\n    begin: /\\$\\(\\(/,\n    end: /\\)\\)/,\n    contains: [{\n      begin: /\\d+#[0-9a-f]+/,\n      className: \"number\"\n    }, hljs.NUMBER_MODE, VAR]\n  };\n  const SH_LIKE_SHELLS = [\"fish\", \"bash\", \"zsh\", \"sh\", \"csh\", \"ksh\", \"tcsh\", \"dash\", \"scsh\"];\n  const KNOWN_SHEBANG = hljs.SHEBANG({\n    binary: `(${SH_LIKE_SHELLS.join(\"|\")})`,\n    relevance: 10\n  });\n  const FUNCTION = {\n    className: 'function',\n    begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,\n    returnBegin: true,\n    contains: [hljs.inherit(hljs.TITLE_MODE, {\n      begin: /\\w[\\w\\d_]*/\n    })],\n    relevance: 0\n  };\n  return {\n    name: 'Bash',\n    aliases: ['sh', 'zsh'],\n    keywords: {\n      $pattern: /\\b[a-z._-]+\\b/,\n      keyword: 'if then else elif fi for while in do done case esac function',\n      literal: 'true false',\n      built_in: // Shell built-ins\n      // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n      'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' + 'trap umask unset ' + // Bash built-ins\n      'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' + 'read readarray source type typeset ulimit unalias ' + // Shell modifiers\n      'set shopt ' + // Zsh built-ins\n      'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' + 'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' + 'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' + 'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' + 'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' + 'zpty zregexparse zsocket zstyle ztcp'\n    },\n    contains: [KNOWN_SHEBANG, // to catch known shells and boost relevancy\n    hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang\n    FUNCTION, ARITHMETIC, hljs.HASH_COMMENT_MODE, HERE_DOC, QUOTE_STRING, ESCAPED_QUOTE, APOS_STRING, VAR]\n  };\n}\n\nmodule.exports = bash;","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/highlight.js/lib/languages/bash.js"],"names":["source","re","concat","args","joined","map","x","join","bash","hljs","VAR","BRACED_VAR","begin","end","contains","Object","assign","className","variants","SUBST","BACKSLASH_ESCAPE","HERE_DOC","starts","END_SAME_AS_BEGIN","QUOTE_STRING","push","ESCAPED_QUOTE","APOS_STRING","ARITHMETIC","NUMBER_MODE","SH_LIKE_SHELLS","KNOWN_SHEBANG","SHEBANG","binary","relevance","FUNCTION","returnBegin","inherit","TITLE_MODE","name","aliases","keywords","$pattern","keyword","literal","built_in","HASH_COMMENT_MODE","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAASA,MAAT,CAAgBC,EAAhB,EAAoB;AAClB,MAAI,CAACA,EAAL,EAAS,OAAO,IAAP;AACT,MAAI,OAAOA,EAAP,KAAc,QAAlB,EAA4B,OAAOA,EAAP;AAE5B,SAAOA,EAAE,CAACD,MAAV;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASE,MAAT,CAAgB,GAAGC,IAAnB,EAAyB;AACvB,QAAMC,MAAM,GAAGD,IAAI,CAACE,GAAL,CAAUC,CAAD,IAAON,MAAM,CAACM,CAAD,CAAtB,EAA2BC,IAA3B,CAAgC,EAAhC,CAAf;AACA,SAAOH,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AACA,SAASI,IAAT,CAAcC,IAAd,EAAoB;AAClB,QAAMC,GAAG,GAAG,EAAZ;AACA,QAAMC,UAAU,GAAG;AACjBC,IAAAA,KAAK,EAAE,MADU;AAEjBC,IAAAA,GAAG,EAAC,IAFa;AAGjBC,IAAAA,QAAQ,EAAE,CACR,MADQ,EAER;AACEF,MAAAA,KAAK,EAAE,IADT;AAEEE,MAAAA,QAAQ,EAAE,CAAEJ,GAAF;AAFZ,KAFQ,CAKN;AALM;AAHO,GAAnB;AAWAK,EAAAA,MAAM,CAACC,MAAP,CAAcN,GAAd,EAAkB;AAChBO,IAAAA,SAAS,EAAE,UADK;AAEhBC,IAAAA,QAAQ,EAAE,CACR;AAACN,MAAAA,KAAK,EAAEV,MAAM,CAAC,oBAAD,EACZ;AACA;AACC,2BAHW;AAAd,KADQ,EAKRS,UALQ;AAFM,GAAlB;AAWA,QAAMQ,KAAK,GAAG;AACZF,IAAAA,SAAS,EAAE,OADC;AAEZL,IAAAA,KAAK,EAAE,MAFK;AAEGC,IAAAA,GAAG,EAAE,IAFR;AAGZC,IAAAA,QAAQ,EAAE,CAACL,IAAI,CAACW,gBAAN;AAHE,GAAd;AAKA,QAAMC,QAAQ,GAAG;AACfT,IAAAA,KAAK,EAAE,gBADQ;AAEfU,IAAAA,MAAM,EAAE;AACNR,MAAAA,QAAQ,EAAE,CACRL,IAAI,CAACc,iBAAL,CAAuB;AACrBX,QAAAA,KAAK,EAAE,OADc;AAErBC,QAAAA,GAAG,EAAE,OAFgB;AAGrBI,QAAAA,SAAS,EAAE;AAHU,OAAvB,CADQ;AADJ;AAFO,GAAjB;AAYA,QAAMO,YAAY,GAAG;AACnBP,IAAAA,SAAS,EAAE,QADQ;AAEnBL,IAAAA,KAAK,EAAE,GAFY;AAEPC,IAAAA,GAAG,EAAE,GAFE;AAGnBC,IAAAA,QAAQ,EAAE,CACRL,IAAI,CAACW,gBADG,EAERV,GAFQ,EAGRS,KAHQ;AAHS,GAArB;AASAA,EAAAA,KAAK,CAACL,QAAN,CAAeW,IAAf,CAAoBD,YAApB;AACA,QAAME,aAAa,GAAG;AACpBT,IAAAA,SAAS,EAAE,EADS;AAEpBL,IAAAA,KAAK,EAAE;AAFa,GAAtB;AAKA,QAAMe,WAAW,GAAG;AAClBV,IAAAA,SAAS,EAAE,QADO;AAElBL,IAAAA,KAAK,EAAE,GAFW;AAENC,IAAAA,GAAG,EAAE;AAFC,GAApB;AAIA,QAAMe,UAAU,GAAG;AACjBhB,IAAAA,KAAK,EAAE,QADU;AAEjBC,IAAAA,GAAG,EAAE,MAFY;AAGjBC,IAAAA,QAAQ,EAAE,CACR;AAAEF,MAAAA,KAAK,EAAE,eAAT;AAA0BK,MAAAA,SAAS,EAAE;AAArC,KADQ,EAERR,IAAI,CAACoB,WAFG,EAGRnB,GAHQ;AAHO,GAAnB;AASA,QAAMoB,cAAc,GAAG,CACrB,MADqB,EAErB,MAFqB,EAGrB,KAHqB,EAIrB,IAJqB,EAKrB,KALqB,EAMrB,KANqB,EAOrB,MAPqB,EAQrB,MARqB,EASrB,MATqB,CAAvB;AAWA,QAAMC,aAAa,GAAGtB,IAAI,CAACuB,OAAL,CAAa;AACjCC,IAAAA,MAAM,EAAG,IAAGH,cAAc,CAACvB,IAAf,CAAoB,GAApB,CAAyB,GADJ;AAEjC2B,IAAAA,SAAS,EAAE;AAFsB,GAAb,CAAtB;AAIA,QAAMC,QAAQ,GAAG;AACflB,IAAAA,SAAS,EAAE,UADI;AAEfL,IAAAA,KAAK,EAAE,2BAFQ;AAGfwB,IAAAA,WAAW,EAAE,IAHE;AAIftB,IAAAA,QAAQ,EAAE,CAACL,IAAI,CAAC4B,OAAL,CAAa5B,IAAI,CAAC6B,UAAlB,EAA8B;AAAC1B,MAAAA,KAAK,EAAE;AAAR,KAA9B,CAAD,CAJK;AAKfsB,IAAAA,SAAS,EAAE;AALI,GAAjB;AAQA,SAAO;AACLK,IAAAA,IAAI,EAAE,MADD;AAELC,IAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,KAAP,CAFJ;AAGLC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,QAAQ,EAAE,eADF;AAERC,MAAAA,OAAO,EACL,8DAHM;AAIRC,MAAAA,OAAO,EACL,YALM;AAMRC,MAAAA,QAAQ,EACN;AACA;AACA,qGACA,mBADA,GAEA;AACA,mGAHA,GAIA,oDAJA,GAKA;AACA,kBANA,GAOA;AACA,sGARA,GASA,6FATA,GAUA,2FAVA,GAWA,wFAXA,GAYA,6FAZA,GAaA;AAtBM,KAHL;AA2BL/B,IAAAA,QAAQ,EAAE,CACRiB,aADQ,EACO;AACftB,IAAAA,IAAI,CAACuB,OAAL,EAFQ,EAEQ;AAChBG,IAAAA,QAHQ,EAIRP,UAJQ,EAKRnB,IAAI,CAACqC,iBALG,EAMRzB,QANQ,EAORG,YAPQ,EAQRE,aARQ,EASRC,WATQ,EAURjB,GAVQ;AA3BL,GAAP;AAwCD;;AAEDqC,MAAM,CAACC,OAAP,GAAiBxC,IAAjB","sourcesContent":["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/*\r\nLanguage: Bash\r\nAuthor: vah <vahtenberg@gmail.com>\r\nContributrors: Benjamin Pannell <contact@sierrasoftworks.com>\r\nWebsite: https://www.gnu.org/software/bash/\r\nCategory: common\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction bash(hljs) {\r\n  const VAR = {};\r\n  const BRACED_VAR = {\r\n    begin: /\\$\\{/,\r\n    end:/\\}/,\r\n    contains: [\r\n      \"self\",\r\n      {\r\n        begin: /:-/,\r\n        contains: [ VAR ]\r\n      } // default values\r\n    ]\r\n  };\r\n  Object.assign(VAR,{\r\n    className: 'variable',\r\n    variants: [\r\n      {begin: concat(/\\$[\\w\\d#@][\\w\\d_]*/,\r\n        // negative look-ahead tries to avoid matching patterns that are not\r\n        // Perl at all like $ident$, @ident@, etc.\r\n        `(?![\\\\w\\\\d])(?![$])`) },\r\n      BRACED_VAR\r\n    ]\r\n  });\r\n\r\n  const SUBST = {\r\n    className: 'subst',\r\n    begin: /\\$\\(/, end: /\\)/,\r\n    contains: [hljs.BACKSLASH_ESCAPE]\r\n  };\r\n  const HERE_DOC = {\r\n    begin: /<<-?\\s*(?=\\w+)/,\r\n    starts: {\r\n      contains: [\r\n        hljs.END_SAME_AS_BEGIN({\r\n          begin: /(\\w+)/,\r\n          end: /(\\w+)/,\r\n          className: 'string'\r\n        })\r\n      ]\r\n    }\r\n  };\r\n  const QUOTE_STRING = {\r\n    className: 'string',\r\n    begin: /\"/, end: /\"/,\r\n    contains: [\r\n      hljs.BACKSLASH_ESCAPE,\r\n      VAR,\r\n      SUBST\r\n    ]\r\n  };\r\n  SUBST.contains.push(QUOTE_STRING);\r\n  const ESCAPED_QUOTE = {\r\n    className: '',\r\n    begin: /\\\\\"/\r\n\r\n  };\r\n  const APOS_STRING = {\r\n    className: 'string',\r\n    begin: /'/, end: /'/\r\n  };\r\n  const ARITHMETIC = {\r\n    begin: /\\$\\(\\(/,\r\n    end: /\\)\\)/,\r\n    contains: [\r\n      { begin: /\\d+#[0-9a-f]+/, className: \"number\" },\r\n      hljs.NUMBER_MODE,\r\n      VAR\r\n    ]\r\n  };\r\n  const SH_LIKE_SHELLS = [\r\n    \"fish\",\r\n    \"bash\",\r\n    \"zsh\",\r\n    \"sh\",\r\n    \"csh\",\r\n    \"ksh\",\r\n    \"tcsh\",\r\n    \"dash\",\r\n    \"scsh\",\r\n  ];\r\n  const KNOWN_SHEBANG = hljs.SHEBANG({\r\n    binary: `(${SH_LIKE_SHELLS.join(\"|\")})`,\r\n    relevance: 10\r\n  });\r\n  const FUNCTION = {\r\n    className: 'function',\r\n    begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,\r\n    returnBegin: true,\r\n    contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\\w[\\w\\d_]*/})],\r\n    relevance: 0\r\n  };\r\n\r\n  return {\r\n    name: 'Bash',\r\n    aliases: ['sh', 'zsh'],\r\n    keywords: {\r\n      $pattern: /\\b[a-z._-]+\\b/,\r\n      keyword:\r\n        'if then else elif fi for while in do done case esac function',\r\n      literal:\r\n        'true false',\r\n      built_in:\r\n        // Shell built-ins\r\n        // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\r\n        'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +\r\n        'trap umask unset ' +\r\n        // Bash built-ins\r\n        'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +\r\n        'read readarray source type typeset ulimit unalias ' +\r\n        // Shell modifiers\r\n        'set shopt ' +\r\n        // Zsh built-ins\r\n        'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +\r\n        'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +\r\n        'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +\r\n        'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +\r\n        'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +\r\n        'zpty zregexparse zsocket zstyle ztcp'\r\n    },\r\n    contains: [\r\n      KNOWN_SHEBANG, // to catch known shells and boost relevancy\r\n      hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang\r\n      FUNCTION,\r\n      ARITHMETIC,\r\n      hljs.HASH_COMMENT_MODE,\r\n      HERE_DOC,\r\n      QUOTE_STRING,\r\n      ESCAPED_QUOTE,\r\n      APOS_STRING,\r\n      VAR\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = bash;\r\n"]},"metadata":{},"sourceType":"script"}