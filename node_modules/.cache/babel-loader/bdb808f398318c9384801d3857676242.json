{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\n\nvar removePosition = require('unist-util-remove-position');\n\nmodule.exports = parse;\nvar lineFeed = '\\n';\nvar lineBreaksExpression = /\\r\\n|\\r/g; // Parse the bound file.\n\nfunction parse() {\n  var self = this;\n  var value = String(self.file);\n  var start = {\n    line: 1,\n    column: 1,\n    offset: 0\n  };\n  var content = xtend(start);\n  var node; // Clean non-unix newlines: `\\r\\n` and `\\r` are all changed to `\\n`.\n  // This should not affect positional information.\n\n  value = value.replace(lineBreaksExpression, lineFeed); // BOM.\n\n  if (value.charCodeAt(0) === 0xfeff) {\n    value = value.slice(1);\n    content.column++;\n    content.offset++;\n  }\n\n  node = {\n    type: 'root',\n    children: self.tokenizeBlock(value, content),\n    position: {\n      start: start,\n      end: self.eof || xtend(start)\n    }\n  };\n\n  if (!self.options.position) {\n    removePosition(node, true);\n  }\n\n  return node;\n}","map":{"version":3,"sources":["F:/PorzotokFrontend/node_modules/remark-parse/lib/parse.js"],"names":["xtend","require","removePosition","module","exports","parse","lineFeed","lineBreaksExpression","self","value","String","file","start","line","column","offset","content","node","replace","charCodeAt","slice","type","children","tokenizeBlock","position","end","eof","options"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,4BAAD,CAA5B;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,oBAAoB,GAAG,UAA3B,C,CAEA;;AACA,SAASF,KAAT,GAAiB;AACf,MAAIG,IAAI,GAAG,IAAX;AACA,MAAIC,KAAK,GAAGC,MAAM,CAACF,IAAI,CAACG,IAAN,CAAlB;AACA,MAAIC,KAAK,GAAG;AAACC,IAAAA,IAAI,EAAE,CAAP;AAAUC,IAAAA,MAAM,EAAE,CAAlB;AAAqBC,IAAAA,MAAM,EAAE;AAA7B,GAAZ;AACA,MAAIC,OAAO,GAAGhB,KAAK,CAACY,KAAD,CAAnB;AACA,MAAIK,IAAJ,CALe,CAOf;AACA;;AACAR,EAAAA,KAAK,GAAGA,KAAK,CAACS,OAAN,CAAcX,oBAAd,EAAoCD,QAApC,CAAR,CATe,CAWf;;AACA,MAAIG,KAAK,CAACU,UAAN,CAAiB,CAAjB,MAAwB,MAA5B,EAAoC;AAClCV,IAAAA,KAAK,GAAGA,KAAK,CAACW,KAAN,CAAY,CAAZ,CAAR;AAEAJ,IAAAA,OAAO,CAACF,MAAR;AACAE,IAAAA,OAAO,CAACD,MAAR;AACD;;AAEDE,EAAAA,IAAI,GAAG;AACLI,IAAAA,IAAI,EAAE,MADD;AAELC,IAAAA,QAAQ,EAAEd,IAAI,CAACe,aAAL,CAAmBd,KAAnB,EAA0BO,OAA1B,CAFL;AAGLQ,IAAAA,QAAQ,EAAE;AAACZ,MAAAA,KAAK,EAAEA,KAAR;AAAea,MAAAA,GAAG,EAAEjB,IAAI,CAACkB,GAAL,IAAY1B,KAAK,CAACY,KAAD;AAArC;AAHL,GAAP;;AAMA,MAAI,CAACJ,IAAI,CAACmB,OAAL,CAAaH,QAAlB,EAA4B;AAC1BtB,IAAAA,cAAc,CAACe,IAAD,EAAO,IAAP,CAAd;AACD;;AAED,SAAOA,IAAP;AACD","sourcesContent":["'use strict'\r\n\r\nvar xtend = require('xtend')\r\nvar removePosition = require('unist-util-remove-position')\r\n\r\nmodule.exports = parse\r\n\r\nvar lineFeed = '\\n'\r\nvar lineBreaksExpression = /\\r\\n|\\r/g\r\n\r\n// Parse the bound file.\r\nfunction parse() {\r\n  var self = this\r\n  var value = String(self.file)\r\n  var start = {line: 1, column: 1, offset: 0}\r\n  var content = xtend(start)\r\n  var node\r\n\r\n  // Clean non-unix newlines: `\\r\\n` and `\\r` are all changed to `\\n`.\r\n  // This should not affect positional information.\r\n  value = value.replace(lineBreaksExpression, lineFeed)\r\n\r\n  // BOM.\r\n  if (value.charCodeAt(0) === 0xfeff) {\r\n    value = value.slice(1)\r\n\r\n    content.column++\r\n    content.offset++\r\n  }\r\n\r\n  node = {\r\n    type: 'root',\r\n    children: self.tokenizeBlock(value, content),\r\n    position: {start: start, end: self.eof || xtend(start)}\r\n  }\r\n\r\n  if (!self.options.position) {\r\n    removePosition(node, true)\r\n  }\r\n\r\n  return node\r\n}\r\n"]},"metadata":{},"sourceType":"script"}